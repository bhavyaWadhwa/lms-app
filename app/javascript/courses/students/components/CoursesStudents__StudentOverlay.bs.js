// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Icon = require("../../../shared/Icon.bs.js");
var Link = require("../../../shared/components/Link.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Avatar = require("../../../shared/Avatar.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var DateFns = require("../../../shared/utils/DateFns.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var UserProxy = require("../../../shared/types/UserProxy.bs.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var ScrollLock = require("../../../shared/utils/ScrollLock.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var OptionUtils = require("../../../shared/utils/OptionUtils.bs.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var SkeletonLoading = require("../../../shared/components/SkeletonLoading.bs.js");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.js");
var CoursesStudents__Level = require("../types/CoursesStudents__Level.bs.js");
var CoursesStudents__TeamInfo = require("../types/CoursesStudents__TeamInfo.bs.js");
var CoursesStudents__CoachNotes = require("./CoursesStudents__CoachNotes.bs.js");
var CoursesStudents__TeamCoaches = require("./CoursesStudents__TeamCoaches.bs.js");
var CoursesStudents__StudentDetails = require("../types/CoursesStudents__StudentDetails.bs.js");
var CoursesStudents__SubmissionsList = require("./CoursesStudents__SubmissionsList.bs.js");
var CoursesStudents__EvaluationCriterion = require("../types/CoursesStudents__EvaluationCriterion.bs.js");

((require("./CoursesStudents__StudentOverlay.css")));

function str(prim) {
  return prim;
}

var initialState = {
  selectedTab: /* Notes */0,
  studentData: /* Loading */0,
  submissions: /* Unloaded */0
};

function closeOverlay(courseId) {
  return ReasonReactRouter.push("/courses/" + (courseId + "/students"));
}

var ppx_printed_query = "query StudentDetailsQuery($studentId: ID!)  {\nstudentDetails(studentId: $studentId)  {\nemail  \nphone  \nsocialLinks  \nevaluationCriteria  {\nid  \nname  \nmaxGrade  \npassGrade  \n}\n\nteam  {\nid  \nname  \nlevelId  \ndroppedOutAt  \naccessEndsAt  \nstudents  {\nid  \nname  \ntitle  \navatarUrl  \n}\n\ncoachUserIds  \n}\n\nsocialLinks  \ntotalTargets  \ntargetsCompleted  \ncompletedLevelIds  \nquizScores  \naverageGrades  {\nevaluationCriterionId  \naverageGrade  \n}\n\n}\n\ncoachNotes(studentId: $studentId)  {\nid  \nnote  \ncreatedAt  \nauthor  {\nid  \nname  \ntitle  \navatarUrl  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "studentDetails");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "email");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeString(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field email on type StudentDetails is missing");
    }
    var match$3 = Js_dict.get(value$2, "phone");
    var tmp$2;
    if (match$3 !== undefined) {
      var value$4 = Caml_option.valFromOption(match$3);
      var match$4 = Js_json.decodeNull(value$4);
      if (match$4 !== undefined) {
        tmp$2 = undefined;
      } else {
        var match$5 = Js_json.decodeString(value$4);
        tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
      }
    } else {
      tmp$2 = undefined;
    }
    var match$6 = Js_dict.get(value$2, "socialLinks");
    var match$7 = Js_dict.get(value$2, "evaluationCriteria");
    var match$8 = Js_dict.get(value$2, "team");
    var tmp$3;
    if (match$8 !== undefined) {
      var value$5 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$8)));
      var match$9 = Js_dict.get(value$5, "id");
      var tmp$4;
      if (match$9 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$9);
        var match$10 = Js_json.decodeString(value$6);
        tmp$4 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$4 = Js_exn.raiseError("graphql_ppx: Field id on type Team is missing");
      }
      var match$11 = Js_dict.get(value$5, "name");
      var tmp$5;
      if (match$11 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$11);
        var match$12 = Js_json.decodeString(value$7);
        tmp$5 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
      } else {
        tmp$5 = Js_exn.raiseError("graphql_ppx: Field name on type Team is missing");
      }
      var match$13 = Js_dict.get(value$5, "levelId");
      var tmp$6;
      if (match$13 !== undefined) {
        var value$8 = Caml_option.valFromOption(match$13);
        var match$14 = Js_json.decodeString(value$8);
        tmp$6 = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
      } else {
        tmp$6 = Js_exn.raiseError("graphql_ppx: Field levelId on type Team is missing");
      }
      var match$15 = Js_dict.get(value$5, "droppedOutAt");
      var tmp$7;
      if (match$15 !== undefined) {
        var value$9 = Caml_option.valFromOption(match$15);
        var match$16 = Js_json.decodeNull(value$9);
        tmp$7 = match$16 !== undefined ? undefined : Caml_option.some(value$9);
      } else {
        tmp$7 = undefined;
      }
      var match$17 = Js_dict.get(value$5, "accessEndsAt");
      var tmp$8;
      if (match$17 !== undefined) {
        var value$10 = Caml_option.valFromOption(match$17);
        var match$18 = Js_json.decodeNull(value$10);
        tmp$8 = match$18 !== undefined ? undefined : Caml_option.some(value$10);
      } else {
        tmp$8 = undefined;
      }
      var match$19 = Js_dict.get(value$5, "students");
      var match$20 = Js_dict.get(value$5, "coachUserIds");
      tmp$3 = {
        id: tmp$4,
        name: tmp$5,
        levelId: tmp$6,
        droppedOutAt: tmp$7,
        accessEndsAt: tmp$8,
        students: match$19 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$19))).map((function (value) {
                  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                  var match = Js_dict.get(value$1, "id");
                  var tmp;
                  if (match !== undefined) {
                    var value$2 = Caml_option.valFromOption(match);
                    var match$1 = Js_json.decodeString(value$2);
                    tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field id on type Student is missing");
                  }
                  var match$2 = Js_dict.get(value$1, "name");
                  var tmp$1;
                  if (match$2 !== undefined) {
                    var value$3 = Caml_option.valFromOption(match$2);
                    var match$3 = Js_json.decodeString(value$3);
                    tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  } else {
                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type Student is missing");
                  }
                  var match$4 = Js_dict.get(value$1, "title");
                  var tmp$2;
                  if (match$4 !== undefined) {
                    var value$4 = Caml_option.valFromOption(match$4);
                    var match$5 = Js_json.decodeString(value$4);
                    tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                  } else {
                    tmp$2 = Js_exn.raiseError("graphql_ppx: Field title on type Student is missing");
                  }
                  var match$6 = Js_dict.get(value$1, "avatarUrl");
                  var tmp$3;
                  if (match$6 !== undefined) {
                    var value$5 = Caml_option.valFromOption(match$6);
                    var match$7 = Js_json.decodeNull(value$5);
                    if (match$7 !== undefined) {
                      tmp$3 = undefined;
                    } else {
                      var match$8 = Js_json.decodeString(value$5);
                      tmp$3 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                    }
                  } else {
                    tmp$3 = undefined;
                  }
                  return {
                          id: tmp,
                          name: tmp$1,
                          title: tmp$2,
                          avatarUrl: tmp$3
                        };
                })) : Js_exn.raiseError("graphql_ppx: Field students on type Team is missing"),
        coachUserIds: match$20 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$20))).map((function (value) {
                  var match = Js_json.decodeString(value);
                  if (match !== undefined) {
                    return match;
                  } else {
                    return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                  }
                })) : Js_exn.raiseError("graphql_ppx: Field coachUserIds on type Team is missing")
      };
    } else {
      tmp$3 = Js_exn.raiseError("graphql_ppx: Field team on type StudentDetails is missing");
    }
    var match$21 = Js_dict.get(value$2, "socialLinks");
    var match$22 = Js_dict.get(value$2, "totalTargets");
    var tmp$9;
    if (match$22 !== undefined) {
      var value$11 = Caml_option.valFromOption(match$22);
      var match$23 = Js_json.decodeNumber(value$11);
      tmp$9 = match$23 !== undefined ? match$23 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$11));
    } else {
      tmp$9 = Js_exn.raiseError("graphql_ppx: Field totalTargets on type StudentDetails is missing");
    }
    var match$24 = Js_dict.get(value$2, "targetsCompleted");
    var tmp$10;
    if (match$24 !== undefined) {
      var value$12 = Caml_option.valFromOption(match$24);
      var match$25 = Js_json.decodeNumber(value$12);
      tmp$10 = match$25 !== undefined ? match$25 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$12));
    } else {
      tmp$10 = Js_exn.raiseError("graphql_ppx: Field targetsCompleted on type StudentDetails is missing");
    }
    var match$26 = Js_dict.get(value$2, "completedLevelIds");
    var match$27 = Js_dict.get(value$2, "quizScores");
    var match$28 = Js_dict.get(value$2, "averageGrades");
    tmp = {
      email: tmp$1,
      phone: tmp$2,
      socialLinks: match$6 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$6))).map((function (value) {
                var match = Js_json.decodeString(value);
                if (match !== undefined) {
                  return match;
                } else {
                  return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                }
              })) : Js_exn.raiseError("graphql_ppx: Field socialLinks on type StudentDetails is missing"),
      evaluationCriteria: match$7 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$7))).map((function (value) {
                var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                var match = Js_dict.get(value$1, "id");
                var tmp;
                if (match !== undefined) {
                  var value$2 = Caml_option.valFromOption(match);
                  var match$1 = Js_json.decodeString(value$2);
                  tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                } else {
                  tmp = Js_exn.raiseError("graphql_ppx: Field id on type EvaluationCriterion is missing");
                }
                var match$2 = Js_dict.get(value$1, "name");
                var tmp$1;
                if (match$2 !== undefined) {
                  var value$3 = Caml_option.valFromOption(match$2);
                  var match$3 = Js_json.decodeString(value$3);
                  tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                } else {
                  tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type EvaluationCriterion is missing");
                }
                var match$4 = Js_dict.get(value$1, "maxGrade");
                var tmp$2;
                if (match$4 !== undefined) {
                  var value$4 = Caml_option.valFromOption(match$4);
                  var match$5 = Js_json.decodeNumber(value$4);
                  tmp$2 = match$5 !== undefined ? match$5 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$4));
                } else {
                  tmp$2 = Js_exn.raiseError("graphql_ppx: Field maxGrade on type EvaluationCriterion is missing");
                }
                var match$6 = Js_dict.get(value$1, "passGrade");
                var tmp$3;
                if (match$6 !== undefined) {
                  var value$5 = Caml_option.valFromOption(match$6);
                  var match$7 = Js_json.decodeNumber(value$5);
                  tmp$3 = match$7 !== undefined ? match$7 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$5));
                } else {
                  tmp$3 = Js_exn.raiseError("graphql_ppx: Field passGrade on type EvaluationCriterion is missing");
                }
                return {
                        id: tmp,
                        name: tmp$1,
                        maxGrade: tmp$2,
                        passGrade: tmp$3
                      };
              })) : Js_exn.raiseError("graphql_ppx: Field evaluationCriteria on type StudentDetails is missing"),
      team: tmp$3,
      socialLinks: match$21 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$21))).map((function (value) {
                var match = Js_json.decodeString(value);
                if (match !== undefined) {
                  return match;
                } else {
                  return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                }
              })) : Js_exn.raiseError("graphql_ppx: Field socialLinks on type StudentDetails is missing"),
      totalTargets: tmp$9,
      targetsCompleted: tmp$10,
      completedLevelIds: match$26 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$26))).map((function (value) {
                var match = Js_json.decodeString(value);
                if (match !== undefined) {
                  return match;
                } else {
                  return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                }
              })) : Js_exn.raiseError("graphql_ppx: Field completedLevelIds on type StudentDetails is missing"),
      quizScores: match$27 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$27))).map((function (value) {
                var match = Js_json.decodeString(value);
                if (match !== undefined) {
                  return match;
                } else {
                  return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                }
              })) : Js_exn.raiseError("graphql_ppx: Field quizScores on type StudentDetails is missing"),
      averageGrades: match$28 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$28))).map((function (value) {
                var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                var match = Js_dict.get(value$1, "evaluationCriterionId");
                var tmp;
                if (match !== undefined) {
                  var value$2 = Caml_option.valFromOption(match);
                  var match$1 = Js_json.decodeString(value$2);
                  tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                } else {
                  tmp = Js_exn.raiseError("graphql_ppx: Field evaluationCriterionId on type EvaluationCriterionAverage is missing");
                }
                var match$2 = Js_dict.get(value$1, "averageGrade");
                var tmp$1;
                if (match$2 !== undefined) {
                  var value$3 = Caml_option.valFromOption(match$2);
                  var match$3 = Js_json.decodeNumber(value$3);
                  tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected float, got " + JSON.stringify(value$3));
                } else {
                  tmp$1 = Js_exn.raiseError("graphql_ppx: Field averageGrade on type EvaluationCriterionAverage is missing");
                }
                return {
                        evaluationCriterionId: tmp,
                        averageGrade: tmp$1
                      };
              })) : Js_exn.raiseError("graphql_ppx: Field averageGrades on type StudentDetails is missing")
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field studentDetails on type Query is missing");
  }
  var match$29 = Js_dict.get(value$1, "coachNotes");
  return {
          studentDetails: tmp,
          coachNotes: match$29 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$29))).map((function (value) {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var match = Js_dict.get(value$1, "id");
                    var tmp;
                    if (match !== undefined) {
                      var value$2 = Caml_option.valFromOption(match);
                      var match$1 = Js_json.decodeString(value$2);
                      tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Field id on type CoachNote is missing");
                    }
                    var match$2 = Js_dict.get(value$1, "note");
                    var tmp$1;
                    if (match$2 !== undefined) {
                      var value$3 = Caml_option.valFromOption(match$2);
                      var match$3 = Js_json.decodeString(value$3);
                      tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                    } else {
                      tmp$1 = Js_exn.raiseError("graphql_ppx: Field note on type CoachNote is missing");
                    }
                    var match$4 = Js_dict.get(value$1, "createdAt");
                    var match$5 = Js_dict.get(value$1, "author");
                    var tmp$2;
                    if (match$5 !== undefined) {
                      var value$4 = Caml_option.valFromOption(match$5);
                      var match$6 = Js_json.decodeNull(value$4);
                      if (match$6 !== undefined) {
                        tmp$2 = undefined;
                      } else {
                        var value$5 = Js_option.getExn(Js_json.decodeObject(value$4));
                        var match$7 = Js_dict.get(value$5, "id");
                        var tmp$3;
                        if (match$7 !== undefined) {
                          var value$6 = Caml_option.valFromOption(match$7);
                          var match$8 = Js_json.decodeString(value$6);
                          tmp$3 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
                        } else {
                          tmp$3 = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
                        }
                        var match$9 = Js_dict.get(value$5, "name");
                        var tmp$4;
                        if (match$9 !== undefined) {
                          var value$7 = Caml_option.valFromOption(match$9);
                          var match$10 = Js_json.decodeString(value$7);
                          tmp$4 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
                        } else {
                          tmp$4 = Js_exn.raiseError("graphql_ppx: Field name on type User is missing");
                        }
                        var match$11 = Js_dict.get(value$5, "title");
                        var tmp$5;
                        if (match$11 !== undefined) {
                          var value$8 = Caml_option.valFromOption(match$11);
                          var match$12 = Js_json.decodeString(value$8);
                          tmp$5 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
                        } else {
                          tmp$5 = Js_exn.raiseError("graphql_ppx: Field title on type User is missing");
                        }
                        var match$13 = Js_dict.get(value$5, "avatarUrl");
                        var tmp$6;
                        if (match$13 !== undefined) {
                          var value$9 = Caml_option.valFromOption(match$13);
                          var match$14 = Js_json.decodeNull(value$9);
                          if (match$14 !== undefined) {
                            tmp$6 = undefined;
                          } else {
                            var match$15 = Js_json.decodeString(value$9);
                            tmp$6 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
                          }
                        } else {
                          tmp$6 = undefined;
                        }
                        tmp$2 = {
                          id: tmp$3,
                          name: tmp$4,
                          title: tmp$5,
                          avatarUrl: tmp$6
                        };
                      }
                    } else {
                      tmp$2 = undefined;
                    }
                    return {
                            id: tmp,
                            note: tmp$1,
                            createdAt: match$4 !== undefined ? Caml_option.valFromOption(match$4) : Js_exn.raiseError("graphql_ppx: Field createdAt on type CoachNote is missing"),
                            author: tmp$2
                          };
                  })) : Js_exn.raiseError("graphql_ppx: Field coachNotes on type Query is missing")
        };
}

function make(studentId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "studentId",
                    studentId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var studentId = variables.studentId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "studentId",
                    studentId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(studentId, param) {
  return Js_dict.fromArray([/* tuple */[
                  "studentId",
                  studentId
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, studentId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "studentId",
                      studentId
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var StudentDetailsQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function updateStudentDetails(setState, studentId, details, coachNotes) {
  var studentDetails = CoursesStudents__StudentDetails.makeFromJs(studentId, details, coachNotes);
  return Curry._1(setState, (function (state) {
                return {
                        selectedTab: state.selectedTab,
                        studentData: /* Loaded */[studentDetails],
                        submissions: state.submissions
                      };
              }));
}

function getStudentDetails(studentId, setState, param) {
  Curry._1(setState, (function (state) {
          return {
                  selectedTab: state.selectedTab,
                  studentData: /* Loading */0,
                  submissions: state.submissions
                };
        }));
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make(studentId, /* () */0)).then((function (response) {
          updateStudentDetails(setState, studentId, response.studentDetails, response.coachNotes);
          return Promise.resolve(/* () */0);
        }));
  return ;
}

function updateSubmissions(setState, submissions) {
  return Curry._1(setState, (function (state) {
                return {
                        selectedTab: state.selectedTab,
                        studentData: state.studentData,
                        submissions: submissions
                      };
              }));
}

function doughnutChart(color, percentage) {
  return React.createElement("svg", {
              className: "student-overlay__doughnut-chart " + color,
              viewBox: "0 0 36 36"
            }, React.createElement("path", {
                  className: "student-overlay__doughnut-chart-bg",
                  d: "M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                }), React.createElement("path", {
                  className: "student-overlay__doughnut-chart-stroke",
                  d: "M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831",
                  strokeDasharray: percentage + ", 100"
                }), React.createElement("text", {
                  className: "student-overlay__doughnut-chart-text font-semibold",
                  x: "50%",
                  y: "58%"
                }, percentage + "%"));
}

function targetsCompletionStatus(targetsCompleted, totalTargets) {
  var targetCompletionPercent = String(targetsCompleted / totalTargets * 100.0 | 0);
  return React.createElement("div", {
              "aria-label": "target-completion-status",
              className: "w-full lg:w-1/2 px-2"
            }, React.createElement("div", {
                  className: "student-overlay__doughnut-chart-container"
                }, doughnutChart("purple", targetCompletionPercent), React.createElement("p", {
                      className: "text-sm font-semibold text-center mt-3"
                    }, "Total Targets Completed"), React.createElement("p", {
                      className: "text-sm text-gray-700 font-semibold text-center mt-1"
                    }, String(targetsCompleted | 0) + ("/" + (String(totalTargets | 0) + " Targets")))));
}

function quizPerformanceChart(averageQuizScore, quizzesAttempted) {
  if (averageQuizScore !== undefined) {
    return React.createElement("div", {
                "aria-label": "quiz-performance-chart",
                className: "w-full lg:w-1/2 px-2 mt-2 lg:mt-0"
              }, React.createElement("div", {
                    className: "student-overlay__doughnut-chart-container"
                  }, doughnutChart("pink", String(averageQuizScore | 0)), React.createElement("p", {
                        className: "text-sm font-semibold text-center mt-3"
                      }, "Average Quiz Score"), React.createElement("p", {
                        className: "text-sm text-gray-700 font-semibold text-center leading-tight mt-1"
                      }, quizzesAttempted + " Quizzes Attempted")));
  } else {
    return null;
  }
}

function averageGradeCharts(evaluationCriteria, averageGrades) {
  return $$Array.map((function (grade) {
                var criterion = CoursesStudents__StudentDetails.evaluationCriterionForGrade(grade, evaluationCriteria, "CoursesStudents__StudentOverlay");
                var passGrade = CoursesStudents__EvaluationCriterion.passGrade(criterion);
                var averageGrade = CoursesStudents__StudentDetails.gradeValue(grade);
                return React.createElement("div", {
                            key: CoursesStudents__EvaluationCriterion.id(criterion),
                            "aria-label": "average-grade-for-criterion-" + CoursesStudents__EvaluationCriterion.id(criterion),
                            className: "flex w-full lg:w-1/2 px-2 mt-2"
                          }, React.createElement("div", {
                                className: "student-overlay__pie-chart-container"
                              }, React.createElement("div", {
                                    className: "flex px-5 pt-4 text-center items-center"
                                  }, React.createElement("svg", {
                                        className: "student-overlay__pie-chart " + (
                                          averageGrade < passGrade ? "student-overlay__pie-chart--fail" : "student-overlay__pie-chart--pass"
                                        ),
                                        viewBox: "0 0 32 32"
                                      }, React.createElement("circle", {
                                            className: "student-overlay__pie-chart-circle " + (
                                              averageGrade < passGrade ? "student-overlay__pie-chart-circle--fail" : "student-overlay__pie-chart-circle--pass"
                                            ),
                                            cx: "16",
                                            cy: "16",
                                            r: "16",
                                            strokeDasharray: CoursesStudents__StudentDetails.gradeAsPercentage(grade, criterion) + ", 100"
                                          })), React.createElement("span", {
                                        className: "ml-3 text-lg font-semibold"
                                      }, grade.grade.toString() + ("/" + String(criterion.maxGrade)))), React.createElement("p", {
                                    className: "text-sm font-semibold px-5 pt-3 pb-4"
                                  }, CoursesStudents__EvaluationCriterion.name(criterion))));
              }), averageGrades);
}

function test(value, url) {
  var tester = new RegExp(value);
  return tester.test(url);
}

function socialLinkIconClass(url) {
  if (test("twitter", url)) {
    return "fab fa-twitter";
  } else if (test("facebook", url)) {
    return "fab fa-facebook-f";
  } else if (test("instagram", url)) {
    return "fab fa-instagram";
  } else if (test("youtube", url)) {
    return "fab fa-youtube";
  } else if (test("linkedin", url)) {
    return "fab fa-linkedin";
  } else if (test("reddit", url)) {
    return "fab fa-reddit";
  } else if (test("flickr", url)) {
    return "fab fa-flickr";
  } else if (test("github", url)) {
    return "fab fa-github";
  } else {
    return "fas fa-users";
  }
}

function showSocialLinks(socialLinks) {
  return React.createElement("div", {
              className: "inline-flex flex-wrap justify-center text-lg text-gray-800 mt-3 bg-gray-100 px-2 rounded-lg"
            }, $$Array.mapi((function (index, link) {
                    return React.createElement("a", {
                                key: String(index),
                                className: "px-2 py-1 inline-block hover:text-primary-500",
                                href: link,
                                target: "_blank"
                              }, React.createElement("i", {
                                    className: socialLinkIconClass(link)
                                  }));
                  }), socialLinks));
}

function personalInfo(studentDetails) {
  var match = CoursesStudents__StudentDetails.phone(studentDetails);
  var socialLinks = CoursesStudents__StudentDetails.socialLinks(studentDetails);
  return React.createElement("div", {
              className: "mt-2 text-center"
            }, React.createElement("div", {
                  className: "flex flex-wrap justify-center text-xs font-semibold text-gray-800"
                }, React.createElement("div", {
                      className: "flex items-center px-2"
                    }, React.createElement("i", {
                          className: "fas fa-envelope"
                        }), React.createElement("p", {
                          className: "ml-2 tracking-wide"
                        }, CoursesStudents__StudentDetails.email(studentDetails))), match !== undefined ? React.createElement("div", {
                        className: "flex items-center px-2"
                      }, React.createElement("i", {
                            className: "fas fa-phone"
                          }), React.createElement("p", {
                            className: "ml-2 tracking-wide"
                          }, match)) : null), ArrayUtils.isNotEmpty(socialLinks) ? showSocialLinks(socialLinks) : null);
}

function setSelectedTab(selectedTab, setState) {
  return Curry._1(setState, (function (state) {
                return {
                        selectedTab: selectedTab,
                        studentData: state.studentData,
                        submissions: state.submissions
                      };
              }));
}

function studentLevelClasses(levelNumber, levelCompleted, currentLevelNumber) {
  var reached = Caml_obj.caml_lessequal(levelNumber, currentLevelNumber) ? "student-overlay__student-level--reached" : "";
  var current = Caml_obj.caml_equal(levelNumber, currentLevelNumber) ? " student-overlay__student-level--current" : "";
  var completed = levelCompleted ? " student-overlay__student-level--completed" : "";
  return reached + (current + completed);
}

function levelProgressBar(levelId, levels, levelsCompleted) {
  var applicableLevels = levels.filter((function (level) {
          return CoursesStudents__Level.number(level) !== 0;
        }));
  var courseCompleted = $$Array.for_all((function (level) {
          return $$Array.mem(CoursesStudents__Level.id(level), levelsCompleted);
        }), applicableLevels);
  var currentLevelNumber = CoursesStudents__Level.number(ArrayUtils.unsafeFind((function (level) {
              return CoursesStudents__Level.id(level) === levelId;
            }), "Unable to find level with id" + (levelId + "in StudentOverlay"), applicableLevels));
  return React.createElement("div", {
              className: "mb-8"
            }, React.createElement("div", {
                  className: "flex justify-between items-end"
                }, React.createElement("h6", {
                      className: "text-sm font-semibold"
                    }, "Level Progress"), courseCompleted ? React.createElement("p", {
                        className: "text-green-600 font-semibold"
                      }, "🎉", React.createElement("span", {
                            className: "text-xs ml-px"
                          }, "Course Completed!")) : null), React.createElement("div", {
                  className: "h-12 flex items-center"
                }, React.createElement("ul", {
                      className: "student-overlay__student-level-progress flex w-full " + (
                        courseCompleted ? "student-overlay__student-level-progress--completed" : ""
                      )
                    }, $$Array.map((function (level) {
                            var levelNumber = CoursesStudents__Level.number(level);
                            var levelCompleted = $$Array.mem(CoursesStudents__Level.id(level), levelsCompleted);
                            return React.createElement("li", {
                                        key: CoursesStudents__Level.id(level),
                                        className: "flex-1 student-overlay__student-level " + studentLevelClasses(levelNumber, levelCompleted, currentLevelNumber)
                                      }, React.createElement("span", {
                                            className: "student-overlay__student-level-count"
                                          }, String(levelNumber)));
                          }), CoursesStudents__Level.sort(applicableLevels)))));
}

function addNoteCB(setState, studentDetails, note) {
  return Curry._1(setState, (function (state) {
                return {
                        selectedTab: state.selectedTab,
                        studentData: /* Loaded */[CoursesStudents__StudentDetails.addNewNote(note, studentDetails)],
                        submissions: state.submissions
                      };
              }));
}

function removeNoteCB(setState, studentDetails, noteId) {
  return Curry._1(setState, (function (state) {
                return {
                        selectedTab: state.selectedTab,
                        studentData: /* Loaded */[CoursesStudents__StudentDetails.removeNote(noteId, studentDetails)],
                        submissions: state.submissions
                      };
              }));
}

function userInfo(key, avatarUrl, name, title) {
  return React.createElement("div", {
              key: key,
              className: "shadow rounded-lg p-4 flex items-center mt-2"
            }, CoursesStudents__TeamCoaches.avatar(undefined, avatarUrl, name), React.createElement("div", {
                  className: "ml-2 md:ml-3"
                }, React.createElement("div", {
                      className: "text-sm font-semibold"
                    }, name), React.createElement("div", {
                      className: "text-xs"
                    }, title)));
}

function coachInfo(teamCoaches, studentDetails) {
  var coaches = CoursesStudents__TeamInfo.coaches(teamCoaches, CoursesStudents__StudentDetails.team(studentDetails));
  var title = CoursesStudents__StudentDetails.teamHasManyStudents(studentDetails) ? "Team Coaches" : "Personal Coaches";
  if (ArrayUtils.isNotEmpty(coaches)) {
    return React.createElement("div", {
                className: "mb-8"
              }, React.createElement("h6", {
                    className: "font-semibold"
                  }, title), $$Array.map((function (coach) {
                      return userInfo(UserProxy.userId(coach), UserProxy.avatarUrl(coach), UserProxy.name(coach), UserProxy.title(coach));
                    }), coaches));
  } else {
    return null;
  }
}

function navigateToStudent(setState, _event) {
  return Curry._1(setState, (function (param) {
                return initialState;
              }));
}

function otherTeamMembers(setState, studentId, studentDetails) {
  if (CoursesStudents__StudentDetails.teamHasManyStudents(studentDetails)) {
    return React.createElement("div", {
                className: "block mb-8"
              }, React.createElement("h6", {
                    className: "font-semibold"
                  }, "Other Team Members"), $$Array.map((function (student) {
                      var path = "/students/" + (CoursesStudents__TeamInfo.studentId(student) + "/report");
                      return React.createElement(Link.make, {
                                  href: path,
                                  className: "block",
                                  onClick: (function (param) {
                                      return Curry._1(setState, (function (param) {
                                                    return initialState;
                                                  }));
                                    }),
                                  children: userInfo(CoursesStudents__TeamInfo.studentId(student), CoursesStudents__TeamInfo.studentAvatarUrl(student), CoursesStudents__TeamInfo.studentName(student), CoursesStudents__TeamInfo.studentTitle(student)),
                                  key: CoursesStudents__TeamInfo.studentId(student)
                                });
                    }), CoursesStudents__TeamInfo.otherStudents(studentId, CoursesStudents__StudentDetails.team(studentDetails))));
  } else {
    return null;
  }
}

function inactiveWarning(teamInfo) {
  var match = CoursesStudents__TeamInfo.droppedOutAt(teamInfo);
  var match$1 = CoursesStudents__TeamInfo.accessEndsAt(teamInfo);
  var warning;
  if (match !== undefined) {
    warning = "This student dropped out of the course on " + (DateFns.formatPreset(Caml_option.valFromOption(match), true, true, undefined, /* () */0) + ".");
  } else if (match$1 !== undefined) {
    var accessEndsAt = Caml_option.valFromOption(match$1);
    warning = DateFns.isPast(accessEndsAt) ? "This student's access to the course ended on " + (DateFns.formatPreset(accessEndsAt, true, true, undefined, /* () */0) + ".") : undefined;
  } else {
    warning = undefined;
  }
  return OptionUtils.mapWithDefault((function (warning) {
                return React.createElement("div", {
                            className: "border border-yellow-400 rounded bg-yellow-400 py-2 px-3 mt-3"
                          }, React.createElement("i", {
                                className: "fas fa-exclamation-triangle"
                              }), React.createElement("span", {
                                className: "ml-2"
                              }, warning));
              }), null, warning);
}

function CoursesStudents__StudentOverlay(Props) {
  var courseId = Props.courseId;
  var studentId = Props.studentId;
  var levels = Props.levels;
  var userId = Props.userId;
  var teamCoaches = Props.teamCoaches;
  var match = React.useState((function () {
          return initialState;
        }));
  var setState = match[1];
  var state = match[0];
  React.useEffect((function () {
          ScrollLock.activate(/* () */0);
          return (function (param) {
                    return ScrollLock.deactivate(/* () */0);
                  });
        }), ([]));
  React.useEffect((function () {
          return getStudentDetails(studentId, setState, /* () */0);
        }), [studentId]);
  var match$1 = state.studentData;
  var tmp;
  if (match$1) {
    var studentDetails = match$1[0];
    var match$2 = CoursesStudents__StudentDetails.avatarUrl(studentDetails);
    var match$3 = state.selectedTab;
    var match$4 = state.selectedTab;
    var match$5 = state.selectedTab;
    tmp = React.createElement("div", {
          className: "flex flex-col md:flex-row md:h-screen"
        }, React.createElement("div", {
              className: "w-full md:w-2/5 bg-white p-4 md:p-8 md:py-6 2xl:px-16 2xl:py-12 md:overflow-y-auto"
            }, React.createElement("div", {
                  className: "student-overlay__student-details relative pb-8"
                }, React.createElement("div", {
                      className: "absolute z-50 left-0 cursor-pointer top-0 inline-flex p-1 rounded-full bg-gray-200 h-10 w-10 justify-center items-center text-gray-700 hover:text-gray-900 hover:bg-gray-300",
                      onClick: (function (param) {
                          return closeOverlay(courseId);
                        })
                    }, React.createElement(Icon.make, {
                          className: "if i-times-regular text-xl lg:text-2xl"
                        })), React.createElement("div", {
                      className: "student-overlay__student-avatar mx-auto w-18 h-18 md:w-24 md:h-24 text-xs border border-yellow-500 rounded-full overflow-hidden flex-shrink-0"
                    }, match$2 !== undefined ? React.createElement("img", {
                            className: "w-full object-cover",
                            src: match$2
                          }) : React.createElement(Avatar.make, {
                            name: CoursesStudents__StudentDetails.name(studentDetails),
                            className: "object-cover"
                          })), React.createElement("h2", {
                      className: "text-lg text-center mt-3"
                    }, CoursesStudents__StudentDetails.name(studentDetails)), React.createElement("p", {
                      className: "text-sm font-semibold text-center mt-1"
                    }, CoursesStudents__StudentDetails.title(studentDetails)), personalInfo(studentDetails), inactiveWarning(CoursesStudents__StudentDetails.team(studentDetails))), levelProgressBar(CoursesStudents__StudentDetails.levelId(studentDetails), levels, CoursesStudents__StudentDetails.completedLevelIds(studentDetails)), React.createElement("div", {
                  className: "mb-8"
                }, React.createElement("h6", {
                      className: "font-semibold"
                    }, "Targets Overview"), React.createElement("div", {
                      className: "flex -mx-2 flex-wrap mt-2"
                    }, targetsCompletionStatus(CoursesStudents__StudentDetails.targetsCompleted(studentDetails), CoursesStudents__StudentDetails.totalTargets(studentDetails)), quizPerformanceChart(CoursesStudents__StudentDetails.averageQuizScore(studentDetails), CoursesStudents__StudentDetails.quizzesAttempted(studentDetails)))), ArrayUtils.isNotEmpty(CoursesStudents__StudentDetails.averageGrades(studentDetails)) ? React.createElement("div", {
                    className: "mb-8"
                  }, React.createElement("h6", {
                        className: "font-semibold"
                      }, "Average Grades"), React.createElement("div", {
                        className: "flex -mx-2 flex-wrap"
                      }, averageGradeCharts(CoursesStudents__StudentDetails.evaluationCriteria(studentDetails), CoursesStudents__StudentDetails.averageGrades(studentDetails)))) : null, coachInfo(teamCoaches, studentDetails), otherTeamMembers(setState, studentId, studentDetails)), React.createElement("div", {
              className: "w-full relative md:w-3/5 bg-gray-100 md:border-l pb-6 2xl:pb-12 md:overflow-y-auto"
            }, React.createElement("div", {
                  className: "sticky top-0 bg-gray-100 pt-2 md:pt-4 px-4 md:px-8 2xl:px-16 2xl:pt-10 z-30"
                }, React.createElement("ul", {
                      className: "flex font-semibold border-b text-sm"
                    }, React.createElement("li", {
                          className: "px-3 py-3 md:py-2 cursor-pointer text-gray-800 rounded-t-lg " + (
                            match$3 ? "hover:bg-gray-200 hover:text-gray-900" : "border-b-3 border-primary-500 text-primary-500 -mb-px"
                          ),
                          onClick: (function (_event) {
                              return setSelectedTab(/* Notes */0, setState);
                            })
                        }, "Notes"), React.createElement("li", {
                          className: "px-3 py-3 md:py-2 cursor-pointer text-gray-800 " + (
                            match$4 ? "border-b-3 border-primary-500 text-primary-500 -mb-px" : "hover:bg-gray-200 hover:text-gray-900"
                          ),
                          onClick: (function (_event) {
                              return setSelectedTab(/* Submissions */1, setState);
                            })
                        }, "Submissions"))), React.createElement("div", {
                  className: "pt-2 px-4 md:px-8 2xl:px-16"
                }, match$5 ? React.createElement(CoursesStudents__SubmissionsList.make, {
                        studentId: studentId,
                        levels: levels,
                        submissions: state.submissions,
                        updateSubmissionsCB: (function (param) {
                            return updateSubmissions(setState, param);
                          })
                      }) : React.createElement(CoursesStudents__CoachNotes.make, {
                        studentId: studentId,
                        coachNotes: CoursesStudents__StudentDetails.coachNotes(studentDetails),
                        addNoteCB: (function (param) {
                            return addNoteCB(setState, studentDetails, param);
                          }),
                        removeNoteCB: (function (param) {
                            return removeNoteCB(setState, studentDetails, param);
                          }),
                        userId: userId
                      }))));
  } else {
    tmp = React.createElement("div", {
          className: "flex flex-col md:flex-row md:h-screen"
        }, React.createElement("div", {
              className: "w-full md:w-2/5 bg-white p-4 md:p-8 2xl:p-16"
            }, SkeletonLoading.image(/* () */0), SkeletonLoading.multiple(2, SkeletonLoading.profileCard(/* () */0))), React.createElement("div", {
              className: "w-full relative md:w-3/5 bg-gray-100 md:border-l p-4 md:p-8 2xl:p-16"
            }, SkeletonLoading.contents(/* () */0), SkeletonLoading.profileCard(/* () */0)));
  }
  return React.createElement("div", {
              className: "fixed z-30 top-0 left-0 w-full h-full overflow-y-scroll md:overflow-hidden bg-white"
            }, tmp);
}

var make$1 = CoursesStudents__StudentOverlay;

exports.str = str;
exports.initialState = initialState;
exports.closeOverlay = closeOverlay;
exports.StudentDetailsQuery = StudentDetailsQuery;
exports.updateStudentDetails = updateStudentDetails;
exports.getStudentDetails = getStudentDetails;
exports.updateSubmissions = updateSubmissions;
exports.doughnutChart = doughnutChart;
exports.targetsCompletionStatus = targetsCompletionStatus;
exports.quizPerformanceChart = quizPerformanceChart;
exports.averageGradeCharts = averageGradeCharts;
exports.test = test;
exports.socialLinkIconClass = socialLinkIconClass;
exports.showSocialLinks = showSocialLinks;
exports.personalInfo = personalInfo;
exports.setSelectedTab = setSelectedTab;
exports.studentLevelClasses = studentLevelClasses;
exports.levelProgressBar = levelProgressBar;
exports.addNoteCB = addNoteCB;
exports.removeNoteCB = removeNoteCB;
exports.userInfo = userInfo;
exports.coachInfo = coachInfo;
exports.navigateToStudent = navigateToStudent;
exports.otherTeamMembers = otherTeamMembers;
exports.inactiveWarning = inactiveWarning;
exports.make = make$1;
/*  Not a pure module */
