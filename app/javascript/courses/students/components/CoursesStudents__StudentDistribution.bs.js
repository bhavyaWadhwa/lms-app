// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var PfIcon = require("../../../packages/pf-icon/src/PfIcon.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Tooltip = require("../../../shared/components/Tooltip.bs.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var UserProxy = require("../../../shared/types/UserProxy.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var CoursesStudents__DistributionInLevel = require("../types/CoursesStudents__DistributionInLevel.bs.js");

((require("./CoursesStudents__StudentDistribution.css")));

function str(prim) {
  return prim;
}

var ppx_printed_query = "query StudentDistribution($courseId: ID!, $coachId: ID)  {\nstudentDistribution(courseId: $courseId, coachId: $coachId)  {\nid  \nnumber  \nstudentsInLevel  \nteamsInLevel  \nunlocked  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "studentDistribution");
  return {
          studentDistribution: match !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match))).map((function (value) {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var match = Js_dict.get(value$1, "id");
                    var tmp;
                    if (match !== undefined) {
                      var value$2 = Caml_option.valFromOption(match);
                      var match$1 = Js_json.decodeString(value$2);
                      tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Field id on type DistributionInLevel is missing");
                    }
                    var match$2 = Js_dict.get(value$1, "number");
                    var tmp$1;
                    if (match$2 !== undefined) {
                      var value$3 = Caml_option.valFromOption(match$2);
                      var match$3 = Js_json.decodeNumber(value$3);
                      tmp$1 = match$3 !== undefined ? match$3 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$3));
                    } else {
                      tmp$1 = Js_exn.raiseError("graphql_ppx: Field number on type DistributionInLevel is missing");
                    }
                    var match$4 = Js_dict.get(value$1, "studentsInLevel");
                    var tmp$2;
                    if (match$4 !== undefined) {
                      var value$4 = Caml_option.valFromOption(match$4);
                      var match$5 = Js_json.decodeNumber(value$4);
                      tmp$2 = match$5 !== undefined ? match$5 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$4));
                    } else {
                      tmp$2 = Js_exn.raiseError("graphql_ppx: Field studentsInLevel on type DistributionInLevel is missing");
                    }
                    var match$6 = Js_dict.get(value$1, "teamsInLevel");
                    var tmp$3;
                    if (match$6 !== undefined) {
                      var value$5 = Caml_option.valFromOption(match$6);
                      var match$7 = Js_json.decodeNumber(value$5);
                      tmp$3 = match$7 !== undefined ? match$7 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$5));
                    } else {
                      tmp$3 = Js_exn.raiseError("graphql_ppx: Field teamsInLevel on type DistributionInLevel is missing");
                    }
                    var match$8 = Js_dict.get(value$1, "unlocked");
                    var tmp$4;
                    if (match$8 !== undefined) {
                      var value$6 = Caml_option.valFromOption(match$8);
                      var match$9 = Js_json.decodeBoolean(value$6);
                      tmp$4 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$6));
                    } else {
                      tmp$4 = Js_exn.raiseError("graphql_ppx: Field unlocked on type DistributionInLevel is missing");
                    }
                    return {
                            id: tmp,
                            number: tmp$1,
                            studentsInLevel: tmp$2,
                            teamsInLevel: tmp$3,
                            unlocked: tmp$4
                          };
                  })) : Js_exn.raiseError("graphql_ppx: Field studentDistribution on type Query is missing")
        };
}

function make(courseId, coachId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "courseId",
                    courseId
                  ],
                  /* tuple */[
                    "coachId",
                    coachId !== undefined ? coachId : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var courseId = variables.courseId;
  var coachId = variables.coachId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "courseId",
                    courseId
                  ],
                  /* tuple */[
                    "coachId",
                    coachId !== undefined ? coachId : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(courseId, coachId, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "courseId",
                  courseId
                ],
                /* tuple */[
                  "coachId",
                  coachId !== undefined ? coachId : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, courseId, coachId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "courseId",
                      courseId
                    ],
                    /* tuple */[
                      "coachId",
                      coachId !== undefined ? coachId : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var StudentDistributionQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function stylingForLevelPills(percentageStudents) {
  var emptyStyle = { };
  var styleWithWidth = {
    width: percentageStudents.toString() + "%"
  };
  if (0.0 <= percentageStudents && percentageStudents < 5.0) {
    return /* tuple */[
            "w-8 flex-shrink-0",
            emptyStyle,
            "bg-green-200 text-green-800"
          ];
  } else if (5.0 <= percentageStudents && percentageStudents < 20.0) {
    return /* tuple */[
            "",
            styleWithWidth,
            "bg-green-300 text-green-800"
          ];
  } else if (20.0 <= percentageStudents && percentageStudents < 40.0) {
    return /* tuple */[
            "",
            styleWithWidth,
            "bg-green-400 text-green-900"
          ];
  } else if (40.0 <= percentageStudents && percentageStudents < 60.0) {
    return /* tuple */[
            "",
            styleWithWidth,
            "bg-green-500 text-white"
          ];
  } else if (60.0 <= percentageStudents && percentageStudents < 80.0) {
    return /* tuple */[
            "",
            styleWithWidth,
            "bg-green-600 text-white"
          ];
  } else {
    return /* tuple */[
            "",
            styleWithWidth,
            "bg-green-700 text-white"
          ];
  }
}

function refreshStudentDistribution(courseId, filterCoach, setStudentDistribution) {
  var coachId = Belt_Option.map(filterCoach, UserProxy.id);
  (function (eta) {
            return GraphqlQuery.sendQuery(undefined, eta);
          })(make(courseId, coachId, /* () */0)).then((function (response) {
            var distribution = $$Array.map(CoursesStudents__DistributionInLevel.fromJsObject, response.studentDistribution);
            Curry._1(setStudentDistribution, (function (param) {
                    return distribution;
                  }));
            return Promise.resolve(/* () */0);
          })).catch((function (error) {
          console.log(error);
          Curry._1(setStudentDistribution, (function (param) {
                  return [];
                }));
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

var studentDistributionSkeleton = React.createElement("div", {
      className: "skeleton-body-container w-full mx-auto"
    }, React.createElement("div", {
          className: "skeleton-body-wrapper px-3 lg:px-0"
        }, React.createElement("div", {
              className: "flex"
            }, React.createElement("div", {
                  className: "w-1/6"
                }, React.createElement("div", {
                      className: "skeleton-placeholder__line-sm skeleton-animate w-6 mx-auto"
                    }), React.createElement("div", {
                      className: "skeleton-placeholder__line-md skeleton-animate mt-2"
                    })), React.createElement("div", {
                  className: "w-5/12"
                }, React.createElement("div", {
                      className: "skeleton-placeholder__line-sm skeleton-animate w-6 mx-auto"
                    }), React.createElement("div", {
                      className: "skeleton-placeholder__line-md skeleton-animate mt-2"
                    })), React.createElement("div", {
                  className: "w-1/4"
                }, React.createElement("div", {
                      className: "skeleton-placeholder__line-sm skeleton-animate w-6 mx-auto"
                    }), React.createElement("div", {
                      className: "skeleton-placeholder__line-md skeleton-animate mt-2"
                    })), React.createElement("div", {
                  className: "w-1/12"
                }, React.createElement("div", {
                      className: "skeleton-placeholder__line-sm skeleton-animate w-6 mx-auto"
                    }), React.createElement("div", {
                      className: "skeleton-placeholder__line-md skeleton-animate mt-2"
                    })), React.createElement("div", {
                  className: "w-1/12"
                }, React.createElement("div", {
                      className: "skeleton-placeholder__line-sm skeleton-animate w-6 mx-auto"
                    }), React.createElement("div", {
                      className: "skeleton-placeholder__line-md skeleton-animate mt-2"
                    })))));

function CoursesStudents__StudentDistribution(Props) {
  var selectLevelCB = Props.selectLevelCB;
  var courseId = Props.courseId;
  var filterCoach = Props.filterCoach;
  var match = React.useState((function () {
          return ;
        }));
  var setStudentDistribution = match[1];
  var studentDistribution = match[0];
  React.useEffect((function () {
          refreshStudentDistribution(courseId, filterCoach, setStudentDistribution);
          return ;
        }), [filterCoach]);
  var tmp;
  if (studentDistribution !== undefined) {
    var distribution = studentDistribution;
    var totalStudentsInCourse = $$Array.fold_left((function (x, y) {
            return x + CoursesStudents__DistributionInLevel.studentsInLevel(y) | 0;
          }), 0, distribution);
    var completedLevels = CoursesStudents__DistributionInLevel.levelsCompletedByAllStudents(distribution);
    tmp = totalStudentsInCourse > 0 ? React.createElement("div", {
            className: "flex w-full border bg-gray-100 rounded font-semibold "
          }, $$Array.map((function (level) {
                  var percentageStudents = CoursesStudents__DistributionInLevel.percentageStudents(level, totalStudentsInCourse);
                  var match = stylingForLevelPills(percentageStudents);
                  var tip = React.createElement("div", {
                        className: "text-left"
                      }, React.createElement("p", undefined, "Level: " + String(CoursesStudents__DistributionInLevel.number(level))), React.createElement("p", undefined, "Students: " + String(CoursesStudents__DistributionInLevel.studentsInLevel(level))), CoursesStudents__DistributionInLevel.studentsInLevel(level) !== CoursesStudents__DistributionInLevel.teamsInLevel(level) ? React.createElement("p", undefined, "Teams: " + String(CoursesStudents__DistributionInLevel.teamsInLevel(level))) : null, React.createElement("p", undefined, "Percentage: " + percentageStudents.toFixed(1)));
                  return React.createElement("div", {
                              key: CoursesStudents__DistributionInLevel.id(level),
                              "aria-label": "Students in level " + String(CoursesStudents__DistributionInLevel.number(level)),
                              className: "student-distribution__container text-center relative " + match[0],
                              style: match[1]
                            }, React.createElement("label", {
                                  className: "absolute -mt-5 left-0 right-0 inline-block text-xs text-gray-700 text-center"
                                }, CoursesStudents__DistributionInLevel.shortName(level)), React.createElement(Tooltip.make, {
                                  tip: tip,
                                  className: "w-full",
                                  position: /* Bottom */437082891,
                                  children: React.createElement("div", {
                                        className: "student-distribution__pill hover:shadow-inner focus:shadow-inner relative cursor-pointer border-white text-xs leading-none text-center " + (
                                          $$Array.mem(level, completedLevels) ? "bg-yellow-300 text-yellow-900" : (
                                              CoursesStudents__DistributionInLevel.unlocked(level) ? match[2] : "student-distribution__pill--locked cursor-default bg-gray-300 text-gray-800"
                                            )
                                        ),
                                        onClick: (function (param) {
                                            return Curry._1(selectLevelCB, CoursesStudents__DistributionInLevel.id(level));
                                          })
                                      }, $$Array.mem(level, completedLevels) ? React.createElement(PfIcon.make, {
                                              className: "if i-check-solid text-tiny"
                                            }) : React.createElement("div", undefined, React.createElement("div", {
                                                  className: CoursesStudents__DistributionInLevel.unlocked(level) ? "" : "student-distribution__team-count-value"
                                                }, String(CoursesStudents__DistributionInLevel.teamsInLevel(level))), CoursesStudents__DistributionInLevel.unlocked(level) ? null : React.createElement("div", {
                                                    className: "student-distribution__locked-icon"
                                                  }, React.createElement("i", {
                                                        className: "fas fa-lock text-tiny"
                                                      }))))
                                }));
                }), CoursesStudents__DistributionInLevel.sort(distribution.filter((function (level) {
                          return CoursesStudents__DistributionInLevel.number(level) !== 0;
                        }))))) : null;
  } else {
    tmp = studentDistributionSkeleton;
  }
  return React.createElement("div", {
              "aria-label": "Students level-wise distribution",
              className: "w-full pt-8 max-w-3xl mx-auto hidden md:block"
            }, tmp);
}

var make$1 = CoursesStudents__StudentDistribution;

exports.str = str;
exports.StudentDistributionQuery = StudentDistributionQuery;
exports.stylingForLevelPills = stylingForLevelPills;
exports.refreshStudentDistribution = refreshStudentDistribution;
exports.studentDistributionSkeleton = studentDistributionSkeleton;
exports.make = make$1;
/*  Not a pure module */
