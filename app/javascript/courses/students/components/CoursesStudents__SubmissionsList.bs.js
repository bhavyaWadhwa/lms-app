// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var SkeletonLoading = require("../../../shared/components/SkeletonLoading.bs.js");
var CoursesStudents__Level = require("../types/CoursesStudents__Level.bs.js");
var CoursesStudents__Submission = require("../types/CoursesStudents__Submission.bs.js");
var ReviewedEmptySvg = require("../../shared/images/reviewed-empty.svg");

((require("./CoursesStudents__StudentOverlay.css")));

var reviewedEmptyImage = ReviewedEmptySvg.default;

function str(prim) {
  return prim;
}

var ppx_printed_query = "query StudentSubmissionsQuery($studentId: ID!, $after: String, $sortDirection: SortDirection!)  {\nstudentSubmissions(studentId: $studentId, after: $after, first: 20, sortDirection: $sortDirection)  {\nnodes  {\nid  \ncreatedAt  \nlevelId  \npassedAt  \ntitle  \nevaluatorId  \n}\n\npageInfo  {\nhasNextPage  \nendCursor  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "studentSubmissions");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "nodes");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      tmp$1 = match$2 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$3)).map((function (value) {
                var match = Js_json.decodeNull(value);
                if (match !== undefined) {
                  return ;
                } else {
                  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                  var match$1 = Js_dict.get(value$1, "id");
                  var tmp;
                  if (match$1 !== undefined) {
                    var value$2 = Caml_option.valFromOption(match$1);
                    var match$2 = Js_json.decodeString(value$2);
                    tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field id on type StudentSubmission is missing");
                  }
                  var match$3 = Js_dict.get(value$1, "createdAt");
                  var match$4 = Js_dict.get(value$1, "levelId");
                  var tmp$1;
                  if (match$4 !== undefined) {
                    var value$3 = Caml_option.valFromOption(match$4);
                    var match$5 = Js_json.decodeString(value$3);
                    tmp$1 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  } else {
                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field levelId on type StudentSubmission is missing");
                  }
                  var match$6 = Js_dict.get(value$1, "passedAt");
                  var tmp$2;
                  if (match$6 !== undefined) {
                    var value$4 = Caml_option.valFromOption(match$6);
                    var match$7 = Js_json.decodeNull(value$4);
                    tmp$2 = match$7 !== undefined ? undefined : Caml_option.some(value$4);
                  } else {
                    tmp$2 = undefined;
                  }
                  var match$8 = Js_dict.get(value$1, "title");
                  var tmp$3;
                  if (match$8 !== undefined) {
                    var value$5 = Caml_option.valFromOption(match$8);
                    var match$9 = Js_json.decodeString(value$5);
                    tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                  } else {
                    tmp$3 = Js_exn.raiseError("graphql_ppx: Field title on type StudentSubmission is missing");
                  }
                  var match$10 = Js_dict.get(value$1, "evaluatorId");
                  var tmp$4;
                  if (match$10 !== undefined) {
                    var value$6 = Caml_option.valFromOption(match$10);
                    var match$11 = Js_json.decodeNull(value$6);
                    if (match$11 !== undefined) {
                      tmp$4 = undefined;
                    } else {
                      var match$12 = Js_json.decodeString(value$6);
                      tmp$4 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
                    }
                  } else {
                    tmp$4 = undefined;
                  }
                  return {
                          id: tmp,
                          createdAt: match$3 !== undefined ? Caml_option.valFromOption(match$3) : Js_exn.raiseError("graphql_ppx: Field createdAt on type StudentSubmission is missing"),
                          levelId: tmp$1,
                          passedAt: tmp$2,
                          title: tmp$3,
                          evaluatorId: tmp$4
                        };
                }
              }));
    } else {
      tmp$1 = undefined;
    }
    var match$3 = Js_dict.get(value$2, "pageInfo");
    var tmp$2;
    if (match$3 !== undefined) {
      var value$4 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$3)));
      var match$4 = Js_dict.get(value$4, "hasNextPage");
      var tmp$3;
      if (match$4 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$4);
        var match$5 = Js_json.decodeBoolean(value$5);
        tmp$3 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$5));
      } else {
        tmp$3 = Js_exn.raiseError("graphql_ppx: Field hasNextPage on type PageInfo is missing");
      }
      var match$6 = Js_dict.get(value$4, "endCursor");
      var tmp$4;
      if (match$6 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$6);
        var match$7 = Js_json.decodeNull(value$6);
        if (match$7 !== undefined) {
          tmp$4 = undefined;
        } else {
          var match$8 = Js_json.decodeString(value$6);
          tmp$4 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        }
      } else {
        tmp$4 = undefined;
      }
      tmp$2 = {
        hasNextPage: tmp$3,
        endCursor: tmp$4
      };
    } else {
      tmp$2 = Js_exn.raiseError("graphql_ppx: Field pageInfo on type StudentSubmissionConnection is missing");
    }
    tmp = {
      nodes: tmp$1,
      pageInfo: tmp$2
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field studentSubmissions on type Query is missing");
  }
  return {
          studentSubmissions: tmp
        };
}

function json_of_SortDirection(value) {
  if (value >= 235215128) {
    return "Descending";
  } else {
    return "Ascending";
  }
}

function make(studentId, after, sortDirection, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "studentId",
                    studentId
                  ],
                  /* tuple */[
                    "after",
                    after !== undefined ? after : null
                  ],
                  /* tuple */[
                    "sortDirection",
                    json_of_SortDirection(sortDirection)
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var studentId = variables.studentId;
  var after = variables.after;
  var sortDirection = variables.sortDirection;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "studentId",
                    studentId
                  ],
                  /* tuple */[
                    "after",
                    after !== undefined ? after : null
                  ],
                  /* tuple */[
                    "sortDirection",
                    json_of_SortDirection(sortDirection)
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(studentId, after, sortDirection, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "studentId",
                  studentId
                ],
                /* tuple */[
                  "after",
                  after !== undefined ? after : null
                ],
                /* tuple */[
                  "sortDirection",
                  json_of_SortDirection(sortDirection)
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, studentId, after, sortDirection, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "studentId",
                      studentId
                    ],
                    /* tuple */[
                      "after",
                      after !== undefined ? after : null
                    ],
                    /* tuple */[
                      "sortDirection",
                      json_of_SortDirection(sortDirection)
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var StudentSubmissionsQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  json_of_SortDirection: json_of_SortDirection,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function updateStudentSubmissions(setState, updateSubmissionsCB, endCursor, hasNextPage, submissions, nodes) {
  var updatedSubmissions = $$Array.append(ArrayUtils.flatten(nodes !== undefined ? CoursesStudents__Submission.makeFromJs(nodes) : []), submissions);
  var submissionsData = hasNextPage && endCursor !== undefined ? /* PartiallyLoaded */Block.__(0, [
        updatedSubmissions,
        endCursor
      ]) : /* FullyLoaded */Block.__(1, [updatedSubmissions]);
  Curry._1(updateSubmissionsCB, submissionsData);
  return Curry._1(setState, (function (param) {
                return {
                        loading: false
                      };
              }));
}

function getStudentSubmissions(studentId, cursor, setState, submissions, updateSubmissionsCB) {
  Curry._1(setState, (function (param) {
          return {
                  loading: true
                };
        }));
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(cursor !== undefined ? make(studentId, cursor, /* Descending */235215128, /* () */0) : make(studentId, undefined, /* Descending */235215128, /* () */0)).then((function (response) {
          updateStudentSubmissions(setState, updateSubmissionsCB, response.studentSubmissions.pageInfo.endCursor, response.studentSubmissions.pageInfo.hasNextPage, submissions, response.studentSubmissions.nodes);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function showSubmissionStatus(submission) {
  var match = CoursesStudents__Submission.evaluatorId(submission);
  if (match !== undefined) {
    if (CoursesStudents__Submission.failed(submission)) {
      return React.createElement("div", {
                  className: "bg-red-100 border border-red-500 flex-shrink-0 leading-normal text-red-800 font-semibold px-3 py-px rounded"
                }, "Failed");
    } else {
      return React.createElement("div", {
                  className: "bg-green-100 border border-green-500 flex-shrink-0 leading-normal text-green-800 font-semibold px-3 py-px rounded"
                }, "Passed");
    }
  } else {
    return React.createElement("div", {
                className: "bg-orange-100 border border-orange-300 flex-shrink-0 leading-normal text-orange-600 font-semibold px-3 py-px rounded"
              }, CoursesStudents__Submission.timeDistance(submission));
  }
}

function submissionCardClasses(submission) {
  var match = CoursesStudents__Submission.evaluatorId(submission);
  return "flex flex-col md:flex-row items-start md:items-center justify-between bg-white border-l-3 p-3 md:py-6 md:px-5 mt-4 cursor-pointer rounded-r-lg shadow hover:border-primary-500 hover:text-primary-500 hover:shadow-md " + (
          match !== undefined ? (
              CoursesStudents__Submission.failed(submission) ? "border-red-500" : "border-green-500"
            ) : "border-orange-400"
        );
}

function showSubmission(submissions, levels) {
  return React.createElement("div", undefined, $$Array.map((function (submission) {
                    return React.createElement("a", {
                                key: CoursesStudents__Submission.id(submission),
                                href: "/submissions/" + (CoursesStudents__Submission.id(submission) + "/review"),
                                target: "_blank"
                              }, React.createElement("div", {
                                    key: CoursesStudents__Submission.id(submission),
                                    "aria-label": "student-submission-card-" + CoursesStudents__Submission.id(submission),
                                    className: submissionCardClasses(submission)
                                  }, React.createElement("div", {
                                        className: "w-full md:w-3/4"
                                      }, React.createElement("div", {
                                            className: "block text-sm md:pr-2"
                                          }, React.createElement("span", {
                                                className: "bg-gray-300 text-xs font-semibold px-2 py-px rounded"
                                              }, CoursesStudents__Level.unsafeLevelNumber(levels, "StudentSubmissionsList", CoursesStudents__Submission.levelId(submission))), React.createElement("span", {
                                                className: "ml-2 font-semibold text-base"
                                              }, CoursesStudents__Submission.title(submission))), React.createElement("div", {
                                            className: "mt-1 ml-px text-xs text-gray-900"
                                          }, React.createElement("span", {
                                                className: "ml-1"
                                              }, "Submitted on " + CoursesStudents__Submission.createdAtPretty(submission)))), React.createElement("div", {
                                        className: "w-auto md:w-1/4 text-xs flex justify-end mt-2 md:mt-0"
                                      }, showSubmissionStatus(submission))));
                  }), CoursesStudents__Submission.sort(submissions)));
}

function showSubmissions(submissions, levels) {
  if (ArrayUtils.isEmpty(submissions)) {
    return React.createElement("div", {
                className: "course-review__reviewed-empty text-lg font-semibold text-center py-4"
              }, React.createElement("h5", {
                    className: "py-4 mt-4 bg-gray-200 text-gray-800 font-semibold"
                  }, "No Reviewed Submission"), React.createElement("img", {
                    className: "w-3/4 md:w-1/2 mx-auto mt-2",
                    src: reviewedEmptyImage
                  }));
  } else {
    return showSubmission(submissions, levels);
  }
}

function CoursesStudents__SubmissionsList(Props) {
  var studentId = Props.studentId;
  var levels = Props.levels;
  var submissions = Props.submissions;
  var updateSubmissionsCB = Props.updateSubmissionsCB;
  var match = React.useState((function () {
          return {
                  loading: false
                };
        }));
  var setState = match[1];
  React.useEffect((function () {
          if (typeof submissions === "number") {
            getStudentSubmissions(studentId, undefined, setState, [], updateSubmissionsCB);
          }
          return ;
        }), [studentId]);
  var tmp;
  if (typeof submissions === "number") {
    tmp = SkeletonLoading.multiple(3, SkeletonLoading.card(undefined, /* () */0));
  } else if (submissions.tag) {
    tmp = showSubmissions(submissions[0], levels);
  } else {
    var cursor = submissions[1];
    var submissions$1 = submissions[0];
    tmp = React.createElement("div", undefined, showSubmissions(submissions$1, levels), match[0].loading ? SkeletonLoading.multiple(3, SkeletonLoading.card(undefined, /* () */0)) : React.createElement("button", {
                className: "btn btn-primary-ghost cursor-pointer w-full mt-4",
                onClick: (function (param) {
                    return getStudentSubmissions(studentId, cursor, setState, submissions$1, updateSubmissionsCB);
                  })
              }, "Load More..."));
  }
  return React.createElement("div", {
              "aria-label": "student-submissions"
            }, tmp);
}

var make$1 = CoursesStudents__SubmissionsList;

exports.reviewedEmptyImage = reviewedEmptyImage;
exports.str = str;
exports.StudentSubmissionsQuery = StudentSubmissionsQuery;
exports.updateStudentSubmissions = updateStudentSubmissions;
exports.getStudentSubmissions = getStudentSubmissions;
exports.showSubmissionStatus = showSubmissionStatus;
exports.submissionCardClasses = submissionCardClasses;
exports.showSubmission = showSubmission;
exports.showSubmissions = showSubmissions;
exports.make = make$1;
/*  Not a pure module */
