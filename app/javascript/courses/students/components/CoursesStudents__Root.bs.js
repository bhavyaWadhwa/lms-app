// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var UserProxy = require("../../../shared/types/UserProxy.bs.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var OptionUtils = require("../../../shared/utils/OptionUtils.bs.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var LoadingSpinner = require("../../../shared/components/LoadingSpinner.bs.js");
var SkeletonLoading = require("../../../shared/components/SkeletonLoading.bs.js");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.js");
var MultiselectDropdown = require("../../../packages/multiselect-dropdown/src/components/MultiselectDropdown.bs.js");
var CoursesStudents__Level = require("../types/CoursesStudents__Level.bs.js");
var CoursesStudents__Teams = require("../types/CoursesStudents__Teams.bs.js");
var CoursesStudents__Course = require("../types/CoursesStudents__Course.bs.js");
var CoursesStudents__TeamInfo = require("../types/CoursesStudents__TeamInfo.bs.js");
var CoursesStudents__TeamsList = require("./CoursesStudents__TeamsList.bs.js");
var CoursesStudents__StudentOverlay = require("./CoursesStudents__StudentOverlay.bs.js");
var CoursesStudents__StudentDistribution = require("./CoursesStudents__StudentDistribution.bs.js");

((require("./CoursesStudents__Root.css")));

function str(prim) {
  return prim;
}

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* DeselectLevel */0 :
          var init = state.filter;
          return {
                  loading: state.loading,
                  teams: state.teams,
                  filterString: state.filterString,
                  filter: {
                    nameOrEmail: init.nameOrEmail,
                    level: undefined,
                    coach: init.coach
                  }
                };
      case /* DeselectCoach */1 :
          var init$1 = state.filter;
          return {
                  loading: state.loading,
                  teams: state.teams,
                  filterString: state.filterString,
                  filter: {
                    nameOrEmail: init$1.nameOrEmail,
                    level: init$1.level,
                    coach: undefined
                  }
                };
      case /* UnsetNameOrEmail */2 :
          var init$2 = state.filter;
          return {
                  loading: state.loading,
                  teams: state.teams,
                  filterString: state.filterString,
                  filter: {
                    nameOrEmail: undefined,
                    level: init$2.level,
                    coach: init$2.coach
                  }
                };
      case /* BeginLoadingMore */3 :
          return {
                  loading: /* LoadingMore */2,
                  teams: state.teams,
                  filterString: state.filterString,
                  filter: state.filter
                };
      case /* BeginReloading */4 :
          return {
                  loading: /* Reloading */1,
                  teams: state.teams,
                  filterString: state.filterString,
                  filter: state.filter
                };
      
    }
  } else {
    switch (action.tag | 0) {
      case /* SelectLevel */0 :
          var init$3 = state.filter;
          return {
                  loading: state.loading,
                  teams: state.teams,
                  filterString: "",
                  filter: {
                    nameOrEmail: init$3.nameOrEmail,
                    level: action[0],
                    coach: init$3.coach
                  }
                };
      case /* SelectCoach */1 :
          var init$4 = state.filter;
          return {
                  loading: state.loading,
                  teams: state.teams,
                  filterString: "",
                  filter: {
                    nameOrEmail: init$4.nameOrEmail,
                    level: init$4.level,
                    coach: action[0]
                  }
                };
      case /* SetNameOrEmail */2 :
          var init$5 = state.filter;
          return {
                  loading: state.loading,
                  teams: state.teams,
                  filterString: "",
                  filter: {
                    nameOrEmail: action[0],
                    level: init$5.level,
                    coach: init$5.coach
                  }
                };
      case /* UpdateFilterString */3 :
          return {
                  loading: state.loading,
                  teams: state.teams,
                  filterString: action[0],
                  filter: state.filter
                };
      case /* LoadTeams */4 :
          var newTeams = action[2];
          var endCursor = action[0];
          var match = state.loading;
          var updatedTeams = match >= 2 ? $$Array.append(CoursesStudents__Teams.toArray(state.teams), newTeams) : newTeams;
          return {
                  loading: /* NotLoading */0,
                  teams: action[1] && endCursor !== undefined ? /* PartiallyLoaded */Block.__(0, [
                        updatedTeams,
                        endCursor
                      ]) : /* FullyLoaded */Block.__(1, [updatedTeams]),
                  filterString: state.filterString,
                  filter: state.filter
                };
      
    }
  }
}

var ppx_printed_query = "query TeamsFromCoursesStudentsRootQuery($courseId: ID!, $levelId: ID, $coachId: ID, $search: String, $after: String)  {\nteams(courseId: $courseId, levelId: $levelId, coachId: $coachId, search: $search, first: 10, after: $after)  {\nnodes  {\nid  \nname  \nlevelId  \nstudents  {\nid  \nname  \ntitle  \navatarUrl  \n}\n\ncoachUserIds  \naccessEndsAt  \ndroppedOutAt  \n}\n\npageInfo  {\nendCursor  \nhasNextPage  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "teams");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "nodes");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      tmp$1 = match$2 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$3)).map((function (value) {
                var match = Js_json.decodeNull(value);
                if (match !== undefined) {
                  return ;
                } else {
                  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                  var match$1 = Js_dict.get(value$1, "id");
                  var tmp;
                  if (match$1 !== undefined) {
                    var value$2 = Caml_option.valFromOption(match$1);
                    var match$2 = Js_json.decodeString(value$2);
                    tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field id on type Team is missing");
                  }
                  var match$3 = Js_dict.get(value$1, "name");
                  var tmp$1;
                  if (match$3 !== undefined) {
                    var value$3 = Caml_option.valFromOption(match$3);
                    var match$4 = Js_json.decodeString(value$3);
                    tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  } else {
                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type Team is missing");
                  }
                  var match$5 = Js_dict.get(value$1, "levelId");
                  var tmp$2;
                  if (match$5 !== undefined) {
                    var value$4 = Caml_option.valFromOption(match$5);
                    var match$6 = Js_json.decodeString(value$4);
                    tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                  } else {
                    tmp$2 = Js_exn.raiseError("graphql_ppx: Field levelId on type Team is missing");
                  }
                  var match$7 = Js_dict.get(value$1, "students");
                  var match$8 = Js_dict.get(value$1, "coachUserIds");
                  var match$9 = Js_dict.get(value$1, "accessEndsAt");
                  var tmp$3;
                  if (match$9 !== undefined) {
                    var value$5 = Caml_option.valFromOption(match$9);
                    var match$10 = Js_json.decodeNull(value$5);
                    tmp$3 = match$10 !== undefined ? undefined : Caml_option.some(value$5);
                  } else {
                    tmp$3 = undefined;
                  }
                  var match$11 = Js_dict.get(value$1, "droppedOutAt");
                  var tmp$4;
                  if (match$11 !== undefined) {
                    var value$6 = Caml_option.valFromOption(match$11);
                    var match$12 = Js_json.decodeNull(value$6);
                    tmp$4 = match$12 !== undefined ? undefined : Caml_option.some(value$6);
                  } else {
                    tmp$4 = undefined;
                  }
                  return {
                          id: tmp,
                          name: tmp$1,
                          levelId: tmp$2,
                          students: match$7 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$7))).map((function (value) {
                                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                                    var match = Js_dict.get(value$1, "id");
                                    var tmp;
                                    if (match !== undefined) {
                                      var value$2 = Caml_option.valFromOption(match);
                                      var match$1 = Js_json.decodeString(value$2);
                                      tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                                    } else {
                                      tmp = Js_exn.raiseError("graphql_ppx: Field id on type Student is missing");
                                    }
                                    var match$2 = Js_dict.get(value$1, "name");
                                    var tmp$1;
                                    if (match$2 !== undefined) {
                                      var value$3 = Caml_option.valFromOption(match$2);
                                      var match$3 = Js_json.decodeString(value$3);
                                      tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                                    } else {
                                      tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type Student is missing");
                                    }
                                    var match$4 = Js_dict.get(value$1, "title");
                                    var tmp$2;
                                    if (match$4 !== undefined) {
                                      var value$4 = Caml_option.valFromOption(match$4);
                                      var match$5 = Js_json.decodeString(value$4);
                                      tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                                    } else {
                                      tmp$2 = Js_exn.raiseError("graphql_ppx: Field title on type Student is missing");
                                    }
                                    var match$6 = Js_dict.get(value$1, "avatarUrl");
                                    var tmp$3;
                                    if (match$6 !== undefined) {
                                      var value$5 = Caml_option.valFromOption(match$6);
                                      var match$7 = Js_json.decodeNull(value$5);
                                      if (match$7 !== undefined) {
                                        tmp$3 = undefined;
                                      } else {
                                        var match$8 = Js_json.decodeString(value$5);
                                        tmp$3 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                                      }
                                    } else {
                                      tmp$3 = undefined;
                                    }
                                    return {
                                            id: tmp,
                                            name: tmp$1,
                                            title: tmp$2,
                                            avatarUrl: tmp$3
                                          };
                                  })) : Js_exn.raiseError("graphql_ppx: Field students on type Team is missing"),
                          coachUserIds: match$8 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$8))).map((function (value) {
                                    var match = Js_json.decodeString(value);
                                    if (match !== undefined) {
                                      return match;
                                    } else {
                                      return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                                    }
                                  })) : Js_exn.raiseError("graphql_ppx: Field coachUserIds on type Team is missing"),
                          accessEndsAt: tmp$3,
                          droppedOutAt: tmp$4
                        };
                }
              }));
    } else {
      tmp$1 = undefined;
    }
    var match$3 = Js_dict.get(value$2, "pageInfo");
    var tmp$2;
    if (match$3 !== undefined) {
      var value$4 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$3)));
      var match$4 = Js_dict.get(value$4, "endCursor");
      var tmp$3;
      if (match$4 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$4);
        var match$5 = Js_json.decodeNull(value$5);
        if (match$5 !== undefined) {
          tmp$3 = undefined;
        } else {
          var match$6 = Js_json.decodeString(value$5);
          tmp$3 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$3 = undefined;
      }
      var match$7 = Js_dict.get(value$4, "hasNextPage");
      var tmp$4;
      if (match$7 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$7);
        var match$8 = Js_json.decodeBoolean(value$6);
        tmp$4 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$6));
      } else {
        tmp$4 = Js_exn.raiseError("graphql_ppx: Field hasNextPage on type PageInfo is missing");
      }
      tmp$2 = {
        endCursor: tmp$3,
        hasNextPage: tmp$4
      };
    } else {
      tmp$2 = Js_exn.raiseError("graphql_ppx: Field pageInfo on type TeamConnection is missing");
    }
    tmp = {
      nodes: tmp$1,
      pageInfo: tmp$2
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field teams on type Query is missing");
  }
  return {
          teams: tmp
        };
}

function make(courseId, levelId, coachId, search, after, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "courseId",
                    courseId
                  ],
                  /* tuple */[
                    "levelId",
                    levelId !== undefined ? levelId : null
                  ],
                  /* tuple */[
                    "coachId",
                    coachId !== undefined ? coachId : null
                  ],
                  /* tuple */[
                    "search",
                    search !== undefined ? search : null
                  ],
                  /* tuple */[
                    "after",
                    after !== undefined ? after : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var courseId = variables.courseId;
  var levelId = variables.levelId;
  var coachId = variables.coachId;
  var search = variables.search;
  var after = variables.after;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "courseId",
                    courseId
                  ],
                  /* tuple */[
                    "levelId",
                    levelId !== undefined ? levelId : null
                  ],
                  /* tuple */[
                    "coachId",
                    coachId !== undefined ? coachId : null
                  ],
                  /* tuple */[
                    "search",
                    search !== undefined ? search : null
                  ],
                  /* tuple */[
                    "after",
                    after !== undefined ? after : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(courseId, levelId, coachId, search, after, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "courseId",
                  courseId
                ],
                /* tuple */[
                  "levelId",
                  levelId !== undefined ? levelId : null
                ],
                /* tuple */[
                  "coachId",
                  coachId !== undefined ? coachId : null
                ],
                /* tuple */[
                  "search",
                  search !== undefined ? search : null
                ],
                /* tuple */[
                  "after",
                  after !== undefined ? after : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, courseId, levelId, coachId, search, after, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "courseId",
                      courseId
                    ],
                    /* tuple */[
                      "levelId",
                      levelId !== undefined ? levelId : null
                    ],
                    /* tuple */[
                      "coachId",
                      coachId !== undefined ? coachId : null
                    ],
                    /* tuple */[
                      "search",
                      search !== undefined ? search : null
                    ],
                    /* tuple */[
                      "after",
                      after !== undefined ? after : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var TeamsQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function getTeams(send, courseId, cursor, filter) {
  var levelId = OptionUtils.map(CoursesStudents__Level.id, filter.level);
  var coachId = OptionUtils.map(UserProxy.id, filter.coach);
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make(courseId, levelId, coachId, filter.nameOrEmail, cursor, /* () */0)).then((function (response) {
          var match = response.teams.nodes;
          var newTeams = match !== undefined ? CoursesStudents__TeamInfo.makeArrayFromJs(match) : [];
          Curry._1(send, /* LoadTeams */Block.__(4, [
                  response.teams.pageInfo.endCursor,
                  response.teams.pageInfo.hasNextPage,
                  newTeams
                ]));
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function applicableLevels(levels) {
  return levels.filter((function (level) {
                return CoursesStudents__Level.number(level) !== 0;
              }));
}

function label(t) {
  switch (t.tag | 0) {
    case /* Level */0 :
        return "Level " + String(CoursesStudents__Level.number(t[0]));
    case /* AssignedToCoach */1 :
        return "Assigned to";
    case /* NameOrEmail */2 :
        return "Name or Email";
    
  }
}

function value(t) {
  switch (t.tag | 0) {
    case /* Level */0 :
        return CoursesStudents__Level.name(t[0]);
    case /* AssignedToCoach */1 :
        var coach = t[0];
        if (UserProxy.id(coach) === t[1]) {
          return "Me";
        } else {
          return UserProxy.name(coach);
        }
    case /* NameOrEmail */2 :
        return t[0];
    
  }
}

function searchString(t) {
  switch (t.tag | 0) {
    case /* Level */0 :
        var level = t[0];
        return "level " + (String(CoursesStudents__Level.number(level)) + (" " + CoursesStudents__Level.name(level)));
    case /* AssignedToCoach */1 :
        var coach = t[0];
        if (UserProxy.id(coach) === t[1]) {
          return UserProxy.name(coach) + " assigned to me";
        } else {
          return "assigned to " + UserProxy.name(coach);
        }
    case /* NameOrEmail */2 :
        return t[0];
    
  }
}

function color(_t) {
  return "gray";
}

function level(level$1) {
  return /* Level */Block.__(0, [level$1]);
}

function assignedToCoach(coach, currentCoachId) {
  return /* AssignedToCoach */Block.__(1, [
            coach,
            currentCoachId
          ]);
}

function nameOrEmail(search) {
  return /* NameOrEmail */Block.__(2, [search]);
}

var Selectable = {
  label: label,
  value: value,
  searchString: searchString,
  color: color,
  level: level,
  assignedToCoach: assignedToCoach,
  nameOrEmail: nameOrEmail
};

var Multiselect = MultiselectDropdown.Make(Selectable);

function unselected(levels, coaches, currentCoachId, state) {
  var unselectedLevels = $$Array.map(level, levels.filter((function (level) {
              return OptionUtils.mapWithDefault((function (selectedLevel) {
                            return CoursesStudents__Level.id(level) !== CoursesStudents__Level.id(selectedLevel);
                          }), true, state.filter.level);
            })));
  var unselectedCoaches = $$Array.map((function (coach) {
          return /* AssignedToCoach */Block.__(1, [
                    coach,
                    currentCoachId
                  ]);
        }), coaches.filter((function (coach) {
              return OptionUtils.mapWithDefault((function (selectedCoach) {
                            return UserProxy.id(coach) !== UserProxy.id(selectedCoach);
                          }), true, state.filter.coach);
            })));
  var trimmedFilterString = $$String.trim(state.filterString);
  var nameOrEmail = trimmedFilterString === "" ? [] : [/* NameOrEmail */Block.__(2, [trimmedFilterString])];
  return $$Array.append(nameOrEmail, $$Array.append(unselectedCoaches, unselectedLevels));
}

function selected(state, currentCoachId) {
  var selectedLevel = OptionUtils.mapWithDefault((function (selectedLevel) {
          return [/* Level */Block.__(0, [selectedLevel])];
        }), [], state.filter.level);
  var selectedCoach = OptionUtils.mapWithDefault((function (selectedCoach) {
          return [/* AssignedToCoach */Block.__(1, [
                      selectedCoach,
                      currentCoachId
                    ])];
        }), [], state.filter.coach);
  var selectedSearchString = OptionUtils.mapWithDefault((function (nameOrEmail) {
          return [/* NameOrEmail */Block.__(2, [nameOrEmail])];
        }), [], state.filter.nameOrEmail);
  return $$Array.append(selectedSearchString, $$Array.append(selectedCoach, selectedLevel));
}

function onSelectFilter(send, selectable) {
  switch (selectable.tag | 0) {
    case /* Level */0 :
        return Curry._1(send, /* SelectLevel */Block.__(0, [selectable[0]]));
    case /* AssignedToCoach */1 :
        return Curry._1(send, /* SelectCoach */Block.__(1, [selectable[0]]));
    case /* NameOrEmail */2 :
        return Curry._1(send, /* SetNameOrEmail */Block.__(2, [selectable[0]]));
    
  }
}

function onDeselectFilter(send, selectable) {
  switch (selectable.tag | 0) {
    case /* Level */0 :
        return Curry._1(send, /* DeselectLevel */0);
    case /* AssignedToCoach */1 :
        return Curry._1(send, /* DeselectCoach */1);
    case /* NameOrEmail */2 :
        return Curry._1(send, /* UnsetNameOrEmail */2);
    
  }
}

function filterPlaceholder(state) {
  var match = state.filter.level;
  var match$1 = state.filter.coach;
  var match$2 = state.filter.nameOrEmail;
  if (match !== undefined || match$1 !== undefined || match$2 !== undefined) {
    return "";
  } else {
    return "Filter by level, assigned coach, or search by name or email address";
  }
}

function restoreFilterNotice(send, currentCoach, message) {
  return React.createElement("div", {
              className: "mt-2 text-sm italic flex flex-col md:flex-row items-center justify-between p-3 border border-gray-300 bg-white rounded-lg"
            }, React.createElement("span", undefined, message), React.createElement("button", {
                  className: "px-2 py-1 rounded text-xs overflow-hidden border border-gray-300 bg-gray-200 text-gray-800 border-gray-300 bg-gray-200 hover:bg-gray-300 mt-1 md:mt-0",
                  onClick: (function (param) {
                      return Curry._1(send, /* SelectCoach */Block.__(1, [currentCoach]));
                    })
                }, "Assigned to: Me", React.createElement("i", {
                      className: "fas fa-level-up-alt ml-2"
                    })));
}

function restoreAssignedToMeFilter(state, send, currentTeamCoach) {
  return OptionUtils.mapWithDefault((function (currentCoach) {
                var match = state.filter.coach;
                if (match !== undefined) {
                  var selectedCoach = match;
                  if (UserProxy.id(selectedCoach) === UserProxy.id(currentCoach)) {
                    return null;
                  } else {
                    return restoreFilterNotice(send, currentCoach, "Now showing students assigned to " + (UserProxy.name(selectedCoach) + "."));
                  }
                } else {
                  return restoreFilterNotice(send, currentCoach, "Now showing all students in this course.");
                }
              }), null, currentTeamCoach);
}

function computeInitialState(currentTeamCoach) {
  return {
          loading: /* NotLoading */0,
          teams: /* Unloaded */0,
          filterString: "",
          filter: {
            nameOrEmail: undefined,
            level: undefined,
            coach: currentTeamCoach
          }
        };
}

function selectLevel(levels, send, levelId) {
  var level = ArrayUtils.unsafeFind((function (level) {
          return CoursesStudents__Level.id(level) === levelId;
        }), "Could not find level selected from distribution bar, with ID " + levelId, levels);
  return Curry._1(send, /* SelectLevel */Block.__(0, [level]));
}

function CoursesStudents__Root(Props) {
  var levels = Props.levels;
  var course = Props.course;
  var userId = Props.userId;
  var teamCoaches = Props.teamCoaches;
  var currentCoach = Props.currentCoach;
  var match = React.useState((function () {
          if (Belt_Array.some(teamCoaches, (function (coach) {
                    return UserProxy.id(coach) === UserProxy.id(currentCoach);
                  }))) {
            return currentCoach;
          }
          
        }));
  var currentTeamCoach = match[0];
  var match$1 = React.useReducer(reducer, currentTeamCoach, computeInitialState);
  var send = match$1[1];
  var state = match$1[0];
  var courseId = CoursesStudents__Course.id(course);
  var url = ReasonReactRouter.useUrl(undefined, /* () */0);
  React.useEffect((function () {
          Curry._1(send, /* BeginReloading */4);
          getTeams(send, courseId, undefined, state.filter);
          return ;
        }), [state.filter]);
  var match$2 = url.path;
  var tmp;
  if (match$2 && match$2[0] === "students") {
    var match$3 = match$2[1];
    if (match$3) {
      var match$4 = match$3[1];
      tmp = match$4 && match$4[0] === "report" && !match$4[1] ? React.createElement(CoursesStudents__StudentOverlay.make, {
              courseId: courseId,
              studentId: match$3[0],
              levels: levels,
              userId: userId,
              teamCoaches: teamCoaches
            }) : null;
    } else {
      tmp = null;
    }
  } else {
    tmp = null;
  }
  var match$5 = state.teams;
  var tmp$1;
  if (typeof match$5 === "number") {
    tmp$1 = SkeletonLoading.multiple(10, SkeletonLoading.userCard(/* () */0));
  } else if (match$5.tag) {
    tmp$1 = React.createElement(CoursesStudents__TeamsList.make, {
          levels: levels,
          teams: match$5[0],
          teamCoaches: teamCoaches
        });
  } else {
    var cursor = match$5[1];
    var match$6 = state.loading;
    var tmp$2;
    switch (match$6) {
      case /* NotLoading */0 :
          tmp$2 = React.createElement("button", {
                className: "btn btn-primary-ghost cursor-pointer w-full mt-4",
                onClick: (function (param) {
                    Curry._1(send, /* BeginLoadingMore */3);
                    return getTeams(send, courseId, cursor, state.filter);
                  })
              }, "Load More...");
          break;
      case /* Reloading */1 :
          tmp$2 = null;
          break;
      case /* LoadingMore */2 :
          tmp$2 = SkeletonLoading.multiple(3, SkeletonLoading.card(undefined, /* () */0));
          break;
      
    }
    tmp$1 = React.createElement("div", undefined, React.createElement(CoursesStudents__TeamsList.make, {
              levels: levels,
              teams: match$5[0],
              teamCoaches: teamCoaches
            }), tmp$2);
  }
  var match$7 = state.teams;
  var tmp$3;
  if (typeof match$7 === "number") {
    tmp$3 = null;
  } else {
    var match$8 = state.loading;
    var loading = match$8 === 1;
    tmp$3 = React.createElement(LoadingSpinner.make, {
          loading: loading
        });
  }
  return React.createElement("div", undefined, tmp, React.createElement("div", {
                  className: "bg-gray-100 pt-8 pb-8 px-3 -mt-7"
                }, React.createElement(CoursesStudents__StudentDistribution.make, {
                      selectLevelCB: (function (param) {
                          return selectLevel(levels, send, param);
                        }),
                      courseId: courseId,
                      filterCoach: state.filter.coach
                    }), React.createElement("div", {
                      className: "w-full py-4 bg-gray-100 relative md:sticky md:top-0 z-10"
                    }, React.createElement("div", {
                          className: "max-w-3xl mx-auto bg-gray-100 sticky md:static md:top-0"
                        }, React.createElement(Multiselect.make, {
                              id: "filter",
                              placeholder: filterPlaceholder(state),
                              onChange: (function (filterString) {
                                  return Curry._1(send, /* UpdateFilterString */Block.__(3, [filterString]));
                                }),
                              value: state.filterString,
                              unselected: unselected(levels, teamCoaches, UserProxy.id(currentCoach), state),
                              selected: selected(state, UserProxy.id(currentCoach)),
                              onSelect: (function (param) {
                                  return onSelectFilter(send, param);
                                }),
                              onDeselect: (function (param) {
                                  return onDeselectFilter(send, param);
                                })
                            }), restoreAssignedToMeFilter(state, send, currentTeamCoach))), React.createElement("div", {
                      className: " max-w-3xl mx-auto"
                    }, tmp$1)), tmp$3);
}

var make$1 = CoursesStudents__Root;

exports.str = str;
exports.reducer = reducer;
exports.TeamsQuery = TeamsQuery;
exports.getTeams = getTeams;
exports.applicableLevels = applicableLevels;
exports.Selectable = Selectable;
exports.Multiselect = Multiselect;
exports.unselected = unselected;
exports.selected = selected;
exports.onSelectFilter = onSelectFilter;
exports.onDeselectFilter = onDeselectFilter;
exports.filterPlaceholder = filterPlaceholder;
exports.restoreFilterNotice = restoreFilterNotice;
exports.restoreAssignedToMeFilter = restoreAssignedToMeFilter;
exports.computeInitialState = computeInitialState;
exports.selectLevel = selectLevel;
exports.make = make$1;
/*  Not a pure module */
