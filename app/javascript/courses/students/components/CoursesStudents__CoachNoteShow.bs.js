// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var User = require("../../../shared/types/User.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Avatar = require("../../../shared/Avatar.bs.js");
var FaIcon = require("../../../shared/components/FaIcon.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var MarkdownBlock = require("../../../shared/components/MarkdownBlock.bs.js");
var CoursesStudents__CoachNote = require("../types/CoursesStudents__CoachNote.bs.js");

function str(prim) {
  return prim;
}

var ppx_printed_query = "mutation ArchiveCoachNoteMutation($id: ID!)  {\narchiveCoachNote(id: $id)  {\nsuccess  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "archiveCoachNote");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type ArchiveCoachNotePayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field archiveCoachNote on type Mutation is missing");
  }
  return {
          archiveCoachNote: tmp
        };
}

function make(id, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(id, param) {
  return Js_dict.fromArray([/* tuple */[
                  "id",
                  id
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, id, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "id",
                      id
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var ArchiveCoachNoteMutation = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function removeCoachNote(id, removeNoteCB, setArchiving, $$event) {
  $$event.preventDefault();
  Curry._1(setArchiving, (function (param) {
          return true;
        }));
  if (window.confirm("Are you sure you want to delete this note?")) {
    (function (eta) {
            return GraphqlQuery.sendQuery(undefined, eta);
          })(make(id, /* () */0)).then((function (response) {
            if (response.archiveCoachNote.success) {
              Curry._1(removeNoteCB, id);
            } else {
              Curry._1(setArchiving, (function (param) {
                      return false;
                    }));
            }
            return Promise.resolve(/* () */0);
          }));
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function deleteIcon(note, removeCoachNote, removeNoteCB, setArchiving, archiving) {
  return React.createElement("button", {
              className: "w-10 text-sm text-gray-700 hover:text-gray-900 cursor-pointer flex items-center justify-center rounded hover:bg-gray-200 focus:outline-none ",
              title: "Delete " + CoursesStudents__CoachNote.id(note),
              disabled: archiving,
              onClick: Curry._3(removeCoachNote, CoursesStudents__CoachNote.id(note), removeNoteCB, setArchiving)
            }, React.createElement(FaIcon.make, {
                  classes: archiving ? "fas fa-spinner fa-spin" : "fas fa-trash-alt"
                }));
}

function CoursesStudents__CoachNoteShow(Props) {
  var note = Props.note;
  var userId = Props.userId;
  var removeNoteCB = Props.removeNoteCB;
  var match = React.useState((function () {
          return false;
        }));
  var match$1 = CoursesStudents__CoachNote.author(note);
  var tmp;
  if (match$1 !== undefined) {
    var user = match$1;
    var match$2 = User.avatarUrl(user);
    tmp = match$2 !== undefined ? React.createElement("img", {
            className: "w-8 h-8 md:w-10 md:h-10 text-xs border border-gray-400 rounded-full overflow-hidden flex-shrink-0 mt-1 md:mt-0 mr-2 md:mr-3 object-cover",
            src: match$2
          }) : React.createElement(Avatar.make, {
            name: User.name(user),
            className: "w-8 h-8 md:w-10 md:h-10 text-xs border border-gray-400 rounded-full overflow-hidden flex-shrink-0 mt-1 md:mt-0 mr-2 md:mr-3 object-cover"
          });
  } else {
    tmp = React.createElement(Avatar.make, {
          name: "?",
          className: "w-8 h-8 md:w-10 md:h-10 text-xs border rounded-full overflow-hidden flex-shrink-0 mt-1 md:mt-0 mr-2 md:mr-3 object-cover"
        });
  }
  var match$3 = CoursesStudents__CoachNote.author(note);
  var match$4 = CoursesStudents__CoachNote.author(note);
  var match$5 = CoursesStudents__CoachNote.author(note);
  var showDeleteIcon = match$5 !== undefined ? User.id(match$5) === userId : false;
  return React.createElement("div", {
              key: CoursesStudents__CoachNote.id(note),
              "aria-label": "Note " + CoursesStudents__CoachNote.id(note),
              className: "mt-4"
            }, React.createElement("div", {
                  className: "flex justify-between"
                }, React.createElement("div", {
                      className: "flex"
                    }, tmp, React.createElement("div", undefined, React.createElement("p", {
                              className: "text-sm font-semibold inline-block leading-snug"
                            }, match$3 !== undefined ? User.name(match$3) : "Deleted Coach"), React.createElement("p", {
                              className: "text-gray-600 font-semibold text-xs mt-px leading-snug"
                            }, match$4 !== undefined ? User.title(match$4) : "Unknown"))), showDeleteIcon ? deleteIcon(note, removeCoachNote, removeNoteCB, match[1], match[0]) : null), React.createElement("div", {
                  className: "ml-10 md:ml-13 mt-2"
                }, React.createElement("p", {
                      className: "inline-block text-xs font-semibold leading-tight bg-gray-300 text-gray-800 mt-px px-1 py-px rounded"
                    }, "on " + CoursesStudents__CoachNote.noteOn(note)), React.createElement(MarkdownBlock.make, {
                      markdown: CoursesStudents__CoachNote.note(note),
                      className: "pt-1 text-sm",
                      profile: /* Permissive */2
                    })));
}

var make$1 = CoursesStudents__CoachNoteShow;

exports.str = str;
exports.ArchiveCoachNoteMutation = ArchiveCoachNoteMutation;
exports.removeCoachNote = removeCoachNote;
exports.deleteIcon = deleteIcon;
exports.make = make$1;
/* react Not a pure module */
