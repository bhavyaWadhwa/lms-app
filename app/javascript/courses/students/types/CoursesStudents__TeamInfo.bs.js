// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var DateFns = require("../../../shared/utils/DateFns.bs.js");
var UserProxy = require("../../../shared/types/UserProxy.bs.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var OptionUtils = require("../../../shared/utils/OptionUtils.bs.js");

function id(t) {
  return t.id;
}

function levelId(t) {
  return t.levelId;
}

function name(t) {
  return t.name;
}

function title(t) {
  return t.title;
}

function students(t) {
  return t.students;
}

function coachUserIds(t) {
  return t.coachUserIds;
}

function studentId(student) {
  return student.id;
}

function studentName(student) {
  return student.name;
}

function studentTitle(student) {
  return student.title;
}

function studentAvatarUrl(student) {
  return student.avatarUrl;
}

function droppedOutAt(t) {
  return t.droppedOutAt;
}

function accessEndsAt(t) {
  return t.accessEndsAt;
}

function studentWithId(studentId, t) {
  return ArrayUtils.unsafeFind((function (student) {
                return student.id === studentId;
              }), "Could not find student with ID " + (studentId + (" in team with ID " + t.id)), t.students);
}

function makeStudent(id, name, title, avatarUrl) {
  return {
          id: id,
          name: name,
          title: title,
          avatarUrl: avatarUrl
        };
}

function make(id, name, levelId, students, coachUserIds, droppedOutAt, accessEndsAt) {
  return {
          id: id,
          name: name,
          levelId: levelId,
          students: students,
          coachUserIds: coachUserIds,
          droppedOutAt: droppedOutAt,
          accessEndsAt: accessEndsAt
        };
}

function makeFromJS(teamDetails) {
  var students = $$Array.map((function (student) {
          return makeStudent(student.id, student.name, student.title, student.avatarUrl);
        }), teamDetails.students);
  return make(teamDetails.id, teamDetails.name, teamDetails.levelId, students, teamDetails.coachUserIds, Belt_Option.map(teamDetails.droppedOutAt, DateFns.decodeISO), Belt_Option.map(teamDetails.accessEndsAt, DateFns.decodeISO));
}

function makeArrayFromJs(detailsOfTeams) {
  return Belt_Array.keepMap(detailsOfTeams, (function (param) {
                return OptionUtils.map(makeFromJS, param);
              }));
}

function otherStudents(studentId, t) {
  return t.students.filter((function (student) {
                return student.id !== studentId;
              }));
}

function coaches(allTeamCoaches, t) {
  return allTeamCoaches.filter((function (teamCoach) {
                return $$Array.mem(UserProxy.userId(teamCoach), t.coachUserIds);
              }));
}

exports.id = id;
exports.levelId = levelId;
exports.name = name;
exports.title = title;
exports.students = students;
exports.coachUserIds = coachUserIds;
exports.studentId = studentId;
exports.studentName = studentName;
exports.studentTitle = studentTitle;
exports.studentAvatarUrl = studentAvatarUrl;
exports.droppedOutAt = droppedOutAt;
exports.accessEndsAt = accessEndsAt;
exports.studentWithId = studentWithId;
exports.makeStudent = makeStudent;
exports.make = make;
exports.makeFromJS = makeFromJS;
exports.makeArrayFromJs = makeArrayFromJs;
exports.otherStudents = otherStudents;
exports.coaches = coaches;
/* DateFns Not a pure module */
