// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var CoursesStudents__TeamInfo = require("./CoursesStudents__TeamInfo.bs.js");
var CoursesStudents__CoachNote = require("./CoursesStudents__CoachNote.bs.js");
var CoursesStudents__EvaluationCriterion = require("./CoursesStudents__EvaluationCriterion.bs.js");

function team(t) {
  return t.team;
}

function student(t) {
  return CoursesStudents__TeamInfo.studentWithId(t.id, t.team);
}

function name(t) {
  return CoursesStudents__TeamInfo.studentName(student(t));
}

function title(t) {
  return CoursesStudents__TeamInfo.studentTitle(student(t));
}

function email(t) {
  return t.email;
}

function levelId(t) {
  return CoursesStudents__TeamInfo.levelId(t.team);
}

function phone(t) {
  return t.phone;
}

function socialLinks(t) {
  return t.socialLinks;
}

function avatarUrl(t) {
  return CoursesStudents__TeamInfo.studentAvatarUrl(student(t));
}

function coachNotes(t) {
  return t.coachNotes;
}

function teamCoachUserIds(t) {
  return CoursesStudents__TeamInfo.coachUserIds(t.team);
}

function makeAverageGrade(gradesData) {
  return gradesData.map((function (gradeData) {
                return {
                        evaluationCriterionId: gradeData.evaluationCriterionId,
                        grade: gradeData.averageGrade
                      };
              }));
}

function totalTargets(t) {
  return t.totalTargets;
}

function gradeAsPercentage(averageGrade, evaluationCriterion) {
  var maxGrade = evaluationCriterion.maxGrade;
  return String(averageGrade.grade / maxGrade * 100.0 | 0);
}

function targetsCompleted(t) {
  return t.targetsCompleted;
}

function quizzesAttempted(t) {
  return String(t.quizScores.length);
}

function evaluationCriteria(t) {
  return t.evaluationCriteria;
}

function averageGrades(t) {
  return t.averageGrades;
}

function completedLevelIds(t) {
  return t.completedLevelIds;
}

function gradeValue(averageGrade) {
  return averageGrade.grade;
}

function evaluationCriterionForGrade(grade, evaluationCriteria, componentName) {
  return ArrayUtils.unsafeFind((function (ec) {
                return CoursesStudents__EvaluationCriterion.id(ec) === grade.evaluationCriterionId;
              }), "Unable to find evaluation criterion with id: " + (grade.evaluationCriterionId + (" in component: " + componentName)), evaluationCriteria);
}

function addNewNote(note, t) {
  var notes = $$Array.append(t.coachNotes, [note]);
  return {
          id: t.id,
          email: t.email,
          phone: t.phone,
          coachNotes: notes,
          evaluationCriteria: t.evaluationCriteria,
          socialLinks: t.socialLinks,
          totalTargets: t.totalTargets,
          targetsCompleted: t.targetsCompleted,
          quizScores: t.quizScores,
          averageGrades: t.averageGrades,
          completedLevelIds: t.completedLevelIds,
          team: t.team
        };
}

function removeNote(noteId, t) {
  var notes = t.coachNotes.filter((function (note) {
          return CoursesStudents__CoachNote.id(note) !== noteId;
        }));
  return {
          id: t.id,
          email: t.email,
          phone: t.phone,
          coachNotes: notes,
          evaluationCriteria: t.evaluationCriteria,
          socialLinks: t.socialLinks,
          totalTargets: t.totalTargets,
          targetsCompleted: t.targetsCompleted,
          quizScores: t.quizScores,
          averageGrades: t.averageGrades,
          completedLevelIds: t.completedLevelIds,
          team: t.team
        };
}

function computeAverageQuizScore(quizScores) {
  var sumOfPercentageScores = $$Array.map((function (quizScore) {
            var fractionArray = $$Array.of_list($$String.split_on_char(/* "/" */47, quizScore));
            var numerator = Caml_format.caml_float_of_string(Caml_array.caml_array_get(fractionArray, 0));
            var denominator = Caml_format.caml_float_of_string(Caml_array.caml_array_get(fractionArray, 1));
            return numerator / denominator * 100.0;
          }), quizScores).reduce((function (a, b) {
          return a + b;
        }), 0.0);
  return sumOfPercentageScores / quizScores.length;
}

function averageQuizScore(t) {
  if (ArrayUtils.isEmpty(t.quizScores)) {
    return ;
  } else {
    return computeAverageQuizScore(t.quizScores);
  }
}

function makeFromJs(id, studentDetails, coachNotes) {
  return {
          id: id,
          email: studentDetails.email,
          phone: studentDetails.phone,
          coachNotes: coachNotes.map(CoursesStudents__CoachNote.makeFromJs),
          evaluationCriteria: CoursesStudents__EvaluationCriterion.makeFromJs(studentDetails.evaluationCriteria),
          socialLinks: studentDetails.socialLinks,
          totalTargets: studentDetails.totalTargets,
          targetsCompleted: studentDetails.targetsCompleted,
          quizScores: studentDetails.quizScores,
          averageGrades: makeAverageGrade(studentDetails.averageGrades),
          completedLevelIds: studentDetails.completedLevelIds,
          team: CoursesStudents__TeamInfo.makeFromJS(studentDetails.team)
        };
}

function teamHasManyStudents(t) {
  return CoursesStudents__TeamInfo.students(t.team).length > 1;
}

exports.team = team;
exports.student = student;
exports.name = name;
exports.title = title;
exports.email = email;
exports.levelId = levelId;
exports.phone = phone;
exports.socialLinks = socialLinks;
exports.avatarUrl = avatarUrl;
exports.coachNotes = coachNotes;
exports.teamCoachUserIds = teamCoachUserIds;
exports.makeAverageGrade = makeAverageGrade;
exports.totalTargets = totalTargets;
exports.gradeAsPercentage = gradeAsPercentage;
exports.targetsCompleted = targetsCompleted;
exports.quizzesAttempted = quizzesAttempted;
exports.evaluationCriteria = evaluationCriteria;
exports.averageGrades = averageGrades;
exports.completedLevelIds = completedLevelIds;
exports.gradeValue = gradeValue;
exports.evaluationCriterionForGrade = evaluationCriterionForGrade;
exports.addNewNote = addNewNote;
exports.removeNote = removeNote;
exports.computeAverageQuizScore = computeAverageQuizScore;
exports.averageQuizScore = averageQuizScore;
exports.makeFromJs = makeFromJs;
exports.teamHasManyStudents = teamHasManyStudents;
/* ArrayUtils Not a pure module */
