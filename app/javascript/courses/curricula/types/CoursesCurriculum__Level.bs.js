// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var DateFns = require("../../../shared/utils/DateFns.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function decode(json) {
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          name: Json_decode.field("name", Json_decode.string, json),
          number: Json_decode.field("number", Json_decode.$$int, json),
          unlockOn: Caml_option.null_to_opt(Json_decode.field("unlockOn", (function (param) {
                      return Json_decode.nullable(Json_decode.string, param);
                    }), json))
        };
}

function id(t) {
  return t.id;
}

function name(t) {
  return t.name;
}

function number(t) {
  return t.number;
}

function unlockOn(t) {
  return t.unlockOn;
}

function isUnlocked(t) {
  var match = t.unlockOn;
  if (match !== undefined) {
    return DateFns.isPast(DateFns.parseISO(match));
  } else {
    return true;
  }
}

function isLocked(t) {
  return !isUnlocked(t);
}

function sort(levels) {
  return List.sort((function (x, y) {
                return x.number - y.number | 0;
              }), levels);
}

function first(levels) {
  var match = sort(levels);
  if (match) {
    return match[0];
  } else {
    Rollbar.error("Failed to find the first level from a course's levels.");
    throw Caml_builtin_exceptions.not_found;
  }
}

function unlockDateString(t) {
  var match = t.unlockOn;
  if (match !== undefined) {
    return DateFns.format(DateFns.parseISO(match), "MMM d");
  } else {
    Rollbar.error("unlockDateString was called for a CoursesCurriculum__Level without unlockOn");
    return "";
  }
}

function findByLevelNumber(levels, levelNumber) {
  return List.find_opt((function (l) {
                return l.number === levelNumber;
              }), levels);
}

function next(levels, t) {
  return findByLevelNumber(levels, t.number + 1 | 0);
}

function previous(levels, t) {
  var previousLevelNumber = t.number - 1 | 0;
  if (previousLevelNumber === 0) {
    return ;
  } else {
    return findByLevelNumber(levels, previousLevelNumber);
  }
}

exports.decode = decode;
exports.id = id;
exports.name = name;
exports.number = number;
exports.unlockOn = unlockOn;
exports.isUnlocked = isUnlocked;
exports.isLocked = isLocked;
exports.sort = sort;
exports.first = first;
exports.unlockDateString = unlockDateString;
exports.findByLevelNumber = findByLevelNumber;
exports.next = next;
exports.previous = previous;
/* DateFns Not a pure module */
