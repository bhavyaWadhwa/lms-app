// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var UrlUtils = require("../../../shared/utils/UrlUtils.bs.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var OptionUtils = require("../../../shared/utils/OptionUtils.bs.js");
var TargetChecklistItem = require("../../../schools/courses/types/curriculum_editor/TargetChecklistItem.bs.js");
var SubmissionChecklistItem = require("../../review/types/SubmissionChecklistItem.bs.js");

function title(t) {
  return t.title;
}

function result(t) {
  return t.result;
}

function optional(t) {
  return t.optional;
}

function make(result, title, optional) {
  return {
          title: title,
          optional: optional,
          result: result
        };
}

function fromTargetChecklistItem(targetChecklist) {
  return $$Array.map((function (tc) {
                var title = TargetChecklistItem.title(tc);
                var optional = TargetChecklistItem.optional(tc);
                var match = TargetChecklistItem.kind(tc);
                var result;
                if (typeof match === "number") {
                  switch (match) {
                    case /* Files */0 :
                        result = /* Files */Block.__(0, [[]]);
                        break;
                    case /* Link */1 :
                        result = /* Link */Block.__(1, [""]);
                        break;
                    case /* ShortText */2 :
                        result = /* ShortText */Block.__(2, [""]);
                        break;
                    case /* LongText */3 :
                        result = /* LongText */Block.__(3, [""]);
                        break;
                    
                  }
                } else {
                  result = /* MultiChoice */Block.__(4, [
                      match[0],
                      undefined
                    ]);
                }
                return {
                        title: title,
                        optional: optional,
                        result: result
                      };
              }), targetChecklist);
}

function updateResultAtIndex(index, result, checklist) {
  return $$Array.mapi((function (i, c) {
                if (i === index) {
                  return {
                          title: c.title,
                          optional: c.optional,
                          result: result
                        };
                } else {
                  return c;
                }
              }), checklist);
}

function makeFile(id, name) {
  return {
          id: id,
          name: name
        };
}

function filename(file) {
  return file.name;
}

function fileId(file) {
  return file.id;
}

function fileIds(checklist) {
  return ArrayUtils.flatten($$Array.map((function (c) {
                    var _anyOtherResult = c.result;
                    if (_anyOtherResult.tag) {
                      return /* [] */0;
                    } else {
                      return $$Array.to_list($$Array.map((function (a) {
                                        return a.id;
                                      }), _anyOtherResult[0]));
                    }
                  }), checklist));
}

function kindAsString(t) {
  var match = t.result;
  switch (match.tag | 0) {
    case /* Files */0 :
        return "files";
    case /* Link */1 :
        return "link";
    case /* ShortText */2 :
        return "shortText";
    case /* LongText */3 :
        return "longText";
    case /* MultiChoice */4 :
        return "multiChoice";
    
  }
}

function resultAsString(t) {
  var match = t.result;
  switch (match.tag | 0) {
    case /* Files */0 :
        return "files";
    case /* MultiChoice */4 :
        var choices = match[0];
        return OptionUtils.$$default("", OptionUtils.flatMap((function (i) {
                          return ArrayUtils.getOpt(i, choices);
                        }), match[1]));
    default:
      return match[0];
  }
}

function validString(s, maxLength) {
  var length = $$String.trim(s).length;
  if (length >= 1) {
    return length <= maxLength;
  } else {
    return false;
  }
}

function validShortText(s) {
  return validString(s, 250);
}

function validLongText(s) {
  return validString(s, 5000);
}

function validFiles(files) {
  if (Caml_obj.caml_notequal(files, [])) {
    return files.length < 3;
  } else {
    return false;
  }
}

function validMultiChoice(choices, index) {
  return OptionUtils.mapWithDefault((function (i) {
                return choices.length > i;
              }), false, index);
}

function validResponse(response, allowBlank) {
  var optional = allowBlank ? response.optional : false;
  var match = response.result;
  switch (match.tag | 0) {
    case /* Files */0 :
        var files = match[0];
        if (optional && ArrayUtils.isEmpty(files)) {
          return true;
        } else {
          return validFiles(files);
        }
    case /* Link */1 :
        var link = match[0];
        if (optional) {
          return UrlUtils.isValid(true, link);
        } else {
          return UrlUtils.isValid(false, link);
        }
    case /* ShortText */2 :
        var t = match[0];
        if (optional) {
          if (validString(t, 250)) {
            return true;
          } else {
            return t === "";
          }
        } else {
          return validString(t, 250);
        }
    case /* LongText */3 :
        var t$1 = match[0];
        if (optional) {
          if (validString(t$1, 5000)) {
            return true;
          } else {
            return t$1 === "";
          }
        } else {
          return validString(t$1, 5000);
        }
    case /* MultiChoice */4 :
        var index = match[1];
        var choices = match[0];
        if (optional) {
          if (validMultiChoice(choices, index)) {
            return true;
          } else {
            return index === undefined;
          }
        } else {
          return validMultiChoice(choices, index);
        }
    
  }
}

function validChecklist(checklist) {
  return ArrayUtils.isEmpty($$Array.map((function (c) {
                      return validResponse(c, true);
                    }), checklist).filter((function (c) {
                    return !c;
                  })));
}

function validResonses(responses) {
  return responses.filter((function (c) {
                return validResponse(c, false);
              }));
}

function encode(t) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "title",
                t.title
              ],
              /* :: */[
                /* tuple */[
                  "kind",
                  kindAsString(t)
                ],
                /* :: */[
                  /* tuple */[
                    "status",
                    "noAnswer"
                  ],
                  /* :: */[
                    /* tuple */[
                      "result",
                      resultAsString(t)
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

function encodeArray(checklist) {
  return Json_encode.array(encode, validResonses(checklist));
}

function makeFiles(checklist) {
  return $$Array.map((function (f) {
                var url = "/timeline_event_files/" + (f.id + "/download");
                return SubmissionChecklistItem.makeFile(f.name, url, f.id);
              }), OptionUtils.mapWithDefault((function (c) {
                    var _anyOtherResult = c.result;
                    if (_anyOtherResult.tag) {
                      return [];
                    } else {
                      return _anyOtherResult[0];
                    }
                  }), [], Caml_option.undefined_to_opt(checklist.find((function (c) {
                            var _anyOtherResult = c.result;
                            if (_anyOtherResult.tag) {
                              return false;
                            } else {
                              return true;
                            }
                          })))));
}

exports.title = title;
exports.result = result;
exports.optional = optional;
exports.make = make;
exports.fromTargetChecklistItem = fromTargetChecklistItem;
exports.updateResultAtIndex = updateResultAtIndex;
exports.makeFile = makeFile;
exports.filename = filename;
exports.fileId = fileId;
exports.fileIds = fileIds;
exports.kindAsString = kindAsString;
exports.resultAsString = resultAsString;
exports.validString = validString;
exports.validShortText = validShortText;
exports.validLongText = validLongText;
exports.validFiles = validFiles;
exports.validMultiChoice = validMultiChoice;
exports.validResponse = validResponse;
exports.validChecklist = validChecklist;
exports.validResonses = validResonses;
exports.encode = encode;
exports.encodeArray = encodeArray;
exports.makeFiles = makeFiles;
/* UrlUtils Not a pure module */
