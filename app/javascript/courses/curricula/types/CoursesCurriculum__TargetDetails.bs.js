// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var ListUtils = require("../../../shared/utils/ListUtils.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ContentBlock = require("../../../shared/types/ContentBlock.bs.js");
var TargetChecklistItem = require("../../../schools/courses/types/curriculum_editor/TargetChecklistItem.bs.js");
var CoursesCurriculum__Grade = require("./CoursesCurriculum__Grade.bs.js");
var CoursesCurriculum__Feedback = require("./CoursesCurriculum__Feedback.bs.js");
var CoursesCurriculum__Community = require("./CoursesCurriculum__Community.bs.js");
var CoursesCurriculum__Submission = require("./CoursesCurriculum__Submission.bs.js");
var CoursesCurriculum__QuizQuestion = require("./CoursesCurriculum__QuizQuestion.bs.js");

function submissions(t) {
  return t.submissions;
}

function pendingUserIds(t) {
  return t.pendingUserIds;
}

function feedback(t) {
  return t.feedback;
}

function navigation(t) {
  return /* tuple */[
          t.navigation.previous,
          t.navigation.next
        ];
}

function checklist(t) {
  return t.checklist;
}

function decodeNavigation(json) {
  return {
          previous: Json_decode.optional((function (param) {
                  return Json_decode.field("previous", Json_decode.string, param);
                }), json),
          next: Json_decode.optional((function (param) {
                  return Json_decode.field("next", Json_decode.string, param);
                }), json)
        };
}

function decode(json) {
  return {
          pendingUserIds: Json_decode.field("pendingUserIds", (function (param) {
                  return Json_decode.list(Json_decode.string, param);
                }), json),
          submissions: Json_decode.field("submissions", (function (param) {
                  return Json_decode.list(CoursesCurriculum__Submission.decode, param);
                }), json),
          feedback: Json_decode.field("feedback", (function (param) {
                  return Json_decode.list(CoursesCurriculum__Feedback.decode, param);
                }), json),
          quizQuestions: Json_decode.field("quizQuestions", (function (param) {
                  return Json_decode.list(CoursesCurriculum__QuizQuestion.decode, param);
                }), json),
          contentBlocks: Json_decode.field("contentBlocks", (function (param) {
                  return Json_decode.list(ContentBlock.decode, param);
                }), json),
          communities: Json_decode.field("communities", (function (param) {
                  return Json_decode.list(CoursesCurriculum__Community.decode, param);
                }), json),
          linkToComplete: Caml_option.null_to_opt(Json_decode.field("linkToComplete", (function (param) {
                      return Json_decode.nullable(Json_decode.string, param);
                    }), json)),
          evaluated: Json_decode.field("evaluated", Json_decode.bool, json),
          grading: Json_decode.field("grading", (function (param) {
                  return Json_decode.list(CoursesCurriculum__Grade.decode, param);
                }), json),
          completionInstructions: Caml_option.null_to_opt(Json_decode.field("completionInstructions", (function (param) {
                      return Json_decode.nullable(Json_decode.string, param);
                    }), json)),
          navigation: Json_decode.field("navigation", decodeNavigation, json),
          checklist: Json_decode.field("checklist", (function (param) {
                  return Json_decode.array(TargetChecklistItem.decode, param);
                }), json)
        };
}

function computeCompletionType(targetDetails) {
  var evaluated = targetDetails.evaluated;
  var hasQuiz = ListUtils.isNotEmpty(targetDetails.quizQuestions);
  var match = targetDetails.linkToComplete;
  var hasLinkToComplete = match !== undefined;
  if (evaluated) {
    return /* Evaluated */0;
  } else if (hasQuiz) {
    return /* TakeQuiz */1;
  } else if (hasLinkToComplete) {
    return /* LinkToComplete */2;
  } else {
    return /* MarkAsComplete */3;
  }
}

function contentBlocks(t) {
  return t.contentBlocks;
}

function quizQuestions(t) {
  return t.quizQuestions;
}

function communities(t) {
  return t.communities;
}

function linkToComplete(t) {
  return t.linkToComplete;
}

function completionInstructions(t) {
  return t.completionInstructions;
}

function grades(submissionId, t) {
  return List.filter((function (grade) {
                  return CoursesCurriculum__Grade.submissionId(grade) === submissionId;
                }))(t.grading);
}

function addSubmission(submission, t) {
  return {
          pendingUserIds: t.pendingUserIds,
          submissions: /* :: */[
            submission,
            t.submissions
          ],
          feedback: t.feedback,
          quizQuestions: t.quizQuestions,
          contentBlocks: t.contentBlocks,
          communities: t.communities,
          linkToComplete: t.linkToComplete,
          evaluated: t.evaluated,
          grading: t.grading,
          completionInstructions: t.completionInstructions,
          navigation: t.navigation,
          checklist: t.checklist
        };
}

function clearPendingUserIds(t) {
  return {
          pendingUserIds: /* [] */0,
          submissions: t.submissions,
          feedback: t.feedback,
          quizQuestions: t.quizQuestions,
          contentBlocks: t.contentBlocks,
          communities: t.communities,
          linkToComplete: t.linkToComplete,
          evaluated: t.evaluated,
          grading: t.grading,
          completionInstructions: t.completionInstructions,
          navigation: t.navigation,
          checklist: t.checklist
        };
}

exports.submissions = submissions;
exports.pendingUserIds = pendingUserIds;
exports.feedback = feedback;
exports.navigation = navigation;
exports.checklist = checklist;
exports.decodeNavigation = decodeNavigation;
exports.decode = decode;
exports.computeCompletionType = computeCompletionType;
exports.contentBlocks = contentBlocks;
exports.quizQuestions = quizQuestions;
exports.communities = communities;
exports.linkToComplete = linkToComplete;
exports.completionInstructions = completionInstructions;
exports.grades = grades;
exports.addSubmission = addSubmission;
exports.clearPendingUserIds = clearPendingUserIds;
/* ContentBlock Not a pure module */
