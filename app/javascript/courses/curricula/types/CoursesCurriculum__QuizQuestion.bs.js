// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");

function decodeAnswerOption(json) {
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          value: Json_decode.field("value", Json_decode.string, json)
        };
}

function decode(json) {
  return {
          index: Json_decode.field("index", Json_decode.$$int, json),
          question: Json_decode.field("question", Json_decode.string, json),
          answerOptions: Json_decode.field("answerOptions", (function (param) {
                  return Json_decode.list(decodeAnswerOption, param);
                }), json)
        };
}

function index(t) {
  return t.index;
}

function question(t) {
  return t.question;
}

function answerOptions(t) {
  return t.answerOptions;
}

function answerId(answerOption) {
  return answerOption.id;
}

function answerValue(answerOption) {
  return answerOption.value;
}

function lastQuestion(questions) {
  var maxIndex = List.hd(List.rev(List.sort((function (q1, q2) {
                  return q1.index - q2.index | 0;
                }), questions))).index;
  return List.find((function (q) {
                return q.index === maxIndex;
              }), questions);
}

function nextQuestion(questions, question) {
  return List.find((function (q) {
                return q.index === (question.index + 1 | 0);
              }), questions);
}

function isLastQuestion(questions, question) {
  return Caml_obj.caml_equal(lastQuestion(questions), question);
}

exports.decodeAnswerOption = decodeAnswerOption;
exports.decode = decode;
exports.index = index;
exports.question = question;
exports.answerOptions = answerOptions;
exports.answerId = answerId;
exports.answerValue = answerValue;
exports.lastQuestion = lastQuestion;
exports.nextQuestion = nextQuestion;
exports.isLastQuestion = isLastQuestion;
/* No side effect */
