// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

function decode(json) {
  return {
          criterionId: Json_decode.field("criterionId", Json_decode.string, json),
          criterionName: Json_decode.field("criterionName", Json_decode.string, json),
          grade: Caml_option.null_to_opt(Json_decode.field("grade", (function (param) {
                      return Json_decode.nullable(Json_decode.$$int, param);
                    }), json))
        };
}

function grade(t) {
  return t.grade;
}

function pending(evaluation) {
  return List.exists((function (grading) {
                return grading.grade === undefined;
              }), evaluation);
}

function isFail(passGrade, grading) {
  var match = grading.grade;
  if (match !== undefined) {
    return match < passGrade;
  } else {
    return false;
  }
}

function anyFail(passGrade, evaluation) {
  return List.exists((function (grading) {
                return isFail(passGrade, grading);
              }), evaluation);
}

function criterionId(t) {
  return t.criterionId;
}

function criterionName(t) {
  return t.criterionName;
}

function updateGrade(newGrade, t) {
  return {
          criterionId: t.criterionId,
          criterionName: t.criterionName,
          grade: newGrade
        };
}

function gradingEncoder(grading) {
  var match = grading.grade;
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "criterionId",
                grading.criterionId
              ],
              /* :: */[
                /* tuple */[
                  "grade",
                  match !== undefined ? match : null
                ],
                /* [] */0
              ]
            ]);
}

function make(criterionId, criterionName, grade) {
  return {
          criterionId: criterionId,
          criterionName: criterionName,
          grade: grade
        };
}

exports.decode = decode;
exports.grade = grade;
exports.pending = pending;
exports.isFail = isFail;
exports.anyFail = anyFail;
exports.criterionId = criterionId;
exports.criterionName = criterionName;
exports.updateGrade = updateGrade;
exports.gradingEncoder = gradingEncoder;
exports.make = make;
/* No side effect */
