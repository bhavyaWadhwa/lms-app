// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var DateFns = require("../../../shared/utils/DateFns.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var UnexpectedProgressionBehavior = Caml_exceptions.create("CoursesCurriculum__Course.UnexpectedProgressionBehavior");

function endsAt(t) {
  return t.endsAt;
}

function id(t) {
  return t.id;
}

function certificateSerialNumber(t) {
  return t.certificateSerialNumber;
}

function progressionBehavior(t) {
  var match = t.progressionBehavior;
  if (typeof match === "number") {
    if (match !== 0) {
      return /* Strict */-976972951;
    } else {
      return /* Unlimited */751362817;
    }
  } else {
    return /* `Limited */[
            -599448518,
            match[0]
          ];
  }
}

function decode(json) {
  var behavior = Json_decode.field("progressionBehavior", Json_decode.string, json);
  var progressionBehavior;
  switch (behavior) {
    case "Limited" :
        var progressionLimit = Json_decode.field("progressionLimit", Json_decode.$$int, json);
        progressionBehavior = /* Limited */[progressionLimit];
        break;
    case "Strict" :
        progressionBehavior = /* Strict */1;
        break;
    case "Unlimited" :
        progressionBehavior = /* Unlimited */0;
        break;
    default:
      Rollbar.error("Unexpected progressionBehavior: " + behavior);
      throw [
            UnexpectedProgressionBehavior,
            behavior
          ];
  }
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          endsAt: Belt_Option.map(Json_decode.optional((function (param) {
                      return Json_decode.field("endsAt", Json_decode.string, param);
                    }), json), DateFns.parseISO),
          certificateSerialNumber: Json_decode.optional((function (param) {
                  return Json_decode.field("certificateSerialNumber", Json_decode.string, param);
                }), json),
          progressionBehavior: progressionBehavior
        };
}

function hasEnded(t) {
  return Belt_Option.mapWithDefault(t.endsAt, false, DateFns.isPast);
}

exports.UnexpectedProgressionBehavior = UnexpectedProgressionBehavior;
exports.endsAt = endsAt;
exports.id = id;
exports.certificateSerialNumber = certificateSerialNumber;
exports.progressionBehavior = progressionBehavior;
exports.decode = decode;
exports.hasEnded = hasEnded;
/* DateFns Not a pure module */
