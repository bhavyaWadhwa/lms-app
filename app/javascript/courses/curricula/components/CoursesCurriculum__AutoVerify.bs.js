// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FaIcon = require("../../../shared/components/FaIcon.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var DateFns = require("../../../shared/utils/DateFns.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var CoursesCurriculum__Target = require("../types/CoursesCurriculum__Target.bs.js");
var CoursesCurriculum__Submission = require("../types/CoursesCurriculum__Submission.bs.js");
var CoursesCurriculum__TargetStatus = require("../types/CoursesCurriculum__TargetStatus.bs.js");
var CoursesCurriculum__TargetDetails = require("../types/CoursesCurriculum__TargetDetails.bs.js");
var CoursesCurriculum__CompletionInstructions = require("./CoursesCurriculum__CompletionInstructions.bs.js");

function str(prim) {
  return prim;
}

var ppx_printed_query = "mutation AutoVerifySubmissionMutation($targetId: ID!)  {\nautoVerifySubmission(targetId: $targetId)  {\nsubmission  {\nid  \ncreatedAt  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "autoVerifySubmission");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "submission");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      if (match$2 !== undefined) {
        tmp$1 = undefined;
      } else {
        var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
        var match$3 = Js_dict.get(value$4, "id");
        var tmp$2;
        if (match$3 !== undefined) {
          var value$5 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeString(value$5);
          tmp$2 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        } else {
          tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type Submission is missing");
        }
        var match$5 = Js_dict.get(value$4, "createdAt");
        tmp$1 = {
          id: tmp$2,
          createdAt: match$5 !== undefined ? Caml_option.valFromOption(match$5) : Js_exn.raiseError("graphql_ppx: Field createdAt on type Submission is missing")
        };
      }
    } else {
      tmp$1 = undefined;
    }
    tmp = {
      submission: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field autoVerifySubmission on type Mutation is missing");
  }
  return {
          autoVerifySubmission: tmp
        };
}

function make(targetId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "targetId",
                    targetId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var targetId = variables.targetId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "targetId",
                    targetId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(targetId, param) {
  return Js_dict.fromArray([/* tuple */[
                  "targetId",
                  targetId
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, targetId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "targetId",
                      targetId
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var AutoVerifySubmissionQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function redirect(link) {
  var $$window$1 = window;
  $$window$1.open(link, "_blank", "");
  return /* () */0;
}

function handleSuccess(submission, linkToComplete, addSubmissionCB) {
  Curry._1(addSubmissionCB, CoursesCurriculum__Submission.make(submission.id, DateFns.decodeISO(submission.createdAt), /* MarkedAsComplete */0, []));
  if (linkToComplete !== undefined) {
    return redirect(linkToComplete);
  } else {
    return /* () */0;
  }
}

function createAutoVerifySubmission(target, linkToComplete, setSaving, addSubmissionCB, $$event) {
  $$event.preventDefault();
  Curry._1(setSaving, (function (param) {
          return true;
        }));
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make(CoursesCurriculum__Target.id(target), /* () */0)).then((function (response) {
          var match = response.autoVerifySubmission.submission;
          if (match !== undefined) {
            handleSuccess(Caml_option.valFromOption(match), linkToComplete, addSubmissionCB);
          } else {
            Curry._1(setSaving, (function (param) {
                    return false;
                  }));
          }
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function completeButtonText(title, iconClasses) {
  return React.createElement("span", undefined, React.createElement(FaIcon.make, {
                  classes: iconClasses + " mr-2"
                }), title);
}

function previewLinkToComplete(link) {
  return React.createElement("a", {
              className: "block text-primary-500 w-full text-center bg-gray-200 hover:bg-gray-300 hover:text-primary-600 p-4 rounded text-lg font-bold",
              href: link,
              target: "_blank"
            }, React.createElement("span", undefined, React.createElement(FaIcon.make, {
                      classes: "fas fa-external-link-alt mr-2"
                    }), "Visit Link "));
}

function autoVerify(target, linkToComplete, saving, setSaving, addSubmissionCB, preview) {
  if (preview && linkToComplete !== undefined) {
    return previewLinkToComplete(linkToComplete);
  }
  return React.createElement("button", {
              className: "flex rounded btn-success text-lg justify-center w-full font-bold p-4  ",
              disabled: saving || preview,
              onClick: (function (param) {
                  return createAutoVerifySubmission(target, linkToComplete, setSaving, addSubmissionCB, param);
                })
            }, saving ? completeButtonText("Saving", "fas fa-spinner fa-spin") : (
                linkToComplete !== undefined ? completeButtonText("Visit Link To Complete", "fas fa-external-link-alt") : completeButtonText("Mark As Complete", "fas fa-check-square")
              ));
}

function statusBar(string, linkToComplete) {
  var message = React.createElement("div", {
        className: "flex items-center"
      }, React.createElement("span", {
            className: "fa-stack text-lg mr-1 text-green-500"
          }, React.createElement("i", {
                className: "fas fa-certificate fa-stack-2x"
              }), React.createElement("i", {
                className: "fas fa-check fa-stack-1x fa-inverse"
              })), React.createElement("span", undefined, string));
  var visitLink = function (link) {
    return React.createElement("a", {
                className: "text-right w-full",
                href: link,
                target: "_blank"
              }, React.createElement("i", {
                    className: "fas fa-external-link-alt mr-2"
                  }), "Visit Link");
  };
  return React.createElement("div", {
              className: "font-bold p-4 flex w-full items-center text-green-500 bg-green-100 justify-center"
            }, message, linkToComplete !== undefined ? visitLink(linkToComplete) : null);
}

function completionInstructionText(linkToComplete) {
  if (linkToComplete !== undefined) {
    return "Before visiting the link...";
  } else {
    return "Before marking as complete...";
  }
}

function CoursesCurriculum__AutoVerify(Props) {
  var target = Props.target;
  var targetDetails = Props.targetDetails;
  var targetStatus = Props.targetStatus;
  var addSubmissionCB = Props.addSubmissionCB;
  var preview = Props.preview;
  var match = React.useState((function () {
          return false;
        }));
  var linkToComplete = CoursesCurriculum__TargetDetails.linkToComplete(targetDetails);
  var match$1 = CoursesCurriculum__TargetStatus.status(targetStatus);
  return [
          React.createElement(CoursesCurriculum__CompletionInstructions.make, {
                targetDetails: targetDetails,
                title: completionInstructionText(linkToComplete),
                key: "completion-instructions"
              }),
          React.createElement("div", {
                key: "completion-button",
                className: "mt-5",
                id: "auto-verify-target"
              }, typeof match$1 === "number" ? (
                  match$1 !== 0 ? statusBar("Completed", linkToComplete) : autoVerify(target, linkToComplete, match[0], match[1], addSubmissionCB, preview)
                ) : null)
        ];
}

var TargetStatus = /* alias */0;

var make$1 = CoursesCurriculum__AutoVerify;

exports.str = str;
exports.TargetStatus = TargetStatus;
exports.AutoVerifySubmissionQuery = AutoVerifySubmissionQuery;
exports.redirect = redirect;
exports.handleSuccess = handleSuccess;
exports.createAutoVerifySubmission = createAutoVerifySubmission;
exports.completeButtonText = completeButtonText;
exports.previewLinkToComplete = previewLinkToComplete;
exports.autoVerify = autoVerify;
exports.statusBar = statusBar;
exports.completionInstructionText = completionInstructionText;
exports.make = make$1;
/* react Not a pure module */
