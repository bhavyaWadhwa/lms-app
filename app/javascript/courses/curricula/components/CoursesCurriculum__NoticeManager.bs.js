// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var FaIcon = require("../../../shared/components/FaIcon.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var OptionUtils = require("../../../shared/utils/OptionUtils.bs.js");
var CoursesCurriculum__Course = require("../types/CoursesCurriculum__Course.bs.js");
var CoursesCurriculum__Notice = require("../types/CoursesCurriculum__Notice.bs.js");
var CoursesCurriculum__LevelUpButton = require("./CoursesCurriculum__LevelUpButton.bs.js");

function str(prim) {
  return prim;
}

function showNotice(title, description, notice, linkOpt, classesOpt, param) {
  var link = linkOpt !== undefined ? Caml_option.valFromOption(linkOpt) : undefined;
  var classes = classesOpt !== undefined ? classesOpt : "max-w-3xl mx-auto text-center mt-4 bg-white lg:rounded-lg shadow-md px-6 pt-6 pb-8";
  var tmp;
  if (link !== undefined) {
    var link$1 = link;
    tmp = React.createElement("a", {
          className: "mt-4 mb-2 btn btn-primary",
          href: link$1.href
        }, React.createElement(FaIcon.make, {
              classes: link$1.icon
            }), React.createElement("span", {
              className: "ml-2"
            }, link$1.title));
  } else {
    tmp = null;
  }
  return React.createElement("div", {
              className: classes
            }, React.createElement("img", {
                  className: "h-50 mx-auto",
                  src: CoursesCurriculum__Notice.icon(notice)
                }), React.createElement("div", {
                  className: "max-w-xl font-bold text-xl mx-auto mt-2 leading-tight"
                }, title), tmp, React.createElement("div", {
                  className: "text-sm max-w-lg mx-auto mt-2"
                }, description));
}

function courseCompletedMessage(course) {
  var csn = CoursesCurriculum__Course.certificateSerialNumber(course);
  var title = csn !== undefined ? "Congratulations! You have been issued a certificate." : "Congratulations! You have completed all modules in this course.";
  var link = OptionUtils.map((function (csn) {
          return {
                  icon: "fas fa-certificate",
                  title: "View Certificate",
                  href: "/c/" + csn
                };
        }), csn);
  return showNotice(title, "You've completed our coursework. Feel free to complete targets that you might have left out, and read up on attached links and resources.", /* CourseComplete */2, Caml_option.some(link), undefined, /* () */0);
}

function courseEndedMessage(param) {
  return showNotice("Course Ended", "The course has ended and submissions are disabled for all targets!", /* CourseEnded */1, undefined, undefined, /* () */0);
}

function showPreviewMessage(param) {
  return React.createElement("div", {
              className: "flex max-w-lg md:mx-auto mx-3 mt-4 rounded-lg px-3 py-2 shadow-lg items-center border border-primary-300 bg-gray-200 "
            }, React.createElement("img", {
                  className: "w-20 md:w-22 flex-no-shrink",
                  src: CoursesCurriculum__Notice.previewModeImage
                }), React.createElement("div", {
                  className: "flex-1 text-left ml-4"
                }, React.createElement("h4", {
                      className: "font-bold text-lg leading-tight"
                    }, "Preview Mode"), React.createElement("p", {
                      className: "text-sm mt-1"
                    }, "You are accessing the preview mode for this course")));
}

function accessEndedMessage(param) {
  return showNotice("Access Ended", "Your access to this course has ended.", /* AccessEnded */3, undefined, undefined, /* () */0);
}

function levelUpBlockedMessage(currentLevelNumber) {
  var description = "You have submitted all modules in level " + (String(currentLevelNumber) + ", but one or more submissions are pending review by a coach. You need to get a passing grade on all modules to level up.");
  return showNotice("Review Pending", description, /* LevelUpBlocked */Block.__(1, [currentLevelNumber]), undefined, undefined, /* () */0);
}

function levelUpLimitedMessage(currentLevelNumber, minimumRequiredLevelNumber) {
  var currentLevel = String(currentLevelNumber);
  var minimumRequiredLevel = String(minimumRequiredLevelNumber);
  var description = "You're at Level " + (currentLevel + (", but you have targets in the Level " + (minimumRequiredLevel + (" that are failed, or are pending review by a coach. You'll need to pass all modules in Level " + (minimumRequiredLevel + " to continue leveling up.")))));
  return showNotice("Level Up Blocked", description, /* LevelUpLimited */Block.__(0, [
                currentLevelNumber,
                minimumRequiredLevelNumber
              ]), undefined, undefined, /* () */0);
}

function renderLevelUp(course) {
  return React.createElement("div", {
              className: "max-w-3xl mx-3 lg:mx-auto text-center mt-4 bg-white rounded-lg shadow px-6 pt-4 pb-8"
            }, showNotice("Ready to Level Up!", "Congratulations! You have successfully completed all modules required to level up. Click the button below to proceed to the next level. New challenges await!", /* LevelUp */4, undefined, "", /* () */0), React.createElement(CoursesCurriculum__LevelUpButton.make, {
                  course: course
                }));
}

function CoursesCurriculum__NoticeManager(Props) {
  var notice = Props.notice;
  var course = Props.course;
  if (typeof notice === "number") {
    switch (notice) {
      case /* Preview */0 :
          return showPreviewMessage(/* () */0);
      case /* CourseEnded */1 :
          return courseEndedMessage(/* () */0);
      case /* CourseComplete */2 :
          return courseCompletedMessage(course);
      case /* AccessEnded */3 :
          return accessEndedMessage(/* () */0);
      case /* LevelUp */4 :
          return renderLevelUp(course);
      case /* Nothing */5 :
          return null;
      
    }
  } else if (notice.tag) {
    return levelUpBlockedMessage(notice[0]);
  } else {
    return levelUpLimitedMessage(notice[0], notice[1]);
  }
}

var make = CoursesCurriculum__NoticeManager;

exports.str = str;
exports.showNotice = showNotice;
exports.courseCompletedMessage = courseCompletedMessage;
exports.courseEndedMessage = courseEndedMessage;
exports.showPreviewMessage = showPreviewMessage;
exports.accessEndedMessage = accessEndedMessage;
exports.levelUpBlockedMessage = levelUpBlockedMessage;
exports.levelUpLimitedMessage = levelUpLimitedMessage;
exports.renderLevelUp = renderLevelUp;
exports.make = make;
/* react Not a pure module */
