// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Link = require("../../../shared/components/Link.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FaIcon = require("../../../shared/components/FaIcon.bs.js");
var DateFns = require("../../../shared/utils/DateFns.bs.js");
var ListUtils = require("../../../shared/utils/ListUtils.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var StringUtils = require("../../../shared/utils/StringUtils.bs.js");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.js");
var CoursesCurriculum__Team = require("../types/CoursesCurriculum__Team.bs.js");
var LevelLockSvg = require("../images/level-lock.svg");
var CoursesCurriculum__Level = require("../types/CoursesCurriculum__Level.bs.js");
var CoursesCurriculum__Course = require("../types/CoursesCurriculum__Course.bs.js");
var CoursesCurriculum__Target = require("../types/CoursesCurriculum__Target.bs.js");
var CoursesCurriculum__Overlay = require("./CoursesCurriculum__Overlay.bs.js");
var CoursesCurriculum__TargetGroup = require("../types/CoursesCurriculum__TargetGroup.bs.js");
var CoursesCurriculum__TargetStatus = require("../types/CoursesCurriculum__TargetStatus.bs.js");
var CoursesCurriculum__LevelSelector = require("./CoursesCurriculum__LevelSelector.bs.js");
var CoursesCurriculum__NoticeManager = require("./CoursesCurriculum__NoticeManager.bs.js");
var CoursesCurriculum__LatestSubmission = require("../types/CoursesCurriculum__LatestSubmission.bs.js");

((require("./CoursesCurriculum.css")));

var levelLockedImage = LevelLockSvg.default;

function str(prim) {
  return prim;
}

function targetStatusClasses(targetStatus) {
  var statusClasses = "curriculum__target-status--" + CoursesCurriculum__TargetStatus.statusToString(targetStatus).toLowerCase();
  return "curriculum__target-status px-3 py-px ml-4 h-6 " + statusClasses;
}

function rendertarget(target, statusOfTargets) {
  var targetId = CoursesCurriculum__Target.id(target);
  var targetStatus = ListUtils.unsafeFind((function (ts) {
          return CoursesCurriculum__TargetStatus.targetId(ts) === targetId;
        }), "Could not find targetStatus for listed target with ID " + targetId, statusOfTargets);
  return React.createElement(Link.make, {
              href: "/targets/" + targetId,
              ariaLabel: "Select Target " + targetId,
              className: "bg-white border-t p-6 flex items-center justify-between hover:bg-gray-200 hover:text-primary-500 cursor-pointer",
              children: null,
              key: "target-" + targetId
            }, React.createElement("span", {
                  className: "font-semibold text-left leading-snug"
                }, CoursesCurriculum__Target.title(target)), React.createElement("span", {
                  className: targetStatusClasses(targetStatus)
                }, CoursesCurriculum__TargetStatus.statusToString(targetStatus)));
}

function renderTargetGroup(targetGroup, targets, statusOfTargets) {
  var targetGroupId = CoursesCurriculum__TargetGroup.id(targetGroup);
  var targets$1 = List.filter((function (t) {
            return CoursesCurriculum__Target.targetGroupId(t) === targetGroupId;
          }))(targets);
  return React.createElement("div", {
              key: "target-group-" + targetGroupId,
              className: "curriculum__target-group-container relative mt-5 px-3"
            }, React.createElement("div", {
                  className: "curriculum__target-group max-w-3xl mx-auto bg-white text-center rounded-lg shadow-md relative z-10 overflow-hidden "
                }, CoursesCurriculum__TargetGroup.milestone(targetGroup) ? React.createElement("div", {
                        className: "inline-block px-3 py-2 bg-orange-400 font-bold text-xs rounded-b-lg leading-tight text-white uppercase"
                      }, "Modules") : null, React.createElement("div", {
                      className: "p-6 pt-5"
                    }, React.createElement("div", {
                          className: "text-2xl font-bold leading-snug"
                        }, CoursesCurriculum__TargetGroup.name(targetGroup)), React.createElement("div", {
                          className: "text-sm max-w-md mx-auto leading-snug mt-1"
                        }, CoursesCurriculum__TargetGroup.description(targetGroup))), $$Array.of_list(List.map((function (target) {
                            return rendertarget(target, statusOfTargets);
                          }), List.sort((function (t1, t2) {
                                return CoursesCurriculum__Target.sortIndex(t1) - CoursesCurriculum__Target.sortIndex(t2) | 0;
                              }), targets$1)))));
}

function addSubmission(setState, latestSubmission) {
  return Curry._1(setState, (function (state) {
                var withoutSubmissionForThisTarget = List.filter((function (s) {
                          return CoursesCurriculum__LatestSubmission.targetId(s) !== CoursesCurriculum__LatestSubmission.targetId(latestSubmission);
                        }))(state.latestSubmissions);
                return {
                        selectedLevelId: state.selectedLevelId,
                        showLevelZero: state.showLevelZero,
                        latestSubmissions: /* :: */[
                          latestSubmission,
                          withoutSubmissionForThisTarget
                        ],
                        statusOfTargets: state.statusOfTargets,
                        notice: state.notice
                      };
              }));
}

function handleLockedLevel(level) {
  var match = CoursesCurriculum__Level.unlockOn(level);
  var tmp;
  if (match !== undefined) {
    var dateString = DateFns.format(DateFns.parseISO(match), "MMMM d, yyyy");
    tmp = React.createElement("div", {
          className: "font-semibold text-md px-3"
        }, React.createElement("p", undefined, "The level is currently locked!"), React.createElement("p", undefined, "You can access the content on " + (dateString + ".")));
  } else {
    tmp = null;
  }
  return React.createElement("div", {
              className: "max-w-xl mx-auto text-center mt-4"
            }, React.createElement("div", {
                  className: "font-semibold text-2xl font-bold px-3"
                }, "Level Locked"), React.createElement("img", {
                  className: "max-w-sm mx-auto",
                  src: levelLockedImage
                }), tmp);
}

function statusOfMilestoneTargets(targetGroups, targets, level, statusOfTargets) {
  var targetGroupsInLevel = List.filter((function (tg) {
            return CoursesCurriculum__TargetGroup.levelId(tg) === CoursesCurriculum__Level.id(level);
          }))(targetGroups);
  var milestoneTargetGroupIds = List.map(CoursesCurriculum__TargetGroup.id, List.filter(CoursesCurriculum__TargetGroup.milestone)(targetGroupsInLevel));
  var milestoneTargetIds = List.map(CoursesCurriculum__Target.id, List.filter((function (t) {
                return List.mem(CoursesCurriculum__Target.targetGroupId(t), milestoneTargetGroupIds);
              }))(targets));
  return List.filter((function (ts) {
                  return List.mem(CoursesCurriculum__TargetStatus.targetId(ts), milestoneTargetIds);
                }))(statusOfTargets);
}

function isLevelComplete(targetStatuses, eligibleStatuses) {
  if (ListUtils.isNotEmpty(targetStatuses)) {
    return CoursesCurriculum__TargetStatus.matchesStatuses(eligibleStatuses, targetStatuses);
  } else {
    return false;
  }
}

function computeLevelUp(course, levels, teamLevel, targetGroups, targets, statusOfTargets, accessLockedLevels) {
  var progressionBehavior = CoursesCurriculum__Course.progressionBehavior(course);
  var currentLevelNumber = CoursesCurriculum__Level.number(teamLevel);
  var minimumRequiredLevel;
  if (typeof progressionBehavior === "number") {
    minimumRequiredLevel = undefined;
  } else {
    var minimumLevelNumber = currentLevelNumber - progressionBehavior[1] | 0;
    minimumRequiredLevel = minimumLevelNumber >= 1 ? ListUtils.findOpt((function (l) {
              return CoursesCurriculum__Level.number(l) === minimumLevelNumber;
            }), levels) : undefined;
  }
  var statusOfCurrentMilestoneTargets = statusOfMilestoneTargets(targetGroups, targets, teamLevel, statusOfTargets);
  var currentLevelComplete = isLevelComplete(statusOfCurrentMilestoneTargets, CoursesCurriculum__TargetStatus.currentLevelStatuses(progressionBehavior));
  var minimumRequiredLevelComplete;
  if (minimumRequiredLevel !== undefined) {
    var statusOfMinimumRequiredLevelMilestoneTargets = statusOfMilestoneTargets(targetGroups, targets, minimumRequiredLevel, statusOfTargets);
    minimumRequiredLevelComplete = isLevelComplete(statusOfMinimumRequiredLevelMilestoneTargets, CoursesCurriculum__TargetStatus.minimumRequiredLevelStatuses);
  } else {
    minimumRequiredLevelComplete = true;
  }
  var nextLevel = ListUtils.findOpt((function (l) {
          return CoursesCurriculum__Level.number(l) === (CoursesCurriculum__Level.number(teamLevel) + 1 | 0);
        }), levels);
  if (nextLevel !== undefined) {
    if (CoursesCurriculum__Level.isUnlocked(nextLevel) || accessLockedLevels) {
      if (typeof progressionBehavior === "number") {
        if (progressionBehavior >= 751362817) {
          if (currentLevelComplete) {
            return /* LevelUp */4;
          } else {
            return /* Nothing */5;
          }
        } else if (currentLevelComplete) {
          return /* LevelUp */4;
        } else {
          var currentLevelSubmitted = isLevelComplete(statusOfCurrentMilestoneTargets, /* :: */[
                /* Submitted */1,
                /* :: */[
                  /* Passed */2,
                  /* [] */0
                ]
              ]);
          if (currentLevelSubmitted) {
            return /* LevelUpBlocked */Block.__(1, [currentLevelNumber]);
          } else {
            return /* Nothing */5;
          }
        }
      } else if (currentLevelComplete) {
        if (minimumRequiredLevelComplete) {
          return /* LevelUp */4;
        } else {
          return /* LevelUpLimited */Block.__(0, [
                    currentLevelNumber,
                    currentLevelNumber - progressionBehavior[1] | 0
                  ]);
        }
      } else {
        return /* Nothing */5;
      }
    } else {
      return /* Nothing */5;
    }
  } else if (currentLevelComplete) {
    return /* CourseComplete */2;
  } else {
    return /* Nothing */5;
  }
}

function computeNotice(levels, teamLevel, targetGroups, targets, statusOfTargets, course, team, preview, accessLockedLevels) {
  var match = CoursesCurriculum__Course.hasEnded(course);
  var match$1 = CoursesCurriculum__Team.accessEnded(team);
  if (preview) {
    return /* Preview */0;
  } else if (match) {
    return /* CourseEnded */1;
  } else if (match$1) {
    return /* AccessEnded */3;
  } else {
    return computeLevelUp(course, levels, teamLevel, targetGroups, targets, statusOfTargets, accessLockedLevels);
  }
}

function navigationLink(direction, level, setState) {
  var match = direction >= 870035731 ? /* tuple */[
      undefined,
      "Next Level",
      "Next",
      "fa-arrow-right"
    ] : /* tuple */[
      "fa-arrow-left",
      "Previous Level",
      "Previous",
      undefined
    ];
  var arrow = function (icon) {
    return Belt_Option.mapWithDefault(icon, null, (function (icon) {
                  return React.createElement(FaIcon.make, {
                              classes: "fas " + icon
                            });
                }));
  };
  return React.createElement("button", {
              className: "block w-full focus:outline-none p-4 text-center border rounded-lg bg-gray-100 hover:bg-gray-200 cursor-pointer",
              onClick: (function (param) {
                  return Curry._1(setState, (function (state) {
                                return {
                                        selectedLevelId: CoursesCurriculum__Level.id(level),
                                        showLevelZero: state.showLevelZero,
                                        latestSubmissions: state.latestSubmissions,
                                        statusOfTargets: state.statusOfTargets,
                                        notice: state.notice
                                      };
                              }));
                })
            }, arrow(match[0]), React.createElement("span", {
                  className: "mx-2 hidden md:inline"
                }, match[1]), React.createElement("span", {
                  className: "mx-2 inline md:hidden"
                }, match[2]), arrow(match[3]));
}

function quickNavigationLinks(levels, selectedLevel, setState) {
  var previous = CoursesCurriculum__Level.previous(levels, selectedLevel);
  var next = CoursesCurriculum__Level.next(levels, selectedLevel);
  var tmp;
  if (previous !== undefined) {
    var previousLevel = previous;
    tmp = next !== undefined ? [
        React.createElement("div", {
              key: "previous",
              className: "w-1/2 mr-2"
            }, navigationLink(/* Previous */-43878313, previousLevel, setState)),
        React.createElement("div", {
              key: "next",
              className: "w-1/2 ml-2"
            }, navigationLink(/* Next */870035731, next, setState))
      ] : React.createElement("div", {
            className: "w-full"
          }, navigationLink(/* Previous */-43878313, previousLevel, setState));
  } else {
    tmp = next !== undefined ? React.createElement("div", {
            className: "w-full"
          }, navigationLink(/* Next */870035731, next, setState)) : null;
  }
  return React.createElement("div", undefined, React.createElement("hr", {
                  className: "my-6"
                }), React.createElement("div", {
                  className: "container mx-auto max-w-3xl flex px-3 lg:px-0"
                }, tmp));
}

function CoursesCurriculum(Props) {
  var course = Props.course;
  var levels = Props.levels;
  var targetGroups = Props.targetGroups;
  var targets = Props.targets;
  var submissions = Props.submissions;
  var team = Props.team;
  var coaches = Props.coaches;
  var users = Props.users;
  var evaluationCriteria = Props.evaluationCriteria;
  var preview = Props.preview;
  var accessLockedLevels = Props.accessLockedLevels;
  var url = ReasonReactRouter.useUrl(undefined, /* () */0);
  var match = url.path;
  var selectedTarget;
  if (match && match[0] === "targets") {
    var match$1 = match[1];
    selectedTarget = match$1 ? Belt_Option.map(StringUtils.paramToId(match$1[0]), (function (targetId) {
              return ListUtils.unsafeFind((function (t) {
                            return CoursesCurriculum__Target.id(t) === targetId;
                          }), "Could not find selectedTarget with ID " + targetId, targets);
            })) : undefined;
  } else {
    selectedTarget = undefined;
  }
  var levelZero = ListUtils.findOpt((function (l) {
          return CoursesCurriculum__Level.number(l) === 0;
        }), levels);
  var teamLevelId = CoursesCurriculum__Team.levelId(team);
  var teamLevel = ListUtils.unsafeFind((function (l) {
          return CoursesCurriculum__Level.id(l) === teamLevelId;
        }), "Could not find teamLevel with ID " + teamLevelId, levels);
  var targetLevelId;
  if (selectedTarget !== undefined) {
    var targetGroupId = CoursesCurriculum__Target.targetGroupId(selectedTarget);
    var targetGroup = ListUtils.unsafeFind((function (t) {
            return CoursesCurriculum__TargetGroup.id(t) === targetGroupId;
          }), "Could not find targetGroup with ID " + targetGroupId, targetGroups);
    targetLevelId = CoursesCurriculum__TargetGroup.levelId(targetGroup);
  } else {
    targetLevelId = undefined;
  }
  var computeTargetStatus = function (param) {
    return CoursesCurriculum__TargetStatus.compute(preview, team, course, levels, targetGroups, targets, param);
  };
  var initialRender = React.useRef(true);
  var match$2 = React.useState((function () {
          var statusOfTargets = computeTargetStatus(submissions);
          var tmp;
          var exit = 0;
          if (preview && !(targetLevelId !== undefined || levelZero !== undefined)) {
            tmp = CoursesCurriculum__Level.id(CoursesCurriculum__Level.first(levels));
          } else {
            exit = 1;
          }
          if (exit === 1) {
            if (targetLevelId !== undefined) {
              var targetLevelId$1 = targetLevelId;
              tmp = levelZero !== undefined && CoursesCurriculum__Level.id(levelZero) === targetLevelId$1 ? teamLevelId : targetLevelId$1;
            } else {
              tmp = teamLevelId;
            }
          }
          return {
                  selectedLevelId: tmp,
                  showLevelZero: levelZero !== undefined && targetLevelId !== undefined ? CoursesCurriculum__Level.id(levelZero) === targetLevelId : false,
                  latestSubmissions: submissions,
                  statusOfTargets: statusOfTargets,
                  notice: computeNotice(levels, teamLevel, targetGroups, targets, statusOfTargets, course, team, preview, accessLockedLevels)
                };
        }));
  var setState = match$2[1];
  var state = match$2[0];
  var match$3 = state.showLevelZero;
  var currentLevelId = levelZero !== undefined && match$3 ? CoursesCurriculum__Level.id(levelZero) : state.selectedLevelId;
  var currentLevel = ListUtils.unsafeFind((function (l) {
          return CoursesCurriculum__Level.id(l) === currentLevelId;
        }), "Could not find currentLevel with id " + currentLevelId, levels);
  var selectedLevel = ListUtils.unsafeFind((function (l) {
          return CoursesCurriculum__Level.id(l) === state.selectedLevelId;
        }), "Could not find selectedLevel with id " + state.selectedLevelId, levels);
  React.useEffect((function () {
          if (initialRender.current) {
            initialRender.current = false;
          } else {
            var newStatusOfTargets = computeTargetStatus(state.latestSubmissions);
            Curry._1(setState, (function (state) {
                    return {
                            selectedLevelId: state.selectedLevelId,
                            showLevelZero: state.showLevelZero,
                            latestSubmissions: state.latestSubmissions,
                            statusOfTargets: newStatusOfTargets,
                            notice: computeNotice(levels, teamLevel, targetGroups, targets, newStatusOfTargets, course, team, preview, accessLockedLevels)
                          };
                  }));
          }
          return ;
        }), [state.latestSubmissions]);
  var targetGroupsInLevel = List.filter((function (tg) {
            return CoursesCurriculum__TargetGroup.levelId(tg) === currentLevelId;
          }))(targetGroups);
  var tmp;
  if (selectedTarget !== undefined) {
    var target = selectedTarget;
    var targetStatus = ListUtils.unsafeFind((function (ts) {
            return CoursesCurriculum__TargetStatus.targetId(ts) === CoursesCurriculum__Target.id(target);
          }), "Could not find targetStatus for selectedTarget with ID " + CoursesCurriculum__Target.id(target), state.statusOfTargets);
    tmp = React.createElement(CoursesCurriculum__Overlay.make, {
          target: target,
          course: course,
          targetStatus: targetStatus,
          addSubmissionCB: (function (param) {
              return addSubmission(setState, param);
            }),
          targets: targets,
          statusOfTargets: state.statusOfTargets,
          users: users,
          evaluationCriteria: evaluationCriteria,
          coaches: coaches,
          preview: preview
        });
  } else {
    tmp = null;
  }
  var _anyOtherNotice = state.notice;
  var tmp$1;
  var exit = 0;
  if (typeof _anyOtherNotice === "number" && _anyOtherNotice === 4) {
    tmp$1 = null;
  } else {
    exit = 1;
  }
  if (exit === 1) {
    tmp$1 = React.createElement("div", {
          className: "relative"
        }, React.createElement(CoursesCurriculum__LevelSelector.make, {
              levels: levels,
              teamLevel: teamLevel,
              selectedLevel: selectedLevel,
              setSelectedLevelId: (function (selectedLevelId) {
                  return Curry._1(setState, (function (state) {
                                return {
                                        selectedLevelId: selectedLevelId,
                                        showLevelZero: state.showLevelZero,
                                        latestSubmissions: state.latestSubmissions,
                                        statusOfTargets: state.statusOfTargets,
                                        notice: state.notice
                                      };
                              }));
                }),
              showLevelZero: state.showLevelZero,
              setShowLevelZero: (function (showLevelZero) {
                  return Curry._1(setState, (function (state) {
                                return {
                                        selectedLevelId: state.selectedLevelId,
                                        showLevelZero: showLevelZero,
                                        latestSubmissions: state.latestSubmissions,
                                        statusOfTargets: state.statusOfTargets,
                                        notice: state.notice
                                      };
                              }));
                }),
              levelZero: levelZero
            }), CoursesCurriculum__Level.isLocked(currentLevel) && accessLockedLevels ? React.createElement("div", {
                className: "text-center p-3 mt-5 border rounded-lg bg-blue-100 max-w-3xl mx-auto"
              }, "This level is still locked for students, and will be unlocked on ", React.createElement("strong", undefined, CoursesCurriculum__Level.unlockDateString(currentLevel)), ".") : null, CoursesCurriculum__Level.isUnlocked(currentLevel) || accessLockedLevels ? $$Array.of_list(List.map((function (targetGroup) {
                      return renderTargetGroup(targetGroup, targets, state.statusOfTargets);
                    }), CoursesCurriculum__TargetGroup.sort(targetGroupsInLevel))) : handleLockedLevel(currentLevel));
  }
  return React.createElement("div", {
              className: "bg-gray-100 pt-11 pb-8 -mt-7"
            }, tmp, React.createElement(CoursesCurriculum__NoticeManager.make, {
                  notice: state.notice,
                  course: course
                }), tmp$1, state.showLevelZero ? null : quickNavigationLinks(levels, selectedLevel, setState));
}

var make = CoursesCurriculum;

exports.levelLockedImage = levelLockedImage;
exports.str = str;
exports.targetStatusClasses = targetStatusClasses;
exports.rendertarget = rendertarget;
exports.renderTargetGroup = renderTargetGroup;
exports.addSubmission = addSubmission;
exports.handleLockedLevel = handleLockedLevel;
exports.statusOfMilestoneTargets = statusOfMilestoneTargets;
exports.isLevelComplete = isLevelComplete;
exports.computeLevelUp = computeLevelUp;
exports.computeNotice = computeNotice;
exports.navigationLink = navigationLink;
exports.quickNavigationLinks = quickNavigationLinks;
exports.make = make;
/*  Not a pure module */
