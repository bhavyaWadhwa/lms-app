// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FaIcon = require("../../../shared/components/FaIcon.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var $$Notification = require("../../../shared/Notification.bs.js");

function str(prim) {
  return prim;
}

var ppx_printed_query = "mutation UndoSubmissionMutation($targetId: ID!)  {\nundoSubmission(targetId: $targetId)  {\nsuccess  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "undoSubmission");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type UndoSubmissionPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field undoSubmission on type Mutation is missing");
  }
  return {
          undoSubmission: tmp
        };
}

function make(targetId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "targetId",
                    targetId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var targetId = variables.targetId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "targetId",
                    targetId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(targetId, param) {
  return Js_dict.fromArray([/* tuple */[
                  "targetId",
                  targetId
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, targetId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "targetId",
                      targetId
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var DeleteSubmissionQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function handleClick(targetId, setStatus, undoSubmissionCB, $$event) {
  $$event.preventDefault();
  if (window.confirm("Are you sure you want to delete this submission?")) {
    Curry._1(setStatus, (function (param) {
            return /* Undoing */1;
          }));
    (function (eta) {
              return GraphqlQuery.sendQuery(undefined, eta);
            })(make(targetId, /* () */0)).then((function (response) {
              if (response.undoSubmission.success) {
                Curry._1(undoSubmissionCB, /* () */0);
              } else {
                $$Notification.notice("Could not undo submission", "Please reload the page and check the status of the submission before trying again.");
                Curry._1(setStatus, (function (param) {
                        return /* Errored */2;
                      }));
              }
              return Promise.resolve(/* () */0);
            })).catch((function (param) {
            $$Notification.error("Unexpected Error", "An unexpected error occured, and our team has been notified about this. Please reload the page before trying again.");
            Curry._1(setStatus, (function (param) {
                    return /* Errored */2;
                  }));
            return Promise.resolve(/* () */0);
          }));
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function buttonContents(status) {
  switch (status) {
    case /* Pending */0 :
        return React.createElement("span", undefined, React.createElement(FaIcon.make, {
                        classes: "fas fa-undo mr-2"
                      }), React.createElement("span", {
                        className: "hidden md:inline"
                      }, "Undo submission"), React.createElement("span", {
                        className: "md:hidden"
                      }, "Undo"));
    case /* Undoing */1 :
        return React.createElement("span", undefined, React.createElement(FaIcon.make, {
                        classes: "fas fa-spinner fa-spin mr-2"
                      }), "Undoing...");
    case /* Errored */2 :
        return React.createElement("span", undefined, React.createElement(FaIcon.make, {
                        classes: "fas fa-exclamation-triangle mr-2"
                      }), "Error!");
    
  }
}

function isDisabled(status) {
  return status !== 0;
}

function buttonClasses(status) {
  var tmp;
  switch (status) {
    case /* Pending */0 :
        tmp = "pointer";
        break;
    case /* Undoing */1 :
        tmp = "wait";
        break;
    case /* Errored */2 :
        tmp = "not-allowed";
        break;
    
  }
  return "btn btn-small btn-danger cursor-" + tmp;
}

function CoursesCurriculum__UndoButton(Props) {
  var undoSubmissionCB = Props.undoSubmissionCB;
  var targetId = Props.targetId;
  var match = React.useState((function () {
          return /* Pending */0;
        }));
  var setStatus = match[1];
  var status = match[0];
  return React.createElement("button", {
              className: buttonClasses(status),
              title: "Delete this submission",
              disabled: status !== 0,
              onClick: (function (param) {
                  return handleClick(targetId, setStatus, undoSubmissionCB, param);
                })
            }, buttonContents(status));
}

var make$1 = CoursesCurriculum__UndoButton;

exports.str = str;
exports.DeleteSubmissionQuery = DeleteSubmissionQuery;
exports.handleClick = handleClick;
exports.buttonContents = buttonContents;
exports.isDisabled = isDisabled;
exports.buttonClasses = buttonClasses;
exports.make = make$1;
/* react Not a pure module */
