// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var GradeLabel = require("../../../shared/types/GradeLabel.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var EvaluationCriterion = require("../../../shared/types/EvaluationCriterion.bs.js");
var CoursesCurriculum__Grading = require("../types/CoursesCurriculum__Grading.bs.js");

((require("./CoursesCurriculum__GradeBar.scss")));

function str(prim) {
  return prim;
}

function gradeDescription(gradeLabels, grading) {
  var match = CoursesCurriculum__Grading.grade(grading);
  return React.createElement("div", {
              className: "grade-bar__criterion-name"
            }, CoursesCurriculum__Grading.criterionName(grading), match !== undefined ? React.createElement("span", undefined, ": ", React.createElement("span", {
                        className: "grade-bar__grade-label"
                      }, GradeLabel.labelFor(gradeLabels, match))) : null);
}

function maxGrade(gradeLabels) {
  return String(GradeLabel.maxGrade(gradeLabels));
}

function gradePillClasses(gradeReceived, passGrade, pillGrade, callBack) {
  var resultModifier;
  if (gradeReceived !== undefined) {
    var grade = Caml_option.valFromOption(gradeReceived);
    resultModifier = Caml_obj.caml_greaterthan(pillGrade, grade) ? "" : (
        Caml_obj.caml_lessthan(grade, passGrade) ? " grade-bar__grade-pill--failed" : " grade-bar__grade-pill--passed"
      );
  } else {
    resultModifier = "";
  }
  var selectableModifier = callBack !== undefined ? (
      Caml_obj.caml_lessthan(pillGrade, passGrade) ? " grade-bar__grade-pill--selectable-fail cursor-pointer" : " grade-bar__grade-pill--selectable-pass cursor-pointer"
    ) : "";
  return "grade-bar__grade-pill cursor-auto" + (resultModifier + selectableModifier);
}

function gradeBarHeader(grading, gradeLabels) {
  var match = CoursesCurriculum__Grading.grade(grading);
  return React.createElement("div", {
              className: "grade-bar__header pb-1"
            }, gradeDescription(gradeLabels, grading), match !== undefined ? React.createElement("div", {
                    className: "grade-bar__grade font-semibold"
                  }, String(match) + ("/" + String(GradeLabel.maxGrade(gradeLabels)))) : null);
}

function handleClick(gradeSelectCB, grading, newGrade) {
  if (gradeSelectCB !== undefined) {
    return Curry._1(gradeSelectCB, CoursesCurriculum__Grading.updateGrade(newGrade, grading));
  } else {
    return /* () */0;
  }
}

function gradeBarPill(gradeLabel, grading, gradeSelectCB, passGrade) {
  var myGrade = GradeLabel.grade(gradeLabel);
  return React.createElement("div", {
              key: String(myGrade),
              className: gradePillClasses(CoursesCurriculum__Grading.grade(grading), passGrade, myGrade, gradeSelectCB),
              role: "button",
              title: GradeLabel.label(gradeLabel),
              onClick: (function (_event) {
                  return handleClick(gradeSelectCB, grading, myGrade);
                })
            }, gradeSelectCB !== undefined ? String(myGrade) : null);
}

function gradeBarPanel(grading, gradeLabels, gradeSelectCB, passGrade) {
  return React.createElement("div", {
              className: "grade-bar__track",
              role: "group"
            }, $$Array.of_list(List.map((function (gradeLabel) {
                        return gradeBarPill(gradeLabel, grading, gradeSelectCB, passGrade);
                      }), gradeLabels)));
}

function CoursesCurriculum__GradeBar(Props) {
  var grading = Props.grading;
  var gradeSelectCB = Props.gradeSelectCB;
  var criterion = Props.criterion;
  var gradeLabels = $$Array.to_list(EvaluationCriterion.gradesAndLabels(criterion));
  var passGrade = EvaluationCriterion.passGrade(criterion);
  return React.createElement("div", {
              className: "flex-column",
              role: "toolbar"
            }, gradeBarHeader(grading, gradeLabels), gradeBarPanel(grading, gradeLabels, gradeSelectCB, passGrade));
}

var make = CoursesCurriculum__GradeBar;

exports.str = str;
exports.gradeDescription = gradeDescription;
exports.maxGrade = maxGrade;
exports.gradePillClasses = gradePillClasses;
exports.gradeBarHeader = gradeBarHeader;
exports.handleClick = handleClick;
exports.gradeBarPill = gradeBarPill;
exports.gradeBarPanel = gradeBarPanel;
exports.make = make;
/*  Not a pure module */
