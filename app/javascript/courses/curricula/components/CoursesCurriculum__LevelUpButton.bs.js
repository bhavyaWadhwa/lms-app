// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FaIcon = require("../../../shared/components/FaIcon.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var CoursesCurriculum__Course = require("../types/CoursesCurriculum__Course.bs.js");

function str(prim) {
  return prim;
}

var ppx_printed_query = "mutation LevelUpMutation($courseId: ID!)  {\nlevelUp(courseId: $courseId)  {\nsuccess  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "levelUp");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type LevelUpPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field levelUp on type Mutation is missing");
  }
  return {
          levelUp: tmp
        };
}

function make(courseId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "courseId",
                    courseId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var courseId = variables.courseId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "courseId",
                    courseId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(courseId, param) {
  return Js_dict.fromArray([/* tuple */[
                  "courseId",
                  courseId
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, courseId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "courseId",
                      courseId
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var LevelUpQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function handleSubmitButton(saving) {
  var submitButtonText = function (title, iconClasses) {
    return React.createElement("span", undefined, React.createElement(FaIcon.make, {
                    classes: iconClasses + " mr-2"
                  }), title);
  };
  if (saving) {
    return submitButtonText("Saving", "fas fa-spinner fa-spin");
  } else {
    return submitButtonText("Level Up", "fas fa-flag");
  }
}

function refreshPage(param) {
  window.location.reload();
  return /* () */0;
}

function createLevelUpQuery(course, setSaving, $$event) {
  $$event.preventDefault();
  Curry._1(setSaving, (function (param) {
          return true;
        }));
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make(CoursesCurriculum__Course.id(course), /* () */0)).then((function (response) {
          if (response.levelUp.success) {
            window.location.reload();
          } else {
            Curry._1(setSaving, (function (param) {
                    return false;
                  }));
          }
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function CoursesCurriculum__LevelUpButton(Props) {
  var course = Props.course;
  var match = React.useState((function () {
          return false;
        }));
  var setSaving = match[1];
  var saving = match[0];
  return React.createElement("button", {
              className: "btn btn-success btn-large w-full md:w-4/6 mt-4",
              disabled: saving,
              onClick: (function (param) {
                  return createLevelUpQuery(course, setSaving, param);
                })
            }, handleSubmitButton(saving));
}

var make$1 = CoursesCurriculum__LevelUpButton;

exports.str = str;
exports.LevelUpQuery = LevelUpQuery;
exports.handleSubmitButton = handleSubmitButton;
exports.refreshPage = refreshPage;
exports.createLevelUpQuery = createLevelUpQuery;
exports.make = make$1;
/* react Not a pure module */
