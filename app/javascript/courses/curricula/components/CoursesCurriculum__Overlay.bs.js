// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Icon = require("../../../shared/Icon.bs.js");
var Link = require("../../../shared/components/Link.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FaIcon = require("../../../shared/components/FaIcon.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var ListUtils = require("../../../shared/utils/ListUtils.bs.js");
var ScrollLock = require("../../../shared/utils/ScrollLock.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var OptionUtils = require("../../../shared/utils/OptionUtils.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.js");
var CoursesCurriculum__Quiz = require("./CoursesCurriculum__Quiz.bs.js");
var CoursesCurriculum__User = require("../types/CoursesCurriculum__User.bs.js");
var CoursesCurriculum__Learn = require("./CoursesCurriculum__Learn.bs.js");
var CoursesCurriculum__Course = require("../types/CoursesCurriculum__Course.bs.js");
var CoursesCurriculum__Target = require("../types/CoursesCurriculum__Target.bs.js");
var CoursesCurriculum__Discuss = require("./CoursesCurriculum__Discuss.bs.js");
var CoursesCurriculum__AutoVerify = require("./CoursesCurriculum__AutoVerify.bs.js");
var CoursesCurriculum__Submission = require("../types/CoursesCurriculum__Submission.bs.js");
var CoursesCurriculum__TargetStatus = require("../types/CoursesCurriculum__TargetStatus.bs.js");
var CoursesCurriculum__TargetDetails = require("../types/CoursesCurriculum__TargetDetails.bs.js");
var CoursesCurriculum__LatestSubmission = require("../types/CoursesCurriculum__LatestSubmission.bs.js");
var CoursesCurriculum__SubmissionBuilder = require("./CoursesCurriculum__SubmissionBuilder.bs.js");
var CoursesCurriculum__CompletionInstructions = require("./CoursesCurriculum__CompletionInstructions.bs.js");
var CoursesCurriculum__SubmissionsAndFeedback = require("./CoursesCurriculum__SubmissionsAndFeedback.bs.js");

var UnexpectedSubmissionStatus = Caml_exceptions.create("CoursesCurriculum__Overlay.UnexpectedSubmissionStatus");

((require("./CoursesCurriculum__Overlay.css")));

function str(prim) {
  return prim;
}

var initialState = {
  targetDetails: undefined,
  tab: /* Learn */0
};

function reducer(state, action) {
  if (typeof action === "number") {
    return {
            targetDetails: undefined,
            tab: state.tab
          };
  } else {
    switch (action.tag | 0) {
      case /* Select */0 :
          return {
                  targetDetails: state.targetDetails,
                  tab: action[0]
                };
      case /* SetTargetDetails */1 :
          return {
                  targetDetails: action[0],
                  tab: state.tab
                };
      case /* AddSubmission */2 :
          if (action[0]) {
            return {
                    targetDetails: OptionUtils.map(CoursesCurriculum__TargetDetails.clearPendingUserIds, state.targetDetails),
                    tab: state.tab
                  };
          } else {
            return state;
          }
      
    }
  }
}

function closeOverlay(course) {
  return ReasonReactRouter.push("/courses/" + (CoursesCurriculum__Course.id(course) + "/curriculum"));
}

function loadTargetDetails(target, send, param) {
  fetch("/targets/" + (CoursesCurriculum__Target.id(target) + "/details_v2")).then((function (prim) {
            return prim.json();
          })).then((function (json) {
          return Promise.resolve(Curry._1(send, /* SetTargetDetails */Block.__(1, [CoursesCurriculum__TargetDetails.decode(json)])));
        }));
  return ;
}

function completionTypeToString(completionType, targetStatus) {
  var match = CoursesCurriculum__TargetStatus.status(targetStatus);
  if (typeof match === "number") {
    if (match !== 0) {
      if (completionType < 2) {
        return "Submissions & Feedback";
      }
      
    } else {
      switch (completionType) {
        case /* Evaluated */0 :
            return "Complete";
        case /* TakeQuiz */1 :
            return "Take Quiz";
        case /* LinkToComplete */2 :
            return "Visit Link to Complete";
        case /* MarkAsComplete */3 :
            return "Mark as Complete";
        
      }
    }
  } else if (match[0] < 2 && completionType < 2) {
    return "Submissions & Feedback";
  }
  if (typeof match === "number") {
    return "Completed";
  } else {
    return "Locked";
  }
}

function tabToString(targetStatus, tab) {
  if (typeof tab === "number") {
    if (tab !== 0) {
      return "Discuss";
    } else {
      return "Learn";
    }
  } else {
    return completionTypeToString(tab[0], targetStatus);
  }
}

function selectableTabs(targetDetails) {
  if (ListUtils.isNotEmpty(CoursesCurriculum__TargetDetails.communities(targetDetails))) {
    return /* :: */[
            /* Learn */0,
            /* :: */[
              /* Discuss */1,
              /* [] */0
            ]
          ];
  } else {
    return /* :: */[
            /* Learn */0,
            /* [] */0
          ];
  }
}

function tabClasses(selection, tab) {
  return "course-overlay__body-tab-item p-2 md:px-3 md:py-4 flex w-full items-center justify-center text-sm -mx-px font-semibold" + (
          Caml_obj.caml_equal(tab, selection) ? " course-overlay__body-tab-item--selected" : " bg-gray-100 hover:text-primary-400 hover:bg-gray-200 cursor-pointer"
        );
}

function scrollCompleteButtonIntoViewEventually(param) {
  setTimeout((function (param) {
          var element = document.getElementById("auto-verify-target");
          if (element == null) {
            Rollbar.error("Could not find the 'Complete' button to scroll to.");
            return /* () */0;
          } else {
            element.scrollIntoView();
            element.className = "mt-4 complete-button-selected";
            return /* () */0;
          }
        }), 50);
  return /* () */0;
}

function handleTablink(send, _event) {
  Curry._1(send, /* Select */Block.__(0, [/* Learn */0]));
  return scrollCompleteButtonIntoViewEventually(/* () */0);
}

function tabButton(tab, state, send, targetStatus) {
  return React.createElement("span", {
              key: "select-" + tabToString(targetStatus, tab),
              className: tabClasses(tab, state.tab),
              onClick: (function (_e) {
                  return Curry._1(send, /* Select */Block.__(0, [tab]));
                })
            }, tabToString(targetStatus, tab));
}

function tabLink(tab, state, send, targetStatus) {
  return React.createElement("span", {
              className: tabClasses(tab, state.tab),
              onClick: (function (param) {
                  Curry._1(send, /* Select */Block.__(0, [/* Learn */0]));
                  return scrollCompleteButtonIntoViewEventually(/* () */0);
                })
            }, tabToString(targetStatus, tab));
}

function tabOptions(state, send, targetDetails, targetStatus) {
  var completionType = CoursesCurriculum__TargetDetails.computeCompletionType(targetDetails);
  var match = CoursesCurriculum__TargetStatus.status(targetStatus);
  return React.createElement("div", {
              className: "flex justify-between max-w-3xl mx-auto -mb-px mt-5 md:mt-7"
            }, $$Array.of_list(List.map((function (selection) {
                        return tabButton(selection, state, send, targetStatus);
                      }), selectableTabs(targetDetails))), typeof match === "number" ? (
                completionType >= 2 ? tabLink(/* Complete */[completionType], state, send, targetStatus) : tabButton(/* Complete */[completionType], state, send, targetStatus)
              ) : (
                match[0] >= 2 || completionType >= 2 || !ListUtils.isNotEmpty(CoursesCurriculum__TargetDetails.submissions(targetDetails)) ? null : tabButton(/* Complete */[completionType], state, send, targetStatus)
              ));
}

function addSubmission(target, state, send, addSubmissionCB, submission) {
  var match = state.targetDetails;
  if (match !== undefined) {
    var newTargetDetails = CoursesCurriculum__TargetDetails.addSubmission(submission, match);
    Curry._1(send, /* SetTargetDetails */Block.__(1, [newTargetDetails]));
  }
  var match$1 = CoursesCurriculum__Submission.status(submission);
  switch (match$1) {
    case /* MarkedAsComplete */0 :
        return Curry._1(addSubmissionCB, CoursesCurriculum__LatestSubmission.make(false, CoursesCurriculum__Target.id(target)));
    case /* Pending */1 :
        return Curry._1(addSubmissionCB, CoursesCurriculum__LatestSubmission.make(true, CoursesCurriculum__Target.id(target)));
    case /* Passed */2 :
        throw [
              UnexpectedSubmissionStatus,
              "CoursesCurriculum__Overlay.addSubmission cannot handle a submsision with status Passed"
            ];
    case /* Failed */3 :
        throw [
              UnexpectedSubmissionStatus,
              "CoursesCurriculum__Overlay.addSubmission cannot handle a submsision with status Failed"
            ];
    
  }
}

function addVerifiedSubmission(target, state, send, addSubmissionCB, submission) {
  var match = state.targetDetails;
  if (match !== undefined) {
    var newTargetDetails = CoursesCurriculum__TargetDetails.addSubmission(submission, match);
    Curry._1(send, /* SetTargetDetails */Block.__(1, [newTargetDetails]));
  }
  return Curry._1(addSubmissionCB, CoursesCurriculum__LatestSubmission.make(false, CoursesCurriculum__Target.id(target)));
}

function targetStatusClass(prefix, targetStatus) {
  return prefix + CoursesCurriculum__TargetStatus.statusToString(targetStatus).toLowerCase();
}

function targetStatusClasses(targetStatus) {
  return "curriculum__target-status bg-white text-xs mt-2 md:mt-0 py-1 px-2 md:px-4 " + targetStatusClass("curriculum__target-status--", targetStatus);
}

function overlayHeaderTitleCardClasses(targetStatus) {
  return "course-overlay__header-title-card relative flex justify-between items-center px-3 py-5 md:p-6 " + targetStatusClass("course-overlay__header-title-card--", targetStatus);
}

function renderLocked(text) {
  return React.createElement("div", {
              className: "mx-auto text-center bg-gray-900 text-white max-w-fc px-4 py-2 text-sm font-semibold relative z-10 rounded-b-lg"
            }, React.createElement("i", {
                  className: "fas fa-lock text-lg"
                }), React.createElement("span", {
                  className: "ml-2"
                }, text));
}

function overlayStatus(course, target, targetStatus, preview) {
  return React.createElement("div", undefined, React.createElement("div", {
                  className: overlayHeaderTitleCardClasses(targetStatus)
                }, React.createElement("button", {
                      className: "course-overlay__close xl:absolute flex flex-col items-center justify-center absolute rounded-t-lg lg:rounded-t-none lg:rounded-b-lg leading-tight px-4 py-1 h-8 lg:h-full cursor-pointer border border-b-0 lg:border-transparent lg:border-t-0 lg:shadow hover:text-gray-900 hover:shadow-md focus:border-gray-300 focus:outline-none focus:shadow-inner " + targetStatusClass("course-overlay__close--", targetStatus),
                      onClick: (function (_e) {
                          return closeOverlay(course);
                        })
                    }, React.createElement(Icon.make, {
                          className: "if i-times-regular text-xl lg:text-2xl mt-1 lg:mt-0"
                        }), React.createElement("span", {
                          className: "text-xs hidden lg:inline-block mt-px"
                        }, "Close")), React.createElement("div", {
                      className: "w-full flex flex-wrap md:flex-no-wrap items-center justify-between relative"
                    }, React.createElement("h1", {
                          className: "text-base leading-snug md:mr-6 md:text-xl"
                        }, CoursesCurriculum__Target.title(target)), React.createElement("div", {
                          className: targetStatusClasses(targetStatus)
                        }, CoursesCurriculum__TargetStatus.statusToString(targetStatus)))), preview ? React.createElement("div", undefined, renderLocked("You are currently looking at a preview of this course.")) : null);
}

function renderLockReason(reason) {
  return renderLocked(CoursesCurriculum__TargetStatus.lockReasonToString(reason));
}

function prerequisitesIncomplete(reason, target, targets, statusOfTargets) {
  var prerequisiteTargetIds = CoursesCurriculum__Target.prerequisiteTargetIds(target);
  var prerequisiteTargets = List.filter((function (target) {
            return List.mem(CoursesCurriculum__Target.id(target), prerequisiteTargetIds);
          }))(targets);
  return React.createElement("div", {
              className: "relative px-3 md:px-0"
            }, renderLocked(CoursesCurriculum__TargetStatus.lockReasonToString(reason)), React.createElement("div", {
                  className: "course-overlay__prerequisite-targets z-10 max-w-3xl mx-auto bg-white text-center rounded-lg overflow-hidden shadow mt-6"
                }, $$Array.of_list(List.map((function (target) {
                            var targetStatus = List.find((function (ts) {
                                    return CoursesCurriculum__TargetStatus.targetId(ts) === CoursesCurriculum__Target.id(target);
                                  }), statusOfTargets);
                            return React.createElement(Link.make, {
                                        href: "/targets/" + CoursesCurriculum__Target.id(target),
                                        ariaLabel: "Select Target " + CoursesCurriculum__Target.id(target),
                                        className: "bg-white border-t px-6 py-4 relative z-10 flex items-center justify-between hover:bg-gray-200 hover:text-primary-500 cursor-pointer",
                                        children: null,
                                        key: CoursesCurriculum__Target.id(target)
                                      }, React.createElement("span", {
                                            className: "font-semibold text-left leading-snug"
                                          }, CoursesCurriculum__Target.title(target)), React.createElement("span", {
                                            className: targetStatusClasses(targetStatus)
                                          }, CoursesCurriculum__TargetStatus.statusToString(targetStatus)));
                          }), prerequisiteTargets))));
}

function handleLocked(target, targets, targetStatus, statusOfTargets) {
  var match = CoursesCurriculum__TargetStatus.status(targetStatus);
  if (typeof match === "number") {
    return null;
  } else {
    var reason = match[0];
    if (reason >= 3) {
      return prerequisitesIncomplete(reason, target, targets, statusOfTargets);
    } else {
      return renderLocked(CoursesCurriculum__TargetStatus.lockReasonToString(reason));
    }
  }
}

function overlayContentClasses(bool) {
  if (bool) {
    return "";
  } else {
    return "hidden";
  }
}

function learnSection(targetDetails, tab) {
  return React.createElement("div", {
              className: tab === /* Learn */0 ? "" : "hidden"
            }, React.createElement(CoursesCurriculum__Learn.make, {
                  targetDetails: targetDetails
                }));
}

function discussSection(target, targetDetails, tab) {
  return React.createElement("div", {
              className: tab === /* Discuss */1 ? "" : "hidden"
            }, React.createElement(CoursesCurriculum__Discuss.make, {
                  targetId: CoursesCurriculum__Target.id(target),
                  communities: CoursesCurriculum__TargetDetails.communities(targetDetails)
                }));
}

function completeSectionClasses(tab, completionType) {
  if (typeof tab === "number" && (tab !== 0 || completionType < 2)) {
    return "hidden";
  } else {
    return "";
  }
}

function completeSection(state, send, target, targetDetails, targetStatus, addSubmissionCB, evaluationCriteria, coaches, users, preview) {
  var completionType = CoursesCurriculum__TargetDetails.computeCompletionType(targetDetails);
  var addVerifiedSubmissionCB = function (param) {
    return addVerifiedSubmission(target, state, send, addSubmissionCB, param);
  };
  var match = CoursesCurriculum__TargetStatus.status(targetStatus);
  var tmp;
  var exit = 0;
  var exit$1 = 0;
  if (typeof match === "number") {
    if (match !== 0) {
      exit$1 = 2;
    } else if (completionType !== 1) {
      if (completionType !== 0) {
        exit = 1;
      } else {
        tmp = [
          React.createElement(CoursesCurriculum__CompletionInstructions.make, {
                targetDetails: targetDetails,
                title: "Instructions",
                key: "completion-instructions"
              }),
          React.createElement(CoursesCurriculum__SubmissionBuilder.make, {
                target: target,
                addSubmissionCB: (function (param) {
                    return addSubmission(target, state, send, addSubmissionCB, param);
                  }),
                preview: preview,
                checklist: CoursesCurriculum__TargetDetails.checklist(targetDetails),
                key: "courses-curriculum-submission-form"
              })
        ];
      }
    } else {
      tmp = [
        React.createElement(CoursesCurriculum__CompletionInstructions.make, {
              targetDetails: targetDetails,
              title: "Instructions",
              key: "completion-instructions"
            }),
        React.createElement(CoursesCurriculum__Quiz.make, {
              target: target,
              targetDetails: targetDetails,
              addSubmissionCB: addVerifiedSubmissionCB,
              preview: preview,
              key: "courses-curriculum-quiz"
            })
      ];
    }
  } else if (match[0] >= 2) {
    exit = 1;
  } else {
    exit$1 = 2;
  }
  if (exit$1 === 2) {
    if (completionType >= 2) {
      exit = 1;
    } else {
      tmp = React.createElement(CoursesCurriculum__SubmissionsAndFeedback.make, {
            targetDetails: targetDetails,
            target: target,
            evaluationCriteria: evaluationCriteria,
            addSubmissionCB: (function (param) {
                return addSubmission(target, state, send, addSubmissionCB, param);
              }),
            targetStatus: targetStatus,
            coaches: coaches,
            users: users,
            preview: preview,
            checklist: CoursesCurriculum__TargetDetails.checklist(targetDetails)
          });
    }
  }
  if (exit === 1) {
    tmp = typeof match === "number" ? React.createElement(CoursesCurriculum__AutoVerify.make, {
            target: target,
            targetDetails: targetDetails,
            targetStatus: targetStatus,
            addSubmissionCB: addVerifiedSubmissionCB,
            preview: preview
          }) : null;
  }
  return React.createElement("div", {
              className: completeSectionClasses(state.tab, completionType)
            }, tmp);
}

function renderPendingStudents(pendingUserIds, users) {
  return React.createElement("div", {
              className: "max-w-3xl mx-auto text-center mt-4"
            }, React.createElement("div", {
                  className: "font-semibold text-md"
                }, "You have team members who are yet to complete this target:"), React.createElement("div", {
                  className: "flex justify-center flex-wrap"
                }, $$Array.of_list(List.map((function (studentId) {
                            var user = ListUtils.unsafeFind((function (u) {
                                    return CoursesCurriculum__User.id(u) === studentId;
                                  }), "Unable to find user with id " + (studentId + "in CoursesCurriculum__Overlay"), users);
                            return React.createElement("div", {
                                        key: CoursesCurriculum__User.id(user),
                                        className: "w-10 h-10 rounded-full border border-yellow-400 flex items-center justify-center overflow-hidden mx-1 shadow-md flex-shrink-0 mt-2",
                                        title: CoursesCurriculum__User.name(user) + " has not completed this target."
                                      }, CoursesCurriculum__User.avatar(user));
                          }), pendingUserIds))));
}

function handlePendingStudents(targetStatus, targetDetails, users) {
  var match = CoursesCurriculum__TargetStatus.status(targetStatus);
  if (targetDetails !== undefined && typeof match === "number" && (match === 2 || match === 1)) {
    var pendingUserIds = CoursesCurriculum__TargetDetails.pendingUserIds(targetDetails);
    if (ListUtils.isNotEmpty(pendingUserIds)) {
      return renderPendingStudents(pendingUserIds, users);
    } else {
      return null;
    }
  } else {
    return null;
  }
}

function performQuickNavigation(send, _event) {
  var match = document.getElementById("target-overlay");
  if (!(match == null)) {
    match.scrollTop = 0.0;
  }
  return Curry._1(send, /* ClearTargetDetails */0);
}

function navigationLink(direction, url, send) {
  var match = direction >= 870035731 ? /* tuple */[
      undefined,
      "Next Target",
      "fa-arrow-right"
    ] : /* tuple */[
      "fa-arrow-left",
      "Previous Target",
      undefined
    ];
  var arrow = function (icon) {
    return Belt_Option.mapWithDefault(icon, null, (function (icon) {
                  return React.createElement(FaIcon.make, {
                              classes: "fas " + icon
                            });
                }));
  };
  return React.createElement(Link.make, {
              href: url,
              className: "block p-2 md:p-4 text-center border rounded-lg bg-gray-100 hover:bg-gray-200",
              onClick: (function (param) {
                  return performQuickNavigation(send, param);
                }),
              children: null
            }, arrow(match[0]), React.createElement("span", {
                  className: "mx-2 hidden md:inline"
                }, match[1]), arrow(match[2]));
}

function scrollOverlayToTop(_event) {
  var element = document.getElementById("target-overlay");
  return Belt_Option.mapWithDefault((element == null) ? undefined : Caml_option.some(element), /* () */0, (function (element) {
                element.scrollTop = 0.0;
                return /* () */0;
              }));
}

function quickNavigationLinks(targetDetails, send) {
  var match = CoursesCurriculum__TargetDetails.navigation(targetDetails);
  return React.createElement("div", {
              className: "pb-6"
            }, React.createElement("hr", {
                  className: "my-6"
                }), React.createElement("div", {
                  className: "container mx-auto max-w-3xl flex px-3 lg:px-0"
                }, React.createElement("div", {
                      className: "w-1/3 mr-2"
                    }, Belt_Option.mapWithDefault(match[0], null, (function (previousUrl) {
                            return navigationLink(/* Previous */-43878313, previousUrl, send);
                          }))), React.createElement("div", {
                      className: "w-1/3 mx-2"
                    }, React.createElement("button", {
                          className: "block w-full focus:outline-none p-2 md:p-4 text-center border rounded-lg bg-gray-100 hover:bg-gray-200",
                          onClick: scrollOverlayToTop
                        }, React.createElement("span", {
                              className: "mx-2 hidden md:inline"
                            }, "Scroll to Top"), React.createElement("span", {
                              className: "mx-2 md:hidden"
                            }, React.createElement("i", {
                                  className: "fas fa-arrow-up"
                                })))), React.createElement("div", {
                      className: "w-1/3 ml-2"
                    }, Belt_Option.mapWithDefault(match[1], null, (function (nextUrl) {
                            return navigationLink(/* Next */870035731, nextUrl, send);
                          })))));
}

function updatePendingUserIdsWhenAddingSubmission(send, target, addSubmissionCB, submission) {
  Curry._1(send, /* AddSubmission */Block.__(2, [CoursesCurriculum__Target.role(target)]));
  return Curry._1(addSubmissionCB, submission);
}

function CoursesCurriculum__Overlay(Props) {
  var target = Props.target;
  var course = Props.course;
  var targetStatus = Props.targetStatus;
  var addSubmissionCB = Props.addSubmissionCB;
  var targets = Props.targets;
  var statusOfTargets = Props.statusOfTargets;
  var users = Props.users;
  var evaluationCriteria = Props.evaluationCriteria;
  var coaches = Props.coaches;
  var preview = Props.preview;
  var match = React.useReducer(reducer, initialState);
  var send = match[1];
  var state = match[0];
  React.useEffect((function () {
          return loadTargetDetails(target, send, /* () */0);
        }), [CoursesCurriculum__Target.id(target)]);
  React.useEffect((function () {
          ScrollLock.activate(/* () */0);
          return (function (param) {
                    return ScrollLock.deactivate(/* () */0);
                  });
        }));
  var match$1 = state.targetDetails;
  var match$2 = state.targetDetails;
  var tmp;
  if (match$2 !== undefined) {
    var targetDetails = match$2;
    var match$3 = state.tab;
    tmp = React.createElement("div", undefined, React.createElement("div", {
              className: "container mx-auto mt-6 md:mt-8 max-w-3xl px-3 lg:px-0"
            }, learnSection(targetDetails, state.tab), discussSection(target, targetDetails, state.tab), completeSection(state, send, target, targetDetails, targetStatus, (function (param) {
                    return updatePendingUserIdsWhenAddingSubmission(send, target, addSubmissionCB, param);
                  }), evaluationCriteria, coaches, users, preview)), typeof match$3 === "number" && match$3 === 0 ? quickNavigationLinks(targetDetails, send) : null);
  } else {
    tmp = React.createElement("div", {
          className: "course-overlay__skeleton-body-container max-w-3xl w-full pb-4 mx-auto"
        }, React.createElement("div", {
              className: "course-overlay__skeleton-body-wrapper mt-8 px-3 lg:px-0"
            }, React.createElement("div", {
                  className: "course-overlay__skeleton-line-placeholder-md mt-4 w-2/4 skeleton-animate"
                }), React.createElement("div", {
                  className: "course-overlay__skeleton-line-placeholder-sm mt-4 skeleton-animate"
                }), React.createElement("div", {
                  className: "course-overlay__skeleton-line-placeholder-sm mt-4 skeleton-animate"
                }), React.createElement("div", {
                  className: "course-overlay__skeleton-line-placeholder-sm mt-4 w-3/4 skeleton-animate"
                }), React.createElement("div", {
                  className: "course-overlay__skeleton-image-placeholder mt-5 skeleton-animate"
                }), React.createElement("div", {
                  className: "course-overlay__skeleton-line-placeholder-sm mt-4 w-2/5 skeleton-animate"
                })), React.createElement("div", {
              className: "course-overlay__skeleton-body-wrapper mt-8 px-3 lg:px-0"
            }, React.createElement("div", {
                  className: "course-overlay__skeleton-line-placeholder-sm mt-4 w-3/4 skeleton-animate"
                }), React.createElement("div", {
                  className: "course-overlay__skeleton-line-placeholder-sm mt-4 skeleton-animate"
                }), React.createElement("div", {
                  className: "course-overlay__skeleton-line-placeholder-sm mt-4 w-3/4 skeleton-animate"
                })));
  }
  return React.createElement("div", {
              className: "fixed z-30 top-0 left-0 w-full h-full overflow-y-scroll bg-white",
              id: "target-overlay"
            }, React.createElement("div", {
                  className: "bg-gray-100 border-b border-gray-400 px-3"
                }, React.createElement("div", {
                      className: "course-overlay__header-container pt-12 lg:pt-0 mx-auto"
                    }, overlayStatus(course, target, targetStatus, preview), handleLocked(target, targets, targetStatus, statusOfTargets), handlePendingStudents(targetStatus, state.targetDetails, users), match$1 !== undefined ? tabOptions(state, send, match$1, targetStatus) : React.createElement("div", {
                            className: "course-overlay__skeleton-head-container max-w-3xl w-full mx-auto"
                          }, React.createElement("div", {
                                className: "course-overlay__skeleton-head-wrapper bg-white h-13 flex items-center justify-between border border-b-0 rounded-t-lg mt-5 md:mt-7"
                              }, React.createElement("div", {
                                    className: "course-overlay__skeleton-line-placeholder-sm w-1/3 mx-8 skeleton-animate"
                                  }), React.createElement("div", {
                                    className: "course-overlay__skeleton-line-placeholder-sm w-1/3 mx-8 skeleton-animate"
                                  }), React.createElement("div", {
                                    className: "course-overlay__skeleton-line-placeholder-sm w-1/3 mx-8 skeleton-animate"
                                  }))))), tmp);
}

var TargetStatus = /* alias */0;

var make = CoursesCurriculum__Overlay;

exports.UnexpectedSubmissionStatus = UnexpectedSubmissionStatus;
exports.TargetStatus = TargetStatus;
exports.str = str;
exports.initialState = initialState;
exports.reducer = reducer;
exports.closeOverlay = closeOverlay;
exports.loadTargetDetails = loadTargetDetails;
exports.completionTypeToString = completionTypeToString;
exports.tabToString = tabToString;
exports.selectableTabs = selectableTabs;
exports.tabClasses = tabClasses;
exports.scrollCompleteButtonIntoViewEventually = scrollCompleteButtonIntoViewEventually;
exports.handleTablink = handleTablink;
exports.tabButton = tabButton;
exports.tabLink = tabLink;
exports.tabOptions = tabOptions;
exports.addSubmission = addSubmission;
exports.addVerifiedSubmission = addVerifiedSubmission;
exports.targetStatusClass = targetStatusClass;
exports.targetStatusClasses = targetStatusClasses;
exports.overlayHeaderTitleCardClasses = overlayHeaderTitleCardClasses;
exports.renderLocked = renderLocked;
exports.overlayStatus = overlayStatus;
exports.renderLockReason = renderLockReason;
exports.prerequisitesIncomplete = prerequisitesIncomplete;
exports.handleLocked = handleLocked;
exports.overlayContentClasses = overlayContentClasses;
exports.learnSection = learnSection;
exports.discussSection = discussSection;
exports.completeSectionClasses = completeSectionClasses;
exports.completeSection = completeSection;
exports.renderPendingStudents = renderPendingStudents;
exports.handlePendingStudents = handlePendingStudents;
exports.performQuickNavigation = performQuickNavigation;
exports.navigationLink = navigationLink;
exports.scrollOverlayToTop = scrollOverlayToTop;
exports.quickNavigationLinks = quickNavigationLinks;
exports.updatePendingUserIdsWhenAddingSubmission = updatePendingUserIdsWhenAddingSubmission;
exports.make = make;
/*  Not a pure module */
