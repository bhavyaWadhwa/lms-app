// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var React = require("react");
var Random = require("bs-platform/lib/js/random.js");
var ListUtils = require("../../../shared/utils/ListUtils.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var $$Notification = require("../../../shared/Notification.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var AuthenticityToken = require("../../../shared/utils/AuthenticityToken.bs.js");

var FormNotFound = Caml_exceptions.create("CoursesCurriculum__FileForm.FormNotFound");

var UnexpectedResponse = Caml_exceptions.create("CoursesCurriculum__FileForm.UnexpectedResponse");

function str(prim) {
  return prim;
}

var defaultTitle = "Choose file to upload";

function reducer(state, action) {
  if (typeof action === "number") {
    return {
            formId: state.formId,
            filename: defaultTitle,
            errors: /* [] */0
          };
  } else if (action.tag) {
    return {
            formId: state.formId,
            filename: action[0],
            errors: action[1]
          };
  } else {
    return {
            formId: state.formId,
            filename: action[0],
            errors: /* [] */0
          };
  }
}

function handleResponseJSON(filename, send, attachFileCB, json) {
  var id = Json_decode.field("id", Json_decode.string, json);
  Curry._2(attachFileCB, id, filename);
  return Curry._1(send, /* ResetForm */0);
}

function handleApiError(match) {
  if (Caml_exceptions.caml_is_extension(match) && match[0] === UnexpectedResponse) {
    return match[1];
  }
  
}

function uploadFile(filename, send, attachFileCB, formData) {
  fetch("/timeline_event_files/", Fetch.RequestInit.make(/* Post */2, undefined, Caml_option.some(formData), undefined, undefined, undefined, /* SameOrigin */1, undefined, undefined, undefined, undefined, undefined)(/* () */0)).then((function (response) {
              if (response.ok) {
                return response.json();
              } else {
                return Promise.reject([
                            UnexpectedResponse,
                            response.status
                          ]);
              }
            })).then((function (json) {
            return Promise.resolve(handleResponseJSON(filename, send, attachFileCB, json));
          })).catch((function (error) {
          var match = handleApiError(error);
          return Promise.resolve(match !== undefined ? $$Notification.error("Error " + String(match), "Please reload the page and try again.") : $$Notification.error("Something went wrong!", "Our team has been notified of this error. Please reload the page and try again."));
        }));
  return /* () */0;
}

function submitForm(filename, formId, send, addFileAttachmentCB) {
  var element = document.getElementById(formId);
  if (element == null) {
    throw [
          FormNotFound,
          formId
        ];
  } else {
    return uploadFile(filename, send, addFileAttachmentCB, new FormData(element));
  }
}

function attachFile(state, send, attachingCB, attachFileCB, preview, $$event) {
  if (preview) {
    return $$Notification.notice("Preview Mode", "You cannot attach files.");
  } else {
    var files = $$event.target.files;
    if (files.length !== 0) {
      var file = Caml_array.caml_array_get(files, 0);
      var errors = file.size > 5242880 ? /* :: */[
          "The maximum file size is 5 MB.",
          /* [] */0
        ] : /* [] */0;
      if (ListUtils.isEmpty(errors)) {
        var filename = file.name;
        Curry._1(attachingCB, true);
        Curry._1(send, /* AttachFile */Block.__(0, [filename]));
        return submitForm(filename, state.formId, send, attachFileCB);
      } else {
        return Curry._1(send, /* SelectFile */Block.__(1, [
                      file.name,
                      errors
                    ]));
      }
    } else {
      return /* () */0;
    }
  }
}

function CoursesCurriculum__FileForm(Props) {
  var attachFileCB = Props.attachFileCB;
  var attachingCB = Props.attachingCB;
  var preview = Props.preview;
  var match = React.useReducer(reducer, {
        formId: String(Random.$$int(99999)),
        filename: defaultTitle,
        errors: /* [] */0
      });
  var send = match[1];
  var state = match[0];
  return React.createElement("div", undefined, React.createElement("form", {
                  className: "flex items-center flex-wrap",
                  id: state.formId
                }, React.createElement("input", {
                      name: "authenticity_token",
                      type: "hidden",
                      value: AuthenticityToken.fromHead(/* () */0)
                    }), React.createElement("input", {
                      className: "hidden",
                      id: "attachment_file",
                      multiple: false,
                      name: "file",
                      required: true,
                      type: "file",
                      onChange: (function (param) {
                          return attachFile(state, send, attachingCB, attachFileCB, preview, param);
                        })
                    }), React.createElement("label", {
                      className: "text-center cursor-pointer truncate bg-gray-200 border border-dashed border-gray-600 flex px-4 py-5 items-center font-semibold rounded text-sm hover:text-primary-600 hover:bg-primary-100 hover:border-primary-500 flex-grow",
                      htmlFor: "attachment_file"
                    }, React.createElement("span", {
                          className: "w-full"
                        }, React.createElement("i", {
                              className: "fas fa-upload mr-2 text-lg"
                            }), React.createElement("span", {
                              className: "truncate"
                            }, state.filename)))), $$Array.of_list(List.map((function (error) {
                        return React.createElement("div", {
                                    key: error,
                                    className: "mt-2 text-red-700 text-sm"
                                  }, React.createElement("i", {
                                        className: "fas fa-exclamation-circle mr-2"
                                      }), React.createElement("span", undefined, error));
                      }), state.errors)), ListUtils.isEmpty(state.errors) ? null : React.createElement("div", {
                    className: "px-4 mt-2 text-sm"
                  }, "Please choose another file for upload."));
}

var make = CoursesCurriculum__FileForm;

exports.FormNotFound = FormNotFound;
exports.UnexpectedResponse = UnexpectedResponse;
exports.str = str;
exports.defaultTitle = defaultTitle;
exports.reducer = reducer;
exports.handleResponseJSON = handleResponseJSON;
exports.handleApiError = handleApiError;
exports.uploadFile = uploadFile;
exports.submitForm = submitForm;
exports.attachFile = attachFile;
exports.make = make;
/* react Not a pure module */
