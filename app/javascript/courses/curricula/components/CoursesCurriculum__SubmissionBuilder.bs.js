// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FaIcon = require("../../../shared/components/FaIcon.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var DateFns = require("../../../shared/utils/DateFns.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Tooltip = require("../../../shared/components/Tooltip.bs.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var DisablingCover = require("../../../shared/components/DisablingCover.bs.js");
var SubmissionChecklistItem = require("../../review/types/SubmissionChecklistItem.bs.js");
var CoursesCurriculum__Target = require("../types/CoursesCurriculum__Target.bs.js");
var CoursesCurriculum__Submission = require("../types/CoursesCurriculum__Submission.bs.js");
var CoursesCurriculum__ChecklistItem = require("../types/CoursesCurriculum__ChecklistItem.bs.js");
var CoursesCurriculum__SubmissionItem = require("./CoursesCurriculum__SubmissionItem.bs.js");

function str(prim) {
  return prim;
}

function buttonContents(formState, checklist) {
  var icon = formState >= 2 ? React.createElement(FaIcon.make, {
          classes: "fas fa-cloud-upload-alt mr-2"
        }) : React.createElement(FaIcon.make, {
          classes: "fas fa-spinner fa-pulse mr-2"
        });
  var text;
  switch (formState) {
    case /* Attaching */0 :
        text = "Attaching...";
        break;
    case /* Saving */1 :
        text = "Submitting...";
        break;
    case /* Ready */2 :
        text = ArrayUtils.isEmpty(checklist) ? "Complete" : "Submit";
        break;
    
  }
  return React.createElement("span", undefined, icon, text);
}

function initialState(checklist) {
  return {
          formState: /* Ready */2,
          checklist: CoursesCurriculum__ChecklistItem.fromTargetChecklistItem(checklist)
        };
}

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* SetAttaching */0 :
          return {
                  formState: /* Attaching */0,
                  checklist: state.checklist
                };
      case /* SetSaving */1 :
          return {
                  formState: /* Saving */1,
                  checklist: state.checklist
                };
      case /* SetReady */2 :
          return {
                  formState: /* Ready */2,
                  checklist: state.checklist
                };
      
    }
  } else {
    return {
            formState: /* Ready */2,
            checklist: action[0]
          };
  }
}

function isBusy(formState) {
  return formState < 2;
}

var ppx_printed_query = "mutation CreateSubmissionMutation($targetId: ID!, $checklist: JSON!, $fileIds: [ID!]!)  {\ncreateSubmission(targetId: $targetId, checklist: $checklist, fileIds: $fileIds)  {\nsubmission  {\nid  \ncreatedAt  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createSubmission");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "submission");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      if (match$2 !== undefined) {
        tmp$1 = undefined;
      } else {
        var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
        var match$3 = Js_dict.get(value$4, "id");
        var tmp$2;
        if (match$3 !== undefined) {
          var value$5 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeString(value$5);
          tmp$2 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        } else {
          tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type Submission is missing");
        }
        var match$5 = Js_dict.get(value$4, "createdAt");
        tmp$1 = {
          id: tmp$2,
          createdAt: match$5 !== undefined ? Caml_option.valFromOption(match$5) : Js_exn.raiseError("graphql_ppx: Field createdAt on type Submission is missing")
        };
      }
    } else {
      tmp$1 = undefined;
    }
    tmp = {
      submission: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field createSubmission on type Mutation is missing");
  }
  return {
          createSubmission: tmp
        };
}

function make(targetId, checklist, fileIds, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "targetId",
                    targetId
                  ],
                  /* tuple */[
                    "checklist",
                    checklist
                  ],
                  /* tuple */[
                    "fileIds",
                    fileIds.map((function (prim) {
                            return prim;
                          }))
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var targetId = variables.targetId;
  var checklist = variables.checklist;
  var fileIds = variables.fileIds;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "targetId",
                    targetId
                  ],
                  /* tuple */[
                    "checklist",
                    checklist
                  ],
                  /* tuple */[
                    "fileIds",
                    fileIds.map((function (prim) {
                            return prim;
                          }))
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(targetId, checklist, fileIds, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "targetId",
                  targetId
                ],
                /* tuple */[
                  "checklist",
                  checklist
                ],
                /* tuple */[
                  "fileIds",
                  fileIds.map((function (prim) {
                          return prim;
                        }))
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, targetId, checklist, fileIds, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "targetId",
                      targetId
                    ],
                    /* tuple */[
                      "checklist",
                      checklist
                    ],
                    /* tuple */[
                      "fileIds",
                      fileIds.map((function (prim) {
                              return prim;
                            }))
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var CreateSubmissionQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function isButtonDisabled(state) {
  var match = state.formState;
  if (match < 2) {
    return true;
  } else {
    return !CoursesCurriculum__ChecklistItem.validChecklist(state.checklist);
  }
}

function submit(state, send, target, addSubmissionCB, $$event) {
  $$event.preventDefault();
  Curry._1(send, /* SetSaving */1);
  var fileIds = CoursesCurriculum__ChecklistItem.fileIds(state.checklist);
  var checklist = CoursesCurriculum__ChecklistItem.encodeArray(state.checklist);
  (function (eta) {
            return GraphqlQuery.sendQuery(undefined, eta);
          })(make(CoursesCurriculum__Target.id(target), checklist, fileIds, /* () */0)).then((function (response) {
            var match = response.createSubmission.submission;
            if (match !== undefined) {
              var submission = Caml_option.valFromOption(match);
              var files = CoursesCurriculum__ChecklistItem.makeFiles(state.checklist);
              var submissionChecklist = Json_decode.array((function (param) {
                      return SubmissionChecklistItem.decode(files, param);
                    }), checklist);
              Curry._1(addSubmissionCB, CoursesCurriculum__Submission.make(submission.id, DateFns.decodeISO(submission.createdAt), /* Pending */1, submissionChecklist));
            } else {
              Curry._1(send, /* SetReady */2);
            }
            return Promise.resolve(/* () */0);
          })).catch((function (_error) {
          Curry._1(send, /* SetReady */2);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function updateResult(state, send, index, result) {
  return Curry._1(send, /* UpdateResponse */[CoursesCurriculum__ChecklistItem.updateResultAtIndex(index, result, state.checklist)]);
}

function buttonClasses(checklist) {
  return "flex mt-3 " + (
          ArrayUtils.isEmpty(checklist) ? "justify-center" : "justify-end"
        );
}

function setAttaching(send, bool) {
  return Curry._1(send, bool ? /* SetAttaching */0 : /* SetReady */2);
}

function statusText(formState) {
  switch (formState) {
    case /* Attaching */0 :
        return "Attaching...";
    case /* Saving */1 :
        return "Submitting...";
    case /* Ready */2 :
        return "Submit";
    
  }
}

function tooltipText(preview) {
  if (preview) {
    return React.createElement("span", undefined, "You are accessing the preview mode", React.createElement("br", undefined), "for this course");
  } else {
    return React.createElement("span", undefined, "Please complete all the required", React.createElement("br", undefined), "steps to submit this target");
  }
}

function CoursesCurriculum__SubmissionBuilder(Props) {
  var target = Props.target;
  var addSubmissionCB = Props.addSubmissionCB;
  var preview = Props.preview;
  var checklist = Props.checklist;
  var match = React.useReducer(reducer, {
        formState: /* Ready */2,
        checklist: CoursesCurriculum__ChecklistItem.fromTargetChecklistItem(checklist)
      });
  var send = match[1];
  var state = match[0];
  return React.createElement("div", {
              className: "bg-gray-100 p-4 my-4 border rounded-lg"
            }, React.createElement(DisablingCover.make, {
                  disabled: state.formState < 2,
                  message: statusText(state.formState),
                  children: null
                }, ArrayUtils.isEmpty(state.checklist) ? React.createElement("div", {
                        className: "text-center"
                      }, "This target has no actions. Click submit to complete the target") : $$Array.mapi((function (index, checklistItem) {
                          return React.createElement(CoursesCurriculum__SubmissionItem.make, {
                                      index: index,
                                      checklistItem: checklistItem,
                                      updateResultCB: (function (param) {
                                          return updateResult(state, send, index, param);
                                        }),
                                      attachingCB: (function (param) {
                                          return setAttaching(send, param);
                                        }),
                                      preview: preview,
                                      key: String(index)
                                    });
                        }), state.checklist), React.createElement("div", {
                      className: buttonClasses(state.checklist)
                    }, React.createElement(Tooltip.make, {
                          tip: tooltipText(preview),
                          position: /* Left */847852583,
                          disabled: !isButtonDisabled(state),
                          children: React.createElement("button", {
                                className: "btn btn-primary flex justify-center flex-grow md:flex-grow-0",
                                disabled: isButtonDisabled(state) || preview,
                                onClick: (function (param) {
                                    return submit(state, send, target, addSubmissionCB, param);
                                  })
                              }, buttonContents(state.formState, checklist))
                        }))));
}

var make$1 = CoursesCurriculum__SubmissionBuilder;

exports.str = str;
exports.buttonContents = buttonContents;
exports.initialState = initialState;
exports.reducer = reducer;
exports.isBusy = isBusy;
exports.CreateSubmissionQuery = CreateSubmissionQuery;
exports.isButtonDisabled = isButtonDisabled;
exports.submit = submit;
exports.updateResult = updateResult;
exports.buttonClasses = buttonClasses;
exports.setAttaching = setAttaching;
exports.statusText = statusText;
exports.tooltipText = tooltipText;
exports.make = make$1;
/* react Not a pure module */
