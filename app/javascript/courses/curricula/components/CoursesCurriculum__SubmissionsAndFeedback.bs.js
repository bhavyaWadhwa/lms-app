// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var PfIcon = require("../../../packages/pf-icon/src/PfIcon.bs.js");
var ListUtils = require("../../../shared/utils/ListUtils.bs.js");
var MarkdownBlock = require("../../../shared/components/MarkdownBlock.bs.js");
var EvaluationCriterion = require("../../../shared/types/EvaluationCriterion.bs.js");
var CoursesCurriculum__User = require("../types/CoursesCurriculum__User.bs.js");
var SubmissionChecklistShow = require("../../review/components/SubmissionChecklistShow.bs.js");
var CoursesCurriculum__Coach = require("../types/CoursesCurriculum__Coach.bs.js");
var CoursesCurriculum__Grade = require("../types/CoursesCurriculum__Grade.bs.js");
var CoursesCurriculum__Target = require("../types/CoursesCurriculum__Target.bs.js");
var CoursesCurriculum__Grading = require("../types/CoursesCurriculum__Grading.bs.js");
var CoursesCurriculum__Feedback = require("../types/CoursesCurriculum__Feedback.bs.js");
var CoursesCurriculum__GradeBar = require("./CoursesCurriculum__GradeBar.bs.js");
var CoursesCurriculum__Submission = require("../types/CoursesCurriculum__Submission.bs.js");
var CoursesCurriculum__UndoButton = require("./CoursesCurriculum__UndoButton.bs.js");
var CoursesCurriculum__TargetStatus = require("../types/CoursesCurriculum__TargetStatus.bs.js");
var CoursesCurriculum__TargetDetails = require("../types/CoursesCurriculum__TargetDetails.bs.js");
var CoursesCurriculum__SubmissionBuilder = require("./CoursesCurriculum__SubmissionBuilder.bs.js");

((require("./CoursesCurriculum__SubmissionsAndFeedback.css")));

function str(prim) {
  return prim;
}

function gradeBar(evaluationCriteria, grade) {
  var criterion = ListUtils.findOpt((function (c) {
          return EvaluationCriterion.id(c) === CoursesCurriculum__Grade.evaluationCriterionId(grade);
        }), evaluationCriteria);
  if (criterion !== undefined) {
    var criterion$1 = criterion;
    var criterionId = EvaluationCriterion.id(criterion$1);
    var criterionName = EvaluationCriterion.name(criterion$1);
    var gradeNumber = CoursesCurriculum__Grade.grade(grade);
    var grading = CoursesCurriculum__Grading.make(criterionId, criterionName, gradeNumber);
    return React.createElement("div", {
                key: String(gradeNumber),
                className: "mb-4"
              }, React.createElement(CoursesCurriculum__GradeBar.make, {
                    grading: grading,
                    criterion: criterion$1
                  }));
  } else {
    return null;
  }
}

function statusBar(color, text) {
  var textColor = "text-" + (color + "-500 ");
  var bgColor = "bg-" + (color + "-100 ");
  var icon = color === "green" ? React.createElement("span", undefined, React.createElement("i", {
              className: "fas fa-certificate fa-stack-2x"
            }), React.createElement("i", {
              className: "fas fa-check fa-stack-1x fa-inverse"
            })) : React.createElement("i", {
          className: "fas fa-exclamation-triangle text-3xl text-red-500 mx-1"
        });
  return React.createElement("div", {
              className: "font-semibold p-2 py-4 flex border-t w-full items-center justify-center " + (textColor + bgColor)
            }, React.createElement("span", {
                  className: "fa-stack text-lg mr-1 " + textColor
                }, icon), text);
}

function submissionStatusIcon(passed) {
  var text = passed ? "Passed" : "Failed";
  var color = passed ? "green" : "red";
  return React.createElement("div", {
              className: "max-w-fc"
            }, React.createElement("div", {
                  className: "flex border-2 rounded-lg border-" + (color + "-500 px-4 py-6")
                }, passed ? React.createElement("span", {
                        className: "fa-stack text-green-500 text-lg"
                      }, React.createElement("i", {
                            className: "fas fa-certificate fa-stack-2x"
                          }), React.createElement("i", {
                            className: "fas fa-check fa-stack-1x fa-inverse"
                          })) : React.createElement("i", {
                        className: "fas fa-exclamation-triangle text-3xl text-red-500 mx-1"
                      })), React.createElement("div", {
                  className: "text-center text-" + (color + "-500 font-bold mt-2")
                }, text));
}

function undoSubmissionCB(param) {
  window.location.reload();
  return /* () */0;
}

function gradingSection(grades, evaluationCriteria, gradeBar, passed) {
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "w-full md:hidden"
                }, statusBar(passed ? "green" : "red", passed ? "Passed" : "Failed")), React.createElement("div", {
                  className: "bg-white flex border-t flex-wrap items-center py-4"
                }, React.createElement("div", {
                      className: "w-full md:w-1/2 flex-shrink-0 justify-center hidden md:flex border-l px-6"
                    }, submissionStatusIcon(passed)), React.createElement("div", {
                      className: "w-full md:w-1/2 flex-shrink-0 md:order-first px-4 md:px-6"
                    }, React.createElement("h5", {
                          className: "pb-1 border-b"
                        }, "Grading"), React.createElement("div", {
                          className: "mt-3"
                        }, $$Array.of_list(List.map(Curry.__1(gradeBar), CoursesCurriculum__Grade.sort(evaluationCriteria, grades)))))));
}

function handleAddAnotherSubmission(setShowSubmissionForm, $$event) {
  $$event.preventDefault();
  return Curry._1(setShowSubmissionForm, (function (showSubmissionForm) {
                return !showSubmissionForm;
              }));
}

function submissions(target, targetStatus, targetDetails, evaluationCriteria, coaches, users) {
  var curriedGradeBar = function (param) {
    return gradeBar(evaluationCriteria, param);
  };
  return $$Array.of_list(List.map((function (submission) {
                    var grades = CoursesCurriculum__TargetDetails.grades(CoursesCurriculum__Submission.id(submission), targetDetails);
                    var match = CoursesCurriculum__Submission.status(submission);
                    var tmp;
                    switch (match) {
                      case /* MarkedAsComplete */0 :
                          tmp = statusBar("green", "Marked as complete");
                          break;
                      case /* Pending */1 :
                          var match$1 = CoursesCurriculum__TargetStatus.status(targetStatus);
                          tmp = React.createElement("div", {
                                className: "bg-white p-3 md:px-6 md:py-4 flex border-t justify-between items-center w-full"
                              }, React.createElement("div", {
                                    className: "flex items-center justify-center font-semibold text-sm pl-2 pr-3 py-1 bg-orange-100 text-orange-600 rounded"
                                  }, React.createElement("span", {
                                        className: "fa-stack text-orange-400 mr-2 flex-shrink-0"
                                      }, React.createElement("i", {
                                            className: "fas fa-circle fa-stack-2x"
                                          }), React.createElement("i", {
                                            className: "fas fa-hourglass-half fa-stack-1x fa-inverse"
                                          })), "Review pending"), typeof match$1 === "number" && match$1 === 1 ? React.createElement(CoursesCurriculum__UndoButton.make, {
                                      undoSubmissionCB: undoSubmissionCB,
                                      targetId: CoursesCurriculum__Target.id(target)
                                    }) : null);
                          break;
                      case /* Passed */2 :
                          tmp = gradingSection(grades, evaluationCriteria, curriedGradeBar, true);
                          break;
                      case /* Failed */3 :
                          tmp = gradingSection(grades, evaluationCriteria, curriedGradeBar, false);
                          break;
                      
                    }
                    return React.createElement("div", {
                                key: CoursesCurriculum__Submission.id(submission),
                                "aria-label": "Details about your submission on " + CoursesCurriculum__Submission.createdAtPretty(submission),
                                className: "mt-4 pb-4 relative curriculum__submission-feedback-container"
                              }, React.createElement("div", {
                                    className: "text-xs font-semibold bg-gray-100 inline-block px-3 py-1 ml-2 rounded-t-lg border-t border-r border-l text-gray-800 leading-tight"
                                  }, "Submitted on " + CoursesCurriculum__Submission.createdAtPretty(submission)), React.createElement("div", {
                                    className: "rounded-lg bg-gray-100 border shadow-md overflow-hidden"
                                  }, React.createElement("div", {
                                        className: "px-4 py-4 md:px-6 md:pt-6 md:pb-5"
                                      }, React.createElement(SubmissionChecklistShow.make, {
                                            checklist: CoursesCurriculum__Submission.checklist(submission),
                                            updateChecklistCB: undefined,
                                            pending: CoursesCurriculum__Submission.pending(submission)
                                          })), tmp, $$Array.of_list(List.map((function (feedback) {
                                              var coach = ListUtils.findOpt((function (c) {
                                                      return CoursesCurriculum__Coach.id(c) === CoursesCurriculum__Feedback.coachId(feedback);
                                                    }), coaches);
                                              var user;
                                              if (coach !== undefined) {
                                                var coach$1 = coach;
                                                user = ListUtils.findOpt((function (up) {
                                                        return CoursesCurriculum__User.id(up) === CoursesCurriculum__Coach.userId(coach$1);
                                                      }), users);
                                              } else {
                                                user = undefined;
                                              }
                                              var match;
                                              if (user !== undefined) {
                                                var user$1 = user;
                                                match = /* tuple */[
                                                  CoursesCurriculum__User.name(user$1),
                                                  CoursesCurriculum__User.title(user$1),
                                                  CoursesCurriculum__User.avatar(user$1)
                                                ];
                                              } else {
                                                match = /* tuple */[
                                                  "Unknown Coach",
                                                  undefined,
                                                  React.createElement("div", {
                                                        className: "w-10 h-10 rounded-full bg-gray-400 inline-block flex items-center justify-center"
                                                      }, React.createElement("i", {
                                                            className: "fas fa-user-times"
                                                          }))
                                                ];
                                              }
                                              var coachTitle = match[1];
                                              return React.createElement("div", {
                                                          key: CoursesCurriculum__Feedback.id(feedback),
                                                          className: "bg-white border-t p-4 md:p-6"
                                                        }, React.createElement("div", {
                                                              className: "flex items-center"
                                                            }, React.createElement("div", {
                                                                  className: "flex-shrink-0 w-12 h-12 bg-gray-300 rounded-full overflow-hidden mr-3 object-cover"
                                                                }, match[2]), React.createElement("div", undefined, React.createElement("p", {
                                                                      className: "text-xs leading-tight"
                                                                    }, "Feedback from:"), React.createElement("div", undefined, React.createElement("h4", {
                                                                          className: "font-semibold text-base leading-tight block md:inline-flex self-end"
                                                                        }, match[0]), coachTitle !== undefined ? React.createElement("span", {
                                                                            className: "block md:inline-flex text-xs text-gray-800 md:ml-2 leading-tight self-end"
                                                                          }, "(" + (coachTitle + ")")) : null))), React.createElement(MarkdownBlock.make, {
                                                              markdown: CoursesCurriculum__Feedback.feedback(feedback),
                                                              className: "md:ml-15",
                                                              profile: /* Permissive */2
                                                            }));
                                            }), List.filter((function (feedback) {
                                                    return CoursesCurriculum__Feedback.submissionId(feedback) === CoursesCurriculum__Submission.id(submission);
                                                  }))(CoursesCurriculum__TargetDetails.feedback(targetDetails))))));
                  }), CoursesCurriculum__Submission.sort(CoursesCurriculum__TargetDetails.submissions(targetDetails))));
}

function addSubmission(setShowSubmissionForm, addSubmissionCB, submission) {
  Curry._1(setShowSubmissionForm, (function (param) {
          return false;
        }));
  return Curry._1(addSubmissionCB, submission);
}

function CoursesCurriculum__SubmissionsAndFeedback(Props) {
  var targetDetails = Props.targetDetails;
  var target = Props.target;
  var evaluationCriteria = Props.evaluationCriteria;
  var addSubmissionCB = Props.addSubmissionCB;
  var targetStatus = Props.targetStatus;
  var coaches = Props.coaches;
  var users = Props.users;
  var preview = Props.preview;
  var checklist = Props.checklist;
  var match = React.useState((function () {
          return false;
        }));
  var setShowSubmissionForm = match[1];
  var showSubmissionForm = match[0];
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "flex justify-between items-end border-b pb-2"
                }, React.createElement("h4", {
                      className: "text-base md:text-xl"
                    }, "Your Submissions"), CoursesCurriculum__TargetStatus.canSubmit(CoursesCurriculum__Target.resubmittable(target), targetStatus) ? (
                    showSubmissionForm ? React.createElement("button", {
                            className: "btn btn-subtle",
                            onClick: (function (param) {
                                return handleAddAnotherSubmission(setShowSubmissionForm, param);
                              })
                          }, React.createElement(PfIcon.make, {
                                className: "if i-times-regular text-lg mr-2"
                              }), React.createElement("span", {
                                className: "hidden md:inline"
                              }, "Cancel"), React.createElement("span", {
                                className: "md:hidden"
                              }, "Cancel")) : React.createElement("button", {
                            className: "btn btn-primary",
                            onClick: (function (param) {
                                return handleAddAnotherSubmission(setShowSubmissionForm, param);
                              })
                          }, React.createElement(PfIcon.make, {
                                className: "if i-plus-regular text-lg mr-2"
                              }), React.createElement("span", {
                                className: "hidden md:inline"
                              }, "Add another submission"), React.createElement("span", {
                                className: "md:hidden"
                              }, "Add another"))
                  ) : null), showSubmissionForm ? React.createElement(CoursesCurriculum__SubmissionBuilder.make, {
                    target: target,
                    addSubmissionCB: (function (param) {
                        Curry._1(setShowSubmissionForm, (function (param) {
                                return false;
                              }));
                        return Curry._1(addSubmissionCB, param);
                      }),
                    preview: preview,
                    checklist: checklist
                  }) : submissions(target, targetStatus, targetDetails, evaluationCriteria, coaches, users));
}

var make = CoursesCurriculum__SubmissionsAndFeedback;

exports.str = str;
exports.gradeBar = gradeBar;
exports.statusBar = statusBar;
exports.submissionStatusIcon = submissionStatusIcon;
exports.undoSubmissionCB = undoSubmissionCB;
exports.gradingSection = gradingSection;
exports.handleAddAnotherSubmission = handleAddAnotherSubmission;
exports.submissions = submissions;
exports.addSubmission = addSubmission;
exports.make = make;
/*  Not a pure module */
