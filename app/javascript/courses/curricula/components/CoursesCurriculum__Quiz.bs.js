// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FaIcon = require("../../../shared/components/FaIcon.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var DateFns = require("../../../shared/utils/DateFns.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var MarkdownBlock = require("../../../shared/components/MarkdownBlock.bs.js");
var SubmissionChecklistItem = require("../../review/types/SubmissionChecklistItem.bs.js");
var CoursesCurriculum__Target = require("../types/CoursesCurriculum__Target.bs.js");
var CoursesCurriculum__Submission = require("../types/CoursesCurriculum__Submission.bs.js");
var CoursesCurriculum__QuizQuestion = require("../types/CoursesCurriculum__QuizQuestion.bs.js");
var CoursesCurriculum__TargetDetails = require("../types/CoursesCurriculum__TargetDetails.bs.js");

((require("./CoursesCurriculum__Quiz.css")));

function str(prim) {
  return prim;
}

var ppx_printed_query = "mutation CreateQuizSubmissionMutation($targetId: ID!, $answerIds: [ID!]!)  {\ncreateQuizSubmission(targetId: $targetId, answerIds: $answerIds)  {\nsubmission  {\nid  \ncreatedAt  \nchecklist  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createQuizSubmission");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "submission");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      if (match$2 !== undefined) {
        tmp$1 = undefined;
      } else {
        var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
        var match$3 = Js_dict.get(value$4, "id");
        var tmp$2;
        if (match$3 !== undefined) {
          var value$5 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeString(value$5);
          tmp$2 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        } else {
          tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type Submission is missing");
        }
        var match$5 = Js_dict.get(value$4, "createdAt");
        var match$6 = Js_dict.get(value$4, "checklist");
        tmp$1 = {
          id: tmp$2,
          createdAt: match$5 !== undefined ? Caml_option.valFromOption(match$5) : Js_exn.raiseError("graphql_ppx: Field createdAt on type Submission is missing"),
          checklist: match$6 !== undefined ? Caml_option.valFromOption(match$6) : Js_exn.raiseError("graphql_ppx: Field checklist on type Submission is missing")
        };
      }
    } else {
      tmp$1 = undefined;
    }
    tmp = {
      submission: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field createQuizSubmission on type Mutation is missing");
  }
  return {
          createQuizSubmission: tmp
        };
}

function make(targetId, answerIds, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "targetId",
                    targetId
                  ],
                  /* tuple */[
                    "answerIds",
                    answerIds.map((function (prim) {
                            return prim;
                          }))
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var targetId = variables.targetId;
  var answerIds = variables.answerIds;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "targetId",
                    targetId
                  ],
                  /* tuple */[
                    "answerIds",
                    answerIds.map((function (prim) {
                            return prim;
                          }))
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(targetId, answerIds, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "targetId",
                  targetId
                ],
                /* tuple */[
                  "answerIds",
                  answerIds.map((function (prim) {
                          return prim;
                        }))
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, targetId, answerIds, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "targetId",
                      targetId
                    ],
                    /* tuple */[
                      "answerIds",
                      answerIds.map((function (prim) {
                              return prim;
                            }))
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var CreateQuizSubmissionQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function createQuizSubmission(target, selectedAnswersIds, setSaving, addSubmissionCB) {
  Curry._1(setSaving, (function (param) {
          return true;
        }));
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make(CoursesCurriculum__Target.id(target), $$Array.of_list(selectedAnswersIds), /* () */0)).then((function (response) {
          var match = response.createQuizSubmission.submission;
          if (match !== undefined) {
            var submission = Caml_option.valFromOption(match);
            var partial_arg = [];
            var checklist = Json_decode.array((function (param) {
                    return SubmissionChecklistItem.decode(partial_arg, param);
                  }), submission.checklist);
            Curry._1(addSubmissionCB, CoursesCurriculum__Submission.make(submission.id, DateFns.decodeISO(submission.createdAt), /* MarkedAsComplete */0, checklist));
          } else {
            Curry._1(setSaving, (function (param) {
                    return false;
                  }));
          }
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function answerOptionClasses(answerOption, selectedAnswer) {
  var defaultClasses = "quiz-root__answer bg-white flex items-center shadow border border-transparent rounded p-3 mt-3 cursor-pointer ";
  if (selectedAnswer !== undefined && Caml_obj.caml_equal(Caml_option.valFromOption(selectedAnswer), answerOption)) {
    return "quiz-root__answer bg-white flex items-center shadow border border-transparent rounded p-3 mt-3 cursor-pointer bg-primary-100 border-primary-500 text-primary-500 shadow-md quiz-root__answer-selected ";
  } else {
    return defaultClasses;
  }
}

function iconClasses(answerOption, selectedAnswer) {
  if (selectedAnswer !== undefined && Caml_obj.caml_equal(Caml_option.valFromOption(selectedAnswer), answerOption)) {
    return "quiz-root__answer-option-icon far fa-check-circle text-lg text-primary-500";
  } else {
    return "quiz-root__answer-option-icon far fa-check-circle text-lg text-gray-500";
  }
}

function handleSubmit(answer, target, selectedAnswersIds, setSaving, addSubmissionCB, $$event) {
  $$event.preventDefault();
  var answerIds = List.append(/* :: */[
        CoursesCurriculum__QuizQuestion.answerId(answer),
        /* [] */0
      ], selectedAnswersIds);
  return createQuizSubmission(target, answerIds, setSaving, addSubmissionCB);
}

function CoursesCurriculum__Quiz(Props) {
  var target = Props.target;
  var targetDetails = Props.targetDetails;
  var addSubmissionCB = Props.addSubmissionCB;
  var preview = Props.preview;
  var quizQuestions = CoursesCurriculum__TargetDetails.quizQuestions(targetDetails);
  var match = React.useState((function () {
          return false;
        }));
  var setSaving = match[1];
  var match$1 = React.useState((function () {
          return List.hd(quizQuestions);
        }));
  var setSelectedQuestion = match$1[1];
  var selectedQuestion = match$1[0];
  var match$2 = React.useState((function () {
          return ;
        }));
  var setSelectedAnswer = match$2[1];
  var selectedAnswer = match$2[0];
  var match$3 = React.useState((function () {
          return /* [] */0;
        }));
  var setSelectedAnswersIds = match$3[1];
  var selectedAnswersIds = match$3[0];
  var tmp;
  if (selectedAnswer !== undefined) {
    var answer = selectedAnswer;
    var tmp$1;
    if (CoursesCurriculum__QuizQuestion.isLastQuestion(quizQuestions, selectedQuestion)) {
      tmp$1 = React.createElement("button", {
            className: "btn btn-primary",
            disabled: match[0] || preview,
            onClick: (function (param) {
                return handleSubmit(answer, target, selectedAnswersIds, setSaving, addSubmissionCB, param);
              })
          }, "Submit Quiz");
    } else {
      var nextQuestion = CoursesCurriculum__QuizQuestion.nextQuestion(quizQuestions, selectedQuestion);
      tmp$1 = React.createElement("button", {
            className: "btn btn-primary",
            onClick: (function (param) {
                Curry._1(setSelectedQuestion, (function (param) {
                        return nextQuestion;
                      }));
                Curry._1(setSelectedAnswersIds, (function (param) {
                        return List.append(/* :: */[
                                    CoursesCurriculum__QuizQuestion.answerId(answer),
                                    /* [] */0
                                  ], selectedAnswersIds);
                      }));
                return Curry._1(setSelectedAnswer, (function (param) {
                              return ;
                            }));
              })
          }, "Next Question");
    }
    tmp = React.createElement("div", {
          className: "quiz-root__answer-submit-section text-center py-4 border-t border-gray-400 fixed z-10 left-0 right-0 bottom-0 w-full"
        }, tmp$1);
  } else {
    tmp = null;
  }
  return React.createElement("div", {
              className: "bg-gray-100 rounded overflow-hidden relative mb-18 mt-4"
            }, React.createElement("div", {
                  className: "p-2 md:p-5"
                }, React.createElement("span", {
                      className: "font-semibold text-xs block uppercase text-gray-600"
                    }, "Question #", String(CoursesCurriculum__QuizQuestion.index(selectedQuestion) + 1 | 0)), React.createElement(MarkdownBlock.make, {
                      markdown: CoursesCurriculum__QuizQuestion.question(selectedQuestion),
                      className: "font-semibold text-lg md:text-xl",
                      profile: /* Permissive */2
                    }), React.createElement("div", {
                      className: "pt-2"
                    }, $$Array.of_list(List.map((function (answerOption) {
                                return React.createElement("div", {
                                            key: CoursesCurriculum__QuizQuestion.answerId(answerOption),
                                            className: answerOptionClasses(answerOption, selectedAnswer),
                                            onClick: (function (param) {
                                                return Curry._1(setSelectedAnswer, (function (param) {
                                                              return answerOption;
                                                            }));
                                              })
                                          }, React.createElement(FaIcon.make, {
                                                classes: iconClasses(answerOption, selectedAnswer)
                                              }), React.createElement(MarkdownBlock.make, {
                                                markdown: CoursesCurriculum__QuizQuestion.answerValue(answerOption),
                                                className: "overflow-auto ml-2 w-full",
                                                profile: /* Permissive */2
                                              }));
                              }), CoursesCurriculum__QuizQuestion.answerOptions(selectedQuestion))))), tmp);
}

var make$1 = CoursesCurriculum__Quiz;

exports.str = str;
exports.CreateQuizSubmissionQuery = CreateQuizSubmissionQuery;
exports.createQuizSubmission = createQuizSubmission;
exports.answerOptionClasses = answerOptionClasses;
exports.iconClasses = iconClasses;
exports.handleSubmit = handleSubmit;
exports.make = make$1;
/*  Not a pure module */
