// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FaIcon = require("../../../shared/components/FaIcon.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var EmailUtils = require("../../../shared/utils/EmailUtils.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var OptionUtils = require("../../../shared/utils/OptionUtils.bs.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");

function str(prim) {
  return prim;
}

var ppx_printed_query = "mutation CreateApplicantMutation($courseId: ID!, $email: String!, $name: String!)  {\ncreateApplicant(courseId: $courseId, email: $email, name: $name)  {\nsuccess  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createApplicant");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type CreateApplicantPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field createApplicant on type Mutation is missing");
  }
  return {
          createApplicant: tmp
        };
}

function make(courseId, email, name, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "courseId",
                    courseId
                  ],
                  /* tuple */[
                    "email",
                    email
                  ],
                  /* tuple */[
                    "name",
                    name
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var courseId = variables.courseId;
  var email = variables.email;
  var name = variables.name;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "courseId",
                    courseId
                  ],
                  /* tuple */[
                    "email",
                    email
                  ],
                  /* tuple */[
                    "name",
                    name
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(courseId, email, name, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "courseId",
                  courseId
                ],
                /* tuple */[
                  "email",
                  email
                ],
                /* tuple */[
                  "name",
                  name
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, courseId, email, name, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "courseId",
                      courseId
                    ],
                    /* tuple */[
                      "email",
                      email
                    ],
                    /* tuple */[
                      "name",
                      name
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var CreateApplicantQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function createApplicant(courseId, email, name, setSaving, setViewEmailSent, $$event) {
  $$event.preventDefault();
  Curry._1(setSaving, (function (param) {
          return true;
        }));
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make(courseId, email, name, /* () */0)).then((function (response) {
          if (response.createApplicant.success) {
            Curry._1(setViewEmailSent, /* () */0);
          } else {
            Curry._1(setSaving, (function (param) {
                    return false;
                  }));
          }
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function isInvalidEmail(email) {
  return EmailUtils.isInvalid(false, email);
}

function saveDisabled(email, name, saving) {
  if (EmailUtils.isInvalid(false, email) || saving) {
    return true;
  } else {
    return name === "";
  }
}

function buttonText(email, name, saving) {
  var match = email === "";
  var match$1 = EmailUtils.isInvalid(false, email);
  var match$2 = name === "";
  if (saving) {
    return "Saving";
  } else if (match) {
    return "Enter your Email";
  } else if (match$1) {
    return "Enter a valid Email";
  } else if (match$2) {
    return "Enter your full name";
  } else {
    return "Apply";
  }
}

function CoursesApply__Form(Props) {
  var courseName = Props.courseName;
  var courseId = Props.courseId;
  var setViewEmailSent = Props.setViewEmailSent;
  var email = Props.email;
  var name = Props.name;
  var match = React.useState((function () {
          return OptionUtils.$$default("", email);
        }));
  var setEmail = match[1];
  var email$1 = match[0];
  var match$1 = React.useState((function () {
          return OptionUtils.$$default("", name);
        }));
  var setName = match$1[1];
  var name$1 = match$1[0];
  var match$2 = React.useState((function () {
          return false;
        }));
  var setSaving = match$2[1];
  var saving = match$2[0];
  return React.createElement("div", {
              className: "flex flex-col"
            }, React.createElement("h4", {
                  className: "font-bold"
                }, "Enroll to " + (courseName + " course")), React.createElement("div", {
                  className: "w-full"
                }, React.createElement("div", {
                      className: "mt-4"
                    }, React.createElement("label", {
                          className: "inline-block tracking-wide text-xs font-semibold",
                          htmlFor: "email"
                        }, "Email"), React.createElement("input", {
                          className: "appearance-none h-10 mt-1 block w-full border border-gray-400 rounded py-2 px-4 text-sm bg-gray-100 hover:bg-gray-200 focus:outline-none focus:bg-white focus:border-primary-400",
                          id: "email",
                          disabled: saving,
                          maxLength: 128,
                          placeholder: "johnDoe@example.com",
                          type: "text",
                          value: email$1,
                          onChange: (function ($$event) {
                              return Curry._1(setEmail, $$event.target.value);
                            })
                        })), React.createElement("div", {
                      className: "mt-4"
                    }, React.createElement("label", {
                          className: "inline-block tracking-wide text-xs font-semibold",
                          htmlFor: "name"
                        }, "Name"), React.createElement("input", {
                          className: "appearance-none h-10 mt-1 block w-full border border-gray-400 rounded py-2 px-4 text-sm bg-gray-100 hover:bg-gray-200 focus:outline-none focus:bg-white focus:border-primary-400",
                          id: "name",
                          disabled: saving,
                          maxLength: 128,
                          placeholder: "John Doe",
                          type: "text",
                          value: name$1,
                          onChange: (function ($$event) {
                              return Curry._1(setName, $$event.target.value);
                            })
                        }))), React.createElement("button", {
                  className: "btn btn-primary btn-large text-center w-full mt-6",
                  disabled: saveDisabled(email$1, name$1, saving),
                  onClick: (function (param) {
                      return createApplicant(courseId, email$1, name$1, setSaving, setViewEmailSent, param);
                    })
                }, saving ? React.createElement(FaIcon.make, {
                        classes: "fas fa-spinner fa-spin mr-2"
                      }) : null, React.createElement("span", undefined, buttonText(email$1, name$1, saving))));
}

var make$1 = CoursesApply__Form;

exports.str = str;
exports.CreateApplicantQuery = CreateApplicantQuery;
exports.createApplicant = createApplicant;
exports.isInvalidEmail = isInvalidEmail;
exports.saveDisabled = saveDisabled;
exports.buttonText = buttonText;
exports.make = make$1;
/* react Not a pure module */
