// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var CoursesReport__Overview = require("./CoursesReport__Overview.bs.js");
var CoursesReport__StudentOverview = require("../types/CoursesReport__StudentOverview.bs.js");
var CoursesReport__SubmissionsList = require("./CoursesReport__SubmissionsList.bs.js");

((require("./CoursesReport.css")));

function str(prim) {
  return prim;
}

function buttonClasses(selected) {
  return "w-1/2 md:w-auto py-2 px-3 md:px-6 font-semibold text-sm focus:outline-none " + (
          selected ? "bg-primary-100 shadow-inner text-primary-500" : "bg-white shadow-md hover:shadow hover:text-primary-500 hover:bg-gray-100"
        );
}

function reducer(state, action) {
  if (typeof action === "number") {
    if (action === /* SelectOverviewTab */0) {
      return {
              selectedTab: /* Overview */629062105,
              overviewData: state.overviewData,
              submissionsData: state.submissionsData,
              submissionsFilter: state.submissionsFilter,
              sortDirection: state.sortDirection
            };
    } else {
      return {
              selectedTab: /* Submissions */-885832697,
              overviewData: state.overviewData,
              submissionsData: state.submissionsData,
              submissionsFilter: state.submissionsFilter,
              sortDirection: state.sortDirection
            };
    }
  } else {
    switch (action.tag | 0) {
      case /* SaveOverviewData */0 :
          return {
                  selectedTab: state.selectedTab,
                  overviewData: action[0],
                  submissionsData: state.submissionsData,
                  submissionsFilter: state.submissionsFilter,
                  sortDirection: state.sortDirection
                };
      case /* SaveSubmissions */1 :
          return {
                  selectedTab: state.selectedTab,
                  overviewData: state.overviewData,
                  submissionsData: action[0],
                  submissionsFilter: state.submissionsFilter,
                  sortDirection: state.sortDirection
                };
      case /* UpdateLevelFilter */2 :
          var init = state.submissionsFilter;
          return {
                  selectedTab: state.selectedTab,
                  overviewData: state.overviewData,
                  submissionsData: state.submissionsData,
                  submissionsFilter: {
                    selectedLevel: action[0],
                    selectedStatus: init.selectedStatus
                  },
                  sortDirection: state.sortDirection
                };
      case /* UpdateStatusFilter */3 :
          var init$1 = state.submissionsFilter;
          return {
                  selectedTab: state.selectedTab,
                  overviewData: state.overviewData,
                  submissionsData: state.submissionsData,
                  submissionsFilter: {
                    selectedLevel: init$1.selectedLevel,
                    selectedStatus: action[0]
                  },
                  sortDirection: state.sortDirection
                };
      case /* UpdateSortDirection */4 :
          return {
                  selectedTab: state.selectedTab,
                  overviewData: state.overviewData,
                  submissionsData: state.submissionsData,
                  submissionsFilter: state.submissionsFilter,
                  sortDirection: action[0]
                };
      
    }
  }
}

var ppx_printed_query = "query StudentReportOverviewQuery($studentId: ID!)  {\nstudentDetails(studentId: $studentId)  {\nevaluationCriteria  {\nid  \nname  \nmaxGrade  \npassGrade  \n}\n\nteam  {\nid  \nname  \nlevelId  \ndroppedOutAt  \naccessEndsAt  \nstudents  {\nid  \nname  \ntitle  \navatarUrl  \n}\n\ncoachUserIds  \n}\n\ntotalTargets  \ntargetsCompleted  \ncompletedLevelIds  \nquizScores  \naverageGrades  {\nevaluationCriterionId  \naverageGrade  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "studentDetails");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "evaluationCriteria");
    var match$2 = Js_dict.get(value$2, "team");
    var tmp$1;
    if (match$2 !== undefined) {
      var value$3 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$2)));
      var match$3 = Js_dict.get(value$3, "id");
      var tmp$2;
      if (match$3 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$3);
        var match$4 = Js_json.decodeString(value$4);
        tmp$2 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
      } else {
        tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type Team is missing");
      }
      var match$5 = Js_dict.get(value$3, "name");
      var tmp$3;
      if (match$5 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$5);
        var match$6 = Js_json.decodeString(value$5);
        tmp$3 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
      } else {
        tmp$3 = Js_exn.raiseError("graphql_ppx: Field name on type Team is missing");
      }
      var match$7 = Js_dict.get(value$3, "levelId");
      var tmp$4;
      if (match$7 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$7);
        var match$8 = Js_json.decodeString(value$6);
        tmp$4 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$4 = Js_exn.raiseError("graphql_ppx: Field levelId on type Team is missing");
      }
      var match$9 = Js_dict.get(value$3, "droppedOutAt");
      var tmp$5;
      if (match$9 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$9);
        var match$10 = Js_json.decodeNull(value$7);
        tmp$5 = match$10 !== undefined ? undefined : Caml_option.some(value$7);
      } else {
        tmp$5 = undefined;
      }
      var match$11 = Js_dict.get(value$3, "accessEndsAt");
      var tmp$6;
      if (match$11 !== undefined) {
        var value$8 = Caml_option.valFromOption(match$11);
        var match$12 = Js_json.decodeNull(value$8);
        tmp$6 = match$12 !== undefined ? undefined : Caml_option.some(value$8);
      } else {
        tmp$6 = undefined;
      }
      var match$13 = Js_dict.get(value$3, "students");
      var match$14 = Js_dict.get(value$3, "coachUserIds");
      tmp$1 = {
        id: tmp$2,
        name: tmp$3,
        levelId: tmp$4,
        droppedOutAt: tmp$5,
        accessEndsAt: tmp$6,
        students: match$13 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$13))).map((function (value) {
                  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                  var match = Js_dict.get(value$1, "id");
                  var tmp;
                  if (match !== undefined) {
                    var value$2 = Caml_option.valFromOption(match);
                    var match$1 = Js_json.decodeString(value$2);
                    tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field id on type Student is missing");
                  }
                  var match$2 = Js_dict.get(value$1, "name");
                  var tmp$1;
                  if (match$2 !== undefined) {
                    var value$3 = Caml_option.valFromOption(match$2);
                    var match$3 = Js_json.decodeString(value$3);
                    tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  } else {
                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type Student is missing");
                  }
                  var match$4 = Js_dict.get(value$1, "title");
                  var tmp$2;
                  if (match$4 !== undefined) {
                    var value$4 = Caml_option.valFromOption(match$4);
                    var match$5 = Js_json.decodeString(value$4);
                    tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                  } else {
                    tmp$2 = Js_exn.raiseError("graphql_ppx: Field title on type Student is missing");
                  }
                  var match$6 = Js_dict.get(value$1, "avatarUrl");
                  var tmp$3;
                  if (match$6 !== undefined) {
                    var value$5 = Caml_option.valFromOption(match$6);
                    var match$7 = Js_json.decodeNull(value$5);
                    if (match$7 !== undefined) {
                      tmp$3 = undefined;
                    } else {
                      var match$8 = Js_json.decodeString(value$5);
                      tmp$3 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                    }
                  } else {
                    tmp$3 = undefined;
                  }
                  return {
                          id: tmp,
                          name: tmp$1,
                          title: tmp$2,
                          avatarUrl: tmp$3
                        };
                })) : Js_exn.raiseError("graphql_ppx: Field students on type Team is missing"),
        coachUserIds: match$14 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$14))).map((function (value) {
                  var match = Js_json.decodeString(value);
                  if (match !== undefined) {
                    return match;
                  } else {
                    return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                  }
                })) : Js_exn.raiseError("graphql_ppx: Field coachUserIds on type Team is missing")
      };
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field team on type StudentDetails is missing");
    }
    var match$15 = Js_dict.get(value$2, "totalTargets");
    var tmp$7;
    if (match$15 !== undefined) {
      var value$9 = Caml_option.valFromOption(match$15);
      var match$16 = Js_json.decodeNumber(value$9);
      tmp$7 = match$16 !== undefined ? match$16 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$9));
    } else {
      tmp$7 = Js_exn.raiseError("graphql_ppx: Field totalTargets on type StudentDetails is missing");
    }
    var match$17 = Js_dict.get(value$2, "targetsCompleted");
    var tmp$8;
    if (match$17 !== undefined) {
      var value$10 = Caml_option.valFromOption(match$17);
      var match$18 = Js_json.decodeNumber(value$10);
      tmp$8 = match$18 !== undefined ? match$18 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$10));
    } else {
      tmp$8 = Js_exn.raiseError("graphql_ppx: Field targetsCompleted on type StudentDetails is missing");
    }
    var match$19 = Js_dict.get(value$2, "completedLevelIds");
    var match$20 = Js_dict.get(value$2, "quizScores");
    var match$21 = Js_dict.get(value$2, "averageGrades");
    tmp = {
      evaluationCriteria: match$1 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$1))).map((function (value) {
                var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                var match = Js_dict.get(value$1, "id");
                var tmp;
                if (match !== undefined) {
                  var value$2 = Caml_option.valFromOption(match);
                  var match$1 = Js_json.decodeString(value$2);
                  tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                } else {
                  tmp = Js_exn.raiseError("graphql_ppx: Field id on type EvaluationCriterion is missing");
                }
                var match$2 = Js_dict.get(value$1, "name");
                var tmp$1;
                if (match$2 !== undefined) {
                  var value$3 = Caml_option.valFromOption(match$2);
                  var match$3 = Js_json.decodeString(value$3);
                  tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                } else {
                  tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type EvaluationCriterion is missing");
                }
                var match$4 = Js_dict.get(value$1, "maxGrade");
                var tmp$2;
                if (match$4 !== undefined) {
                  var value$4 = Caml_option.valFromOption(match$4);
                  var match$5 = Js_json.decodeNumber(value$4);
                  tmp$2 = match$5 !== undefined ? match$5 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$4));
                } else {
                  tmp$2 = Js_exn.raiseError("graphql_ppx: Field maxGrade on type EvaluationCriterion is missing");
                }
                var match$6 = Js_dict.get(value$1, "passGrade");
                var tmp$3;
                if (match$6 !== undefined) {
                  var value$5 = Caml_option.valFromOption(match$6);
                  var match$7 = Js_json.decodeNumber(value$5);
                  tmp$3 = match$7 !== undefined ? match$7 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$5));
                } else {
                  tmp$3 = Js_exn.raiseError("graphql_ppx: Field passGrade on type EvaluationCriterion is missing");
                }
                return {
                        id: tmp,
                        name: tmp$1,
                        maxGrade: tmp$2,
                        passGrade: tmp$3
                      };
              })) : Js_exn.raiseError("graphql_ppx: Field evaluationCriteria on type StudentDetails is missing"),
      team: tmp$1,
      totalTargets: tmp$7,
      targetsCompleted: tmp$8,
      completedLevelIds: match$19 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$19))).map((function (value) {
                var match = Js_json.decodeString(value);
                if (match !== undefined) {
                  return match;
                } else {
                  return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                }
              })) : Js_exn.raiseError("graphql_ppx: Field completedLevelIds on type StudentDetails is missing"),
      quizScores: match$20 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$20))).map((function (value) {
                var match = Js_json.decodeString(value);
                if (match !== undefined) {
                  return match;
                } else {
                  return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                }
              })) : Js_exn.raiseError("graphql_ppx: Field quizScores on type StudentDetails is missing"),
      averageGrades: match$21 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$21))).map((function (value) {
                var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                var match = Js_dict.get(value$1, "evaluationCriterionId");
                var tmp;
                if (match !== undefined) {
                  var value$2 = Caml_option.valFromOption(match);
                  var match$1 = Js_json.decodeString(value$2);
                  tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                } else {
                  tmp = Js_exn.raiseError("graphql_ppx: Field evaluationCriterionId on type EvaluationCriterionAverage is missing");
                }
                var match$2 = Js_dict.get(value$1, "averageGrade");
                var tmp$1;
                if (match$2 !== undefined) {
                  var value$3 = Caml_option.valFromOption(match$2);
                  var match$3 = Js_json.decodeNumber(value$3);
                  tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected float, got " + JSON.stringify(value$3));
                } else {
                  tmp$1 = Js_exn.raiseError("graphql_ppx: Field averageGrade on type EvaluationCriterionAverage is missing");
                }
                return {
                        evaluationCriterionId: tmp,
                        averageGrade: tmp$1
                      };
              })) : Js_exn.raiseError("graphql_ppx: Field averageGrades on type StudentDetails is missing")
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field studentDetails on type Query is missing");
  }
  return {
          studentDetails: tmp
        };
}

function make(studentId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "studentId",
                    studentId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var studentId = variables.studentId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "studentId",
                    studentId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(studentId, param) {
  return Js_dict.fromArray([/* tuple */[
                  "studentId",
                  studentId
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, studentId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "studentId",
                      studentId
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var StudentReportOverviewQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function saveOverviewData(studentId, send, data) {
  return Curry._1(send, /* SaveOverviewData */Block.__(0, [/* Loaded */[CoursesReport__StudentOverview.makeFromJs(studentId, data)]]));
}

function getOverviewData(studentId, send, param) {
  (function (eta) {
            return GraphqlQuery.sendQuery(undefined, eta);
          })(make(studentId, /* () */0)).then((function (response) {
            saveOverviewData(studentId, send, response.studentDetails);
            return Promise.resolve(/* () */0);
          })).catch((function (param) {
          return Promise.resolve(/* () */0);
        }));
  return ;
}

function updateSubmissions(send, submissions) {
  return Curry._1(send, /* SaveSubmissions */Block.__(1, [submissions]));
}

function CoursesReport__Root(Props) {
  var studentId = Props.studentId;
  var levels = Props.levels;
  var coaches = Props.coaches;
  var teamStudentIds = Props.teamStudentIds;
  var match = React.useReducer(reducer, {
        selectedTab: /* Overview */629062105,
        overviewData: /* Unloaded */0,
        submissionsData: /* Unloaded */0,
        submissionsFilter: {
          selectedLevel: undefined,
          selectedStatus: undefined
        },
        sortDirection: /* Descending */235215128
      });
  var send = match[1];
  var state = match[0];
  React.useEffect((function () {
          return getOverviewData(studentId, send, /* () */0);
        }), [studentId]);
  var match$1 = state.selectedTab;
  return React.createElement("div", {
              className: "bg-gray-100 pt-9 pb-8 px-3 -mt-7 border border-transparent shadow rounded-lg"
            }, React.createElement("div", {
                  className: "bg-gray-100 static"
                }, React.createElement("div", {
                      className: "max-w-3xl mx-auto"
                    }, React.createElement("div", {
                          className: "flex flex-col md:flex-row items-end lg:items-center py-4"
                        }, React.createElement("div", {
                              "aria-label": "status-tab",
                              className: "course-report__category-tab w-full md:w-auto flex rounded-lg border border-gray-400"
                            }, React.createElement("button", {
                                  className: buttonClasses(state.selectedTab === /* Overview */629062105),
                                  onClick: (function (param) {
                                      return Curry._1(send, /* SelectOverviewTab */0);
                                    })
                                }, "Overview"), React.createElement("button", {
                                  className: buttonClasses(state.selectedTab === /* Submissions */-885832697),
                                  onClick: (function (param) {
                                      return Curry._1(send, /* SelectSubmissionsTab */1);
                                    })
                                }, "Submissions"))))), React.createElement("div", {
                  className: ""
                }, match$1 >= 629062105 ? React.createElement(CoursesReport__Overview.make, {
                        overviewData: state.overviewData,
                        levels: levels,
                        coaches: coaches
                      }) : React.createElement(CoursesReport__SubmissionsList.make, {
                        studentId: studentId,
                        levels: levels,
                        submissions: state.submissionsData,
                        updateSubmissionsCB: (function (param) {
                            return Curry._1(send, /* SaveSubmissions */Block.__(1, [param]));
                          }),
                        teamStudentIds: teamStudentIds,
                        selectedLevel: state.submissionsFilter.selectedLevel,
                        selectedStatus: state.submissionsFilter.selectedStatus,
                        sortDirection: state.sortDirection,
                        updateSelectedLevelCB: (function (level) {
                            return Curry._1(send, /* UpdateLevelFilter */Block.__(2, [level]));
                          }),
                        updateSelectedStatusCB: (function (status) {
                            return Curry._1(send, /* UpdateStatusFilter */Block.__(3, [status]));
                          }),
                        updateSortDirectionCB: (function (direction) {
                            return Curry._1(send, /* UpdateSortDirection */Block.__(4, [direction]));
                          })
                      })));
}

var make$1 = CoursesReport__Root;

exports.str = str;
exports.buttonClasses = buttonClasses;
exports.reducer = reducer;
exports.StudentReportOverviewQuery = StudentReportOverviewQuery;
exports.saveOverviewData = saveOverviewData;
exports.getOverviewData = getOverviewData;
exports.updateSubmissions = updateSubmissions;
exports.make = make$1;
/*  Not a pure module */
