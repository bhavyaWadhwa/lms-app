// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var CoursesReport__EvaluationCriterion = require("./CoursesReport__EvaluationCriterion.bs.js");

function id(t) {
  return t.id;
}

function levelId(t) {
  return t.levelId;
}

function evaluationCriteria(t) {
  return t.evaluationCriteria;
}

function totalTargets(t) {
  return t.totalTargets;
}

function targetsCompleted(t) {
  return t.targetsCompleted;
}

function quizzesAttempted(t) {
  return String(t.quizScores.length);
}

function quizScores(t) {
  return t.quizScores;
}

function averageGrades(t) {
  return t.averageGrades;
}

function completedLevelIds(t) {
  return t.completedLevelIds;
}

function makeAverageGrade(gradesData) {
  return gradesData.map((function (gradeData) {
                return {
                        evaluationCriterionId: gradeData.evaluationCriterionId,
                        grade: gradeData.averageGrade
                      };
              }));
}

function evaluationCriterionForGrade(grade, evaluationCriteria) {
  return ArrayUtils.unsafeFind((function (ec) {
                return CoursesReport__EvaluationCriterion.id(ec) === grade.evaluationCriterionId;
              }), "Unable to find evaluation criterion with id: " + (grade.evaluationCriterionId + " in component: CoursesReport__Overview"), evaluationCriteria);
}

function gradeValue(averageGrade) {
  return averageGrade.grade;
}

function gradeAsPercentage(averageGrade, evaluationCriterion) {
  var maxGrade = evaluationCriterion.maxGrade;
  return String(averageGrade.grade / maxGrade * 100.0 | 0);
}

function computeAverageQuizScore(quizScores) {
  var sumOfPercentageScores = $$Array.map((function (quizScore) {
            var fractionArray = $$Array.of_list($$String.split_on_char(/* "/" */47, quizScore));
            var numerator = Caml_format.caml_float_of_string(Caml_array.caml_array_get(fractionArray, 0));
            var denominator = Caml_format.caml_float_of_string(Caml_array.caml_array_get(fractionArray, 1));
            return numerator / denominator * 100.0;
          }), quizScores).reduce((function (a, b) {
          return a + b;
        }), 0.0);
  return sumOfPercentageScores / quizScores.length;
}

function averageQuizScore(t) {
  if (ArrayUtils.isEmpty(t.quizScores)) {
    return ;
  } else {
    return computeAverageQuizScore(t.quizScores);
  }
}

function makeFromJs(id, studentData) {
  return {
          id: id,
          evaluationCriteria: CoursesReport__EvaluationCriterion.makeFromJs(studentData.evaluationCriteria),
          levelId: studentData.team.levelId,
          totalTargets: studentData.totalTargets,
          targetsCompleted: studentData.targetsCompleted,
          quizScores: studentData.quizScores,
          averageGrades: makeAverageGrade(studentData.averageGrades),
          completedLevelIds: studentData.completedLevelIds
        };
}

exports.id = id;
exports.levelId = levelId;
exports.evaluationCriteria = evaluationCriteria;
exports.totalTargets = totalTargets;
exports.targetsCompleted = targetsCompleted;
exports.quizzesAttempted = quizzesAttempted;
exports.quizScores = quizScores;
exports.averageGrades = averageGrades;
exports.completedLevelIds = completedLevelIds;
exports.makeAverageGrade = makeAverageGrade;
exports.evaluationCriterionForGrade = evaluationCriterionForGrade;
exports.gradeValue = gradeValue;
exports.gradeAsPercentage = gradeAsPercentage;
exports.computeAverageQuizScore = computeAverageQuizScore;
exports.averageQuizScore = averageQuizScore;
exports.makeFromJs = makeFromJs;
/* ArrayUtils Not a pure module */
