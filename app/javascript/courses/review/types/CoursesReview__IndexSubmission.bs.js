// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var DateFns = require("../../../shared/utils/DateFns.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var OptionUtils = require("../../../shared/utils/OptionUtils.bs.js");
var CoursesReview__OverlaySubmission = require("./CoursesReview__OverlaySubmission.bs.js");

function id(t) {
  return t.id;
}

function title(t) {
  return t.title;
}

function levelId(t) {
  return t.levelId;
}

function userNames(t) {
  return t.userNames;
}

function coachIds(t) {
  return t.coachIds;
}

function failed(t) {
  var match = t.status;
  if (match !== undefined) {
    return OptionUtils.mapWithDefault((function (param) {
                  return false;
                }), true, match.passedAt);
  } else {
    return false;
  }
}

function pendingReview(t) {
  return OptionUtils.mapWithDefault((function (param) {
                return false;
              }), true, t.status);
}

function feedbackSent(t) {
  return OptionUtils.mapWithDefault((function (status) {
                return status.feedbackSent;
              }), false, t.status);
}

function createdAtPretty(t) {
  return DateFns.format(t.createdAt, "MMMM d, yyyy");
}

function timeDistance(t) {
  return DateFns.formatDistanceToNowStrict(t.createdAt, true, undefined, undefined, /* () */0);
}

function sortArray(sortDirection, submissions) {
  var sortDescending = ArrayUtils.copyAndSort((function (x, y) {
          return DateFns.differenceInSeconds(y.createdAt, x.createdAt);
        }), submissions);
  if (sortDirection >= 235215128) {
    return sortDescending;
  } else {
    return sortDescending.reverse();
  }
}

function make(id, title, createdAt, levelId, userNames, status, coachIds) {
  return {
          id: id,
          title: title,
          createdAt: createdAt,
          levelId: levelId,
          userNames: userNames,
          status: status,
          coachIds: coachIds
        };
}

function makeStatus(passedAt, feedbackSent) {
  return {
          passedAt: passedAt,
          feedbackSent: feedbackSent
        };
}

function decodeJs(details) {
  return details.map((function (s) {
                if (s !== undefined) {
                  var submission = Caml_option.valFromOption(s);
                  var status = Belt_Option.map(submission.evaluatedAt, (function (param) {
                          return {
                                  passedAt: Belt_Option.map(submission.passedAt, DateFns.decodeISO),
                                  feedbackSent: submission.feedbackSent
                                };
                        }));
                  return /* :: */[
                          make(submission.id, submission.title, DateFns.decodeISO(submission.createdAt), submission.levelId, submission.userNames, status, submission.coachIds),
                          /* [] */0
                        ];
                } else {
                  return /* [] */0;
                }
              }));
}

function replace(e, l) {
  return $$Array.map((function (s) {
                if (s.id === e.id) {
                  return e;
                } else {
                  return s;
                }
              }), l);
}

function statusEq(overlaySubmission, t) {
  var match = t.status;
  var match$1 = CoursesReview__OverlaySubmission.evaluatedAt(overlaySubmission);
  if (match !== undefined) {
    if (match$1 !== undefined) {
      return Caml_obj.caml_equal(match.passedAt, CoursesReview__OverlaySubmission.passedAt(overlaySubmission));
    } else {
      return false;
    }
  } else {
    return match$1 === undefined;
  }
}

exports.id = id;
exports.title = title;
exports.levelId = levelId;
exports.userNames = userNames;
exports.coachIds = coachIds;
exports.failed = failed;
exports.pendingReview = pendingReview;
exports.feedbackSent = feedbackSent;
exports.createdAtPretty = createdAtPretty;
exports.timeDistance = timeDistance;
exports.sortArray = sortArray;
exports.make = make;
exports.makeStatus = makeStatus;
exports.decodeJs = decodeJs;
exports.replace = replace;
exports.statusEq = statusEq;
/* DateFns Not a pure module */
