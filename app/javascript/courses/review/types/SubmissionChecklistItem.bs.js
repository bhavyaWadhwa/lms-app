// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

function title(t) {
  return t.title;
}

function result(t) {
  return t.result;
}

function status(t) {
  return t.status;
}

function fileName(file) {
  return file.name;
}

function fileUrl(file) {
  return file.url;
}

function make(title, result, status) {
  return {
          title: title,
          result: result,
          status: status
        };
}

function makeFile(name, url, id) {
  return {
          id: id,
          name: name,
          url: url
        };
}

function makeFiles(data) {
  return data.map((function (a) {
                return {
                        id: a.id,
                        name: a.title,
                        url: a.url
                      };
              }));
}

function makeResult(result, kind, files) {
  switch (kind) {
    case "files" :
        return /* Files */Block.__(3, [files]);
    case "link" :
        return /* Link */Block.__(2, [result]);
    case "longText" :
        return /* LongText */Block.__(1, [result]);
    case "multiChoice" :
        return /* MultiChoice */Block.__(4, [result]);
    case "shortText" :
        return /* ShortText */Block.__(0, [result]);
    default:
      Rollbar.error("Unkown kind: " + (kind + "recived in CurriculumEditor__TargetChecklistItem"));
      return /* ShortText */Block.__(0, ["Error"]);
  }
}

function makeStatus(data) {
  switch (data) {
    case "failed" :
        return /* Failed */1;
    case "noAnswer" :
        return /* NoAnswer */2;
    case "passed" :
        return /* Passed */0;
    default:
      Rollbar.error("Unkown status:" + (data + "recived in CourseReview__SubmissionChecklist"));
      return /* NoAnswer */2;
  }
}

function makeArrayFromJs(files, checklist) {
  return checklist.map((function (c) {
                return {
                        title: c.title,
                        result: makeResult(c.result, c.kind, makeFiles(files)),
                        status: makeStatus(c.status)
                      };
              }));
}

function decodeFile(json) {
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          name: Json_decode.field("name", Json_decode.string, json),
          url: Json_decode.field("url", Json_decode.string, json)
        };
}

function decode(files, json) {
  return {
          title: Json_decode.field("title", Json_decode.string, json),
          result: makeResult(Json_decode.field("result", Json_decode.string, json), Json_decode.field("kind", Json_decode.string, json), files),
          status: makeStatus(Json_decode.field("status", Json_decode.string, json))
        };
}

function updateStatus(checklist, index, status) {
  return $$Array.mapi((function (i, t) {
                if (i === index) {
                  return {
                          title: t.title,
                          result: t.result,
                          status: status
                        };
                } else {
                  return t;
                }
              }), checklist);
}

function makeNoAnswer(index, checklist) {
  return updateStatus(checklist, index, /* NoAnswer */2);
}

function makeFailed(index, checklist) {
  return updateStatus(checklist, index, /* Failed */1);
}

function makePassed(index, checklist) {
  return updateStatus(checklist, index, /* Passed */0);
}

function encodeKind(t) {
  var match = t.result;
  switch (match.tag | 0) {
    case /* ShortText */0 :
        return "shortText";
    case /* LongText */1 :
        return "longText";
    case /* Link */2 :
        return "link";
    case /* Files */3 :
        return "files";
    case /* MultiChoice */4 :
        return "multiChoice";
    
  }
}

function encodeResult(t) {
  var match = t.result;
  switch (match.tag | 0) {
    case /* Files */3 :
    case /* MultiChoice */4 :
        return "files";
    default:
      return match[0];
  }
}

function encodeStatus(t) {
  var match = t.status;
  switch (match) {
    case /* Passed */0 :
        return "passed";
    case /* Failed */1 :
        return "failed";
    case /* NoAnswer */2 :
        return "noAnswer";
    
  }
}

function encode(t) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "title",
                t.title
              ],
              /* :: */[
                /* tuple */[
                  "kind",
                  encodeKind(t)
                ],
                /* :: */[
                  /* tuple */[
                    "status",
                    encodeStatus(t)
                  ],
                  /* :: */[
                    /* tuple */[
                      "result",
                      encodeResult(t)
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

function encodeArray(checklist) {
  return Json_encode.array(encode, checklist);
}

exports.title = title;
exports.result = result;
exports.status = status;
exports.fileName = fileName;
exports.fileUrl = fileUrl;
exports.make = make;
exports.makeFile = makeFile;
exports.makeFiles = makeFiles;
exports.makeResult = makeResult;
exports.makeStatus = makeStatus;
exports.makeArrayFromJs = makeArrayFromJs;
exports.decodeFile = decodeFile;
exports.decode = decode;
exports.updateStatus = updateStatus;
exports.makeNoAnswer = makeNoAnswer;
exports.makeFailed = makeFailed;
exports.makePassed = makePassed;
exports.encodeKind = encodeKind;
exports.encodeResult = encodeResult;
exports.encodeStatus = encodeStatus;
exports.encode = encode;
exports.encodeArray = encodeArray;
/* No side effect */
