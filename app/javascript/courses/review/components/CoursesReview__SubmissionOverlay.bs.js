// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Icon = require("../../../shared/Icon.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var UserProxy = require("../../../shared/types/UserProxy.bs.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var ScrollLock = require("../../../shared/utils/ScrollLock.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var SkeletonLoading = require("../../../shared/components/SkeletonLoading.bs.js");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.js");
var CoursesReview__Student = require("../types/CoursesReview__Student.bs.js");
var CoursesStudents__TeamCoaches = require("../../students/components/CoursesStudents__TeamCoaches.bs.js");
var CoursesReview__SubmissionsList = require("./CoursesReview__SubmissionsList.bs.js");
var CoursesReview__OverlaySubmission = require("../types/CoursesReview__OverlaySubmission.bs.js");
var CoursesReview__SubmissionDetails = require("../types/CoursesReview__SubmissionDetails.bs.js");

((require("./CoursesReview__SubmissionOverlay.css")));

function str(prim) {
  return prim;
}

var ppx_printed_query = "query SubmissionDetailsQuery($submissionId: ID!)  {\nsubmissionDetails(submissionId: $submissionId)  {\ntargetId  \ntargetTitle  \nlevelNumber  \nlevelId  \ninactiveStudents  \nstudents  {\nid  \nname  \n}\n\nevaluationCriteria  {\nid  \nname  \nmaxGrade  \npassGrade  \ngradeLabels  {\ngrade  \nlabel  \n}\n\n}\n\nreviewChecklist  {\ntitle  \nresult  {\ntitle  \nfeedback  \n}\n\n}\n\ntargetEvaluationCriteriaIds  \nsubmissions  {\nid  \nevaluatorName  \npassedAt  \ncreatedAt  \nevaluatedAt  \nfiles  {\nurl  \ntitle  \nid  \n}\n\ngrades  {\nevaluationCriterionId  \ngrade  \n}\n\nfeedback  {\nid  \ncoachName  \ncoachAvatarUrl  \ncoachTitle  \ncreatedAt  \nvalue  \n}\n\nchecklist  \n}\n\ncoachIds  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "submissionDetails");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "targetId");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeString(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field targetId on type SubmissionDetails is missing");
    }
    var match$3 = Js_dict.get(value$2, "targetTitle");
    var tmp$2;
    if (match$3 !== undefined) {
      var value$4 = Caml_option.valFromOption(match$3);
      var match$4 = Js_json.decodeString(value$4);
      tmp$2 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
    } else {
      tmp$2 = Js_exn.raiseError("graphql_ppx: Field targetTitle on type SubmissionDetails is missing");
    }
    var match$5 = Js_dict.get(value$2, "levelNumber");
    var tmp$3;
    if (match$5 !== undefined) {
      var value$5 = Caml_option.valFromOption(match$5);
      var match$6 = Js_json.decodeString(value$5);
      tmp$3 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
    } else {
      tmp$3 = Js_exn.raiseError("graphql_ppx: Field levelNumber on type SubmissionDetails is missing");
    }
    var match$7 = Js_dict.get(value$2, "levelId");
    var tmp$4;
    if (match$7 !== undefined) {
      var value$6 = Caml_option.valFromOption(match$7);
      var match$8 = Js_json.decodeString(value$6);
      tmp$4 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
    } else {
      tmp$4 = Js_exn.raiseError("graphql_ppx: Field levelId on type SubmissionDetails is missing");
    }
    var match$9 = Js_dict.get(value$2, "inactiveStudents");
    var tmp$5;
    if (match$9 !== undefined) {
      var value$7 = Caml_option.valFromOption(match$9);
      var match$10 = Js_json.decodeBoolean(value$7);
      tmp$5 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$7));
    } else {
      tmp$5 = Js_exn.raiseError("graphql_ppx: Field inactiveStudents on type SubmissionDetails is missing");
    }
    var match$11 = Js_dict.get(value$2, "students");
    var match$12 = Js_dict.get(value$2, "evaluationCriteria");
    var match$13 = Js_dict.get(value$2, "reviewChecklist");
    var match$14 = Js_dict.get(value$2, "targetEvaluationCriteriaIds");
    var match$15 = Js_dict.get(value$2, "submissions");
    var match$16 = Js_dict.get(value$2, "coachIds");
    tmp = {
      targetId: tmp$1,
      targetTitle: tmp$2,
      levelNumber: tmp$3,
      levelId: tmp$4,
      inactiveStudents: tmp$5,
      students: match$11 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$11))).map((function (value) {
                var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                var match = Js_dict.get(value$1, "id");
                var tmp;
                if (match !== undefined) {
                  var value$2 = Caml_option.valFromOption(match);
                  var match$1 = Js_json.decodeString(value$2);
                  tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                } else {
                  tmp = Js_exn.raiseError("graphql_ppx: Field id on type StudentMini is missing");
                }
                var match$2 = Js_dict.get(value$1, "name");
                var tmp$1;
                if (match$2 !== undefined) {
                  var value$3 = Caml_option.valFromOption(match$2);
                  var match$3 = Js_json.decodeString(value$3);
                  tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                } else {
                  tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type StudentMini is missing");
                }
                return {
                        id: tmp,
                        name: tmp$1
                      };
              })) : Js_exn.raiseError("graphql_ppx: Field students on type SubmissionDetails is missing"),
      evaluationCriteria: match$12 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$12))).map((function (value) {
                var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                var match = Js_dict.get(value$1, "id");
                var tmp;
                if (match !== undefined) {
                  var value$2 = Caml_option.valFromOption(match);
                  var match$1 = Js_json.decodeString(value$2);
                  tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                } else {
                  tmp = Js_exn.raiseError("graphql_ppx: Field id on type EvaluationCriterion is missing");
                }
                var match$2 = Js_dict.get(value$1, "name");
                var tmp$1;
                if (match$2 !== undefined) {
                  var value$3 = Caml_option.valFromOption(match$2);
                  var match$3 = Js_json.decodeString(value$3);
                  tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                } else {
                  tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type EvaluationCriterion is missing");
                }
                var match$4 = Js_dict.get(value$1, "maxGrade");
                var tmp$2;
                if (match$4 !== undefined) {
                  var value$4 = Caml_option.valFromOption(match$4);
                  var match$5 = Js_json.decodeNumber(value$4);
                  tmp$2 = match$5 !== undefined ? match$5 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$4));
                } else {
                  tmp$2 = Js_exn.raiseError("graphql_ppx: Field maxGrade on type EvaluationCriterion is missing");
                }
                var match$6 = Js_dict.get(value$1, "passGrade");
                var tmp$3;
                if (match$6 !== undefined) {
                  var value$5 = Caml_option.valFromOption(match$6);
                  var match$7 = Js_json.decodeNumber(value$5);
                  tmp$3 = match$7 !== undefined ? match$7 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$5));
                } else {
                  tmp$3 = Js_exn.raiseError("graphql_ppx: Field passGrade on type EvaluationCriterion is missing");
                }
                var match$8 = Js_dict.get(value$1, "gradeLabels");
                return {
                        id: tmp,
                        name: tmp$1,
                        maxGrade: tmp$2,
                        passGrade: tmp$3,
                        gradeLabels: match$8 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$8))).map((function (value) {
                                  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                                  var match = Js_dict.get(value$1, "grade");
                                  var tmp;
                                  if (match !== undefined) {
                                    var value$2 = Caml_option.valFromOption(match);
                                    var match$1 = Js_json.decodeNumber(value$2);
                                    tmp = match$1 !== undefined ? match$1 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$2));
                                  } else {
                                    tmp = Js_exn.raiseError("graphql_ppx: Field grade on type GradeAndLabel is missing");
                                  }
                                  var match$2 = Js_dict.get(value$1, "label");
                                  var tmp$1;
                                  if (match$2 !== undefined) {
                                    var value$3 = Caml_option.valFromOption(match$2);
                                    var match$3 = Js_json.decodeString(value$3);
                                    tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                                  } else {
                                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field label on type GradeAndLabel is missing");
                                  }
                                  return {
                                          grade: tmp,
                                          label: tmp$1
                                        };
                                })) : Js_exn.raiseError("graphql_ppx: Field gradeLabels on type EvaluationCriterion is missing")
                      };
              })) : Js_exn.raiseError("graphql_ppx: Field evaluationCriteria on type SubmissionDetails is missing"),
      reviewChecklist: match$13 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$13))).map((function (value) {
                var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                var match = Js_dict.get(value$1, "title");
                var tmp;
                if (match !== undefined) {
                  var value$2 = Caml_option.valFromOption(match);
                  var match$1 = Js_json.decodeString(value$2);
                  tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                } else {
                  tmp = Js_exn.raiseError("graphql_ppx: Field title on type ReviewChecklist is missing");
                }
                var match$2 = Js_dict.get(value$1, "result");
                return {
                        title: tmp,
                        result: match$2 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$2))).map((function (value) {
                                  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                                  var match = Js_dict.get(value$1, "title");
                                  var tmp;
                                  if (match !== undefined) {
                                    var value$2 = Caml_option.valFromOption(match);
                                    var match$1 = Js_json.decodeString(value$2);
                                    tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                                  } else {
                                    tmp = Js_exn.raiseError("graphql_ppx: Field title on type ReviewChecklistResult is missing");
                                  }
                                  var match$2 = Js_dict.get(value$1, "feedback");
                                  var tmp$1;
                                  if (match$2 !== undefined) {
                                    var value$3 = Caml_option.valFromOption(match$2);
                                    var match$3 = Js_json.decodeNull(value$3);
                                    if (match$3 !== undefined) {
                                      tmp$1 = undefined;
                                    } else {
                                      var match$4 = Js_json.decodeString(value$3);
                                      tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                                    }
                                  } else {
                                    tmp$1 = undefined;
                                  }
                                  return {
                                          title: tmp,
                                          feedback: tmp$1
                                        };
                                })) : Js_exn.raiseError("graphql_ppx: Field result on type ReviewChecklist is missing")
                      };
              })) : Js_exn.raiseError("graphql_ppx: Field reviewChecklist on type SubmissionDetails is missing"),
      targetEvaluationCriteriaIds: match$14 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$14))).map((function (value) {
                var match = Js_json.decodeString(value);
                if (match !== undefined) {
                  return match;
                } else {
                  return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                }
              })) : Js_exn.raiseError("graphql_ppx: Field targetEvaluationCriteriaIds on type SubmissionDetails is missing"),
      submissions: match$15 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$15))).map((function (value) {
                var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                var match = Js_dict.get(value$1, "id");
                var tmp;
                if (match !== undefined) {
                  var value$2 = Caml_option.valFromOption(match);
                  var match$1 = Js_json.decodeString(value$2);
                  tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                } else {
                  tmp = Js_exn.raiseError("graphql_ppx: Field id on type Submission is missing");
                }
                var match$2 = Js_dict.get(value$1, "evaluatorName");
                var tmp$1;
                if (match$2 !== undefined) {
                  var value$3 = Caml_option.valFromOption(match$2);
                  var match$3 = Js_json.decodeNull(value$3);
                  if (match$3 !== undefined) {
                    tmp$1 = undefined;
                  } else {
                    var match$4 = Js_json.decodeString(value$3);
                    tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  }
                } else {
                  tmp$1 = undefined;
                }
                var match$5 = Js_dict.get(value$1, "passedAt");
                var tmp$2;
                if (match$5 !== undefined) {
                  var value$4 = Caml_option.valFromOption(match$5);
                  var match$6 = Js_json.decodeNull(value$4);
                  tmp$2 = match$6 !== undefined ? undefined : Caml_option.some(value$4);
                } else {
                  tmp$2 = undefined;
                }
                var match$7 = Js_dict.get(value$1, "createdAt");
                var match$8 = Js_dict.get(value$1, "evaluatedAt");
                var tmp$3;
                if (match$8 !== undefined) {
                  var value$5 = Caml_option.valFromOption(match$8);
                  var match$9 = Js_json.decodeNull(value$5);
                  tmp$3 = match$9 !== undefined ? undefined : Caml_option.some(value$5);
                } else {
                  tmp$3 = undefined;
                }
                var match$10 = Js_dict.get(value$1, "files");
                var match$11 = Js_dict.get(value$1, "grades");
                var match$12 = Js_dict.get(value$1, "feedback");
                var match$13 = Js_dict.get(value$1, "checklist");
                return {
                        id: tmp,
                        evaluatorName: tmp$1,
                        passedAt: tmp$2,
                        createdAt: match$7 !== undefined ? Caml_option.valFromOption(match$7) : Js_exn.raiseError("graphql_ppx: Field createdAt on type Submission is missing"),
                        evaluatedAt: tmp$3,
                        files: match$10 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$10))).map((function (value) {
                                  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                                  var match = Js_dict.get(value$1, "url");
                                  var tmp;
                                  if (match !== undefined) {
                                    var value$2 = Caml_option.valFromOption(match);
                                    var match$1 = Js_json.decodeString(value$2);
                                    tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                                  } else {
                                    tmp = Js_exn.raiseError("graphql_ppx: Field url on type SubmissionFile is missing");
                                  }
                                  var match$2 = Js_dict.get(value$1, "title");
                                  var tmp$1;
                                  if (match$2 !== undefined) {
                                    var value$3 = Caml_option.valFromOption(match$2);
                                    var match$3 = Js_json.decodeString(value$3);
                                    tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                                  } else {
                                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field title on type SubmissionFile is missing");
                                  }
                                  var match$4 = Js_dict.get(value$1, "id");
                                  var tmp$2;
                                  if (match$4 !== undefined) {
                                    var value$4 = Caml_option.valFromOption(match$4);
                                    var match$5 = Js_json.decodeString(value$4);
                                    tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                                  } else {
                                    tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type SubmissionFile is missing");
                                  }
                                  return {
                                          url: tmp,
                                          title: tmp$1,
                                          id: tmp$2
                                        };
                                })) : Js_exn.raiseError("graphql_ppx: Field files on type Submission is missing"),
                        grades: match$11 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$11))).map((function (value) {
                                  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                                  var match = Js_dict.get(value$1, "evaluationCriterionId");
                                  var tmp;
                                  if (match !== undefined) {
                                    var value$2 = Caml_option.valFromOption(match);
                                    var match$1 = Js_json.decodeString(value$2);
                                    tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                                  } else {
                                    tmp = Js_exn.raiseError("graphql_ppx: Field evaluationCriterionId on type Grade is missing");
                                  }
                                  var match$2 = Js_dict.get(value$1, "grade");
                                  var tmp$1;
                                  if (match$2 !== undefined) {
                                    var value$3 = Caml_option.valFromOption(match$2);
                                    var match$3 = Js_json.decodeNumber(value$3);
                                    tmp$1 = match$3 !== undefined ? match$3 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$3));
                                  } else {
                                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field grade on type Grade is missing");
                                  }
                                  return {
                                          evaluationCriterionId: tmp,
                                          grade: tmp$1
                                        };
                                })) : Js_exn.raiseError("graphql_ppx: Field grades on type Submission is missing"),
                        feedback: match$12 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$12))).map((function (value) {
                                  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                                  var match = Js_dict.get(value$1, "id");
                                  var tmp;
                                  if (match !== undefined) {
                                    var value$2 = Caml_option.valFromOption(match);
                                    var match$1 = Js_json.decodeString(value$2);
                                    tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                                  } else {
                                    tmp = Js_exn.raiseError("graphql_ppx: Field id on type SubmissionFeedback is missing");
                                  }
                                  var match$2 = Js_dict.get(value$1, "coachName");
                                  var tmp$1;
                                  if (match$2 !== undefined) {
                                    var value$3 = Caml_option.valFromOption(match$2);
                                    var match$3 = Js_json.decodeString(value$3);
                                    tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                                  } else {
                                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field coachName on type SubmissionFeedback is missing");
                                  }
                                  var match$4 = Js_dict.get(value$1, "coachAvatarUrl");
                                  var tmp$2;
                                  if (match$4 !== undefined) {
                                    var value$4 = Caml_option.valFromOption(match$4);
                                    var match$5 = Js_json.decodeNull(value$4);
                                    if (match$5 !== undefined) {
                                      tmp$2 = undefined;
                                    } else {
                                      var match$6 = Js_json.decodeString(value$4);
                                      tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                                    }
                                  } else {
                                    tmp$2 = undefined;
                                  }
                                  var match$7 = Js_dict.get(value$1, "coachTitle");
                                  var tmp$3;
                                  if (match$7 !== undefined) {
                                    var value$5 = Caml_option.valFromOption(match$7);
                                    var match$8 = Js_json.decodeString(value$5);
                                    tmp$3 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                                  } else {
                                    tmp$3 = Js_exn.raiseError("graphql_ppx: Field coachTitle on type SubmissionFeedback is missing");
                                  }
                                  var match$9 = Js_dict.get(value$1, "createdAt");
                                  var match$10 = Js_dict.get(value$1, "value");
                                  var tmp$4;
                                  if (match$10 !== undefined) {
                                    var value$6 = Caml_option.valFromOption(match$10);
                                    var match$11 = Js_json.decodeString(value$6);
                                    tmp$4 = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
                                  } else {
                                    tmp$4 = Js_exn.raiseError("graphql_ppx: Field value on type SubmissionFeedback is missing");
                                  }
                                  return {
                                          id: tmp,
                                          coachName: tmp$1,
                                          coachAvatarUrl: tmp$2,
                                          coachTitle: tmp$3,
                                          createdAt: match$9 !== undefined ? Caml_option.valFromOption(match$9) : Js_exn.raiseError("graphql_ppx: Field createdAt on type SubmissionFeedback is missing"),
                                          value: tmp$4
                                        };
                                })) : Js_exn.raiseError("graphql_ppx: Field feedback on type Submission is missing"),
                        checklist: match$13 !== undefined ? Caml_option.valFromOption(match$13) : Js_exn.raiseError("graphql_ppx: Field checklist on type Submission is missing")
                      };
              })) : Js_exn.raiseError("graphql_ppx: Field submissions on type SubmissionDetails is missing"),
      coachIds: match$16 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$16))).map((function (value) {
                var match = Js_json.decodeString(value);
                if (match !== undefined) {
                  return match;
                } else {
                  return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                }
              })) : Js_exn.raiseError("graphql_ppx: Field coachIds on type SubmissionDetails is missing")
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field submissionDetails on type Query is missing");
  }
  return {
          submissionDetails: tmp
        };
}

function make(submissionId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "submissionId",
                    submissionId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var submissionId = variables.submissionId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "submissionId",
                    submissionId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(submissionId, param) {
  return Js_dict.fromArray([/* tuple */[
                  "submissionId",
                  submissionId
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, submissionId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "submissionId",
                      submissionId
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var SubmissionDetailsQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function updateSubmissionDetails(setState, submissionId, syncSubmissionCB, details) {
  var submissionDetails = CoursesReview__SubmissionDetails.decodeJs(details);
  Curry._1(syncSubmissionCB, ArrayUtils.unsafeFind((function (submission) {
              return CoursesReview__OverlaySubmission.id(submission) === submissionId;
            }), "Could not find overlaySubmission with ID " + (submissionId + " in loaded submissions"), CoursesReview__SubmissionDetails.submissions(submissionDetails)));
  return Curry._1(setState, (function (param) {
                return /* Loaded */[submissionDetails];
              }));
}

function getSubmissionDetails(submissionId, setState, syncSubmissionCB, param) {
  Curry._1(setState, (function (param) {
          return /* Loading */0;
        }));
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make(submissionId, /* () */0)).then((function (response) {
          updateSubmissionDetails(setState, submissionId, syncSubmissionCB, response.submissionDetails);
          return Promise.resolve(/* () */0);
        }));
  return ;
}

function closeOverlay(courseId) {
  return ReasonReactRouter.push("/courses/" + (courseId + "/review"));
}

function headerSection(submissionDetails, courseId, assignedCoaches) {
  var studentCount = CoursesReview__SubmissionDetails.students(submissionDetails).length;
  return React.createElement("div", {
              "aria-label": "submissions-overlay-header",
              className: "bg-gray-100 border-b border-gray-300 px-3 pt-12 xl:pt-10 flex justify-center"
            }, React.createElement("div", {
                  className: "relative bg-white border lg:border-transparent p-4 lg:px-6 lg:py-5 flex flex-wrap items-center justify-between rounded-lg shadow container max-w-3xl -mb-12"
                }, React.createElement("div", {
                      "aria-label": "submissions-overlay-close",
                      className: "review-submission-overlay__close flex flex-col items-center justify-center absolute rounded-t-lg lg:rounded-lg leading-tight px-4 py-1 h-8 lg:h-full cursor-pointer border border-b-0 border-gray-400 lg:border-0 lg:shadow lg:border-gray-300 bg-white text-gray-700 hover:text-gray-900 hover:bg-gray-100",
                      onClick: (function (param) {
                          return closeOverlay(courseId);
                        })
                    }, React.createElement(Icon.make, {
                          className: "if i-times-regular text-xl lg:text-2xl mt-1 lg:mt-0"
                        }), React.createElement("span", {
                          className: "text-xs hidden lg:inline-block mt-px"
                        }, "close")), React.createElement("div", undefined, React.createElement("div", {
                          className: "block text-sm md:pr-2"
                        }, React.createElement("span", {
                              className: "bg-gray-300 text-xs font-semibold px-2 py-px rounded"
                            }, "Level " + CoursesReview__SubmissionDetails.levelNumber(submissionDetails)), React.createElement("a", {
                              className: "ml-2 font-semibold underline text-gray-900 hover:bg-primary-100 hover:text-primary-600 text-sm md:text-lg",
                              href: "/targets/" + CoursesReview__SubmissionDetails.targetId(submissionDetails),
                              target: "_blank"
                            }, CoursesReview__SubmissionDetails.targetTitle(submissionDetails))), React.createElement("div", {
                          className: "text-left mt-1 text-xs text-gray-800"
                        }, React.createElement("span", undefined, "Submitted by "), $$Array.mapi((function (index, student) {
                                var commaRequired = (index + 1 | 0) !== studentCount;
                                return React.createElement("span", {
                                            key: CoursesReview__Student.id(student)
                                          }, React.createElement("a", {
                                                className: "font-semibold underline",
                                                href: "/students/" + (CoursesReview__Student.id(student) + "/report"),
                                                target: "_blank"
                                              }, CoursesReview__Student.name(student)), commaRequired ? ", " : "");
                              }), CoursesReview__SubmissionDetails.students(submissionDetails)))), React.createElement(CoursesStudents__TeamCoaches.make, {
                      tooltipPosition: /* Bottom */437082891,
                      defaultAvatarSize: "8",
                      mdAvatarSize: "8",
                      title: React.createElement("span", {
                            className: "mr-2"
                          }, "Assigned Coaches"),
                      className: "mt-2 flex w-full md:w-auto items-center flex-shrink-0",
                      coaches: assignedCoaches
                    })));
}

function updateSubmissionDetails$1(setState, submissionDetails, overlaySubmission) {
  var newSubmissionDetails = CoursesReview__SubmissionDetails.updateSubmission(overlaySubmission, submissionDetails);
  Curry._1(setState, (function (param) {
          return /* Loaded */[newSubmissionDetails];
        }));
  return newSubmissionDetails;
}

function addGrading(setState, removePendingSubmissionCB, submissionDetails, overlaySubmission) {
  updateSubmissionDetails$1(setState, submissionDetails, overlaySubmission);
  return Curry._1(removePendingSubmissionCB, /* () */0);
}

function addFeedbackToReviewedSubmission(setState, updateReviewedSubmissionCB, submissionDetails, overlaySubmission) {
  return Curry._1(updateReviewedSubmissionCB, CoursesReview__SubmissionDetails.makeIndexSubmission(overlaySubmission, updateSubmissionDetails$1(setState, submissionDetails, overlaySubmission)));
}

function updateReviewChecklist(submissionDetails, setState, reviewChecklist) {
  return Curry._1(setState, (function (param) {
                return /* Loaded */[CoursesReview__SubmissionDetails.updateReviewChecklist(reviewChecklist, submissionDetails)];
              }));
}

function inactiveWarning(submissionDetails) {
  if (CoursesReview__SubmissionDetails.inactiveStudents(submissionDetails)) {
    var warning = CoursesReview__SubmissionDetails.students(submissionDetails).length > 1 ? "This submission is linked to one or more students whose access to the course has ended, or have dropped out." : "This submission is from a student whose access to the course has ended, or has dropped out.";
    return React.createElement("div", {
                className: "border border-yellow-400 rounded bg-yellow-400 py-2 px-3"
              }, React.createElement("i", {
                    className: "fas fa-exclamation-triangle"
                  }), React.createElement("span", {
                    className: "ml-2"
                  }, warning));
  } else {
    return null;
  }
}

function CoursesReview__SubmissionOverlay(Props) {
  var courseId = Props.courseId;
  var submissionId = Props.submissionId;
  var teamCoaches = Props.teamCoaches;
  var currentCoach = Props.currentCoach;
  var syncSubmissionCB = Props.syncSubmissionCB;
  var removePendingSubmissionCB = Props.removePendingSubmissionCB;
  var updateReviewedSubmissionCB = Props.updateReviewedSubmissionCB;
  var match = React.useState((function () {
          return /* Loading */0;
        }));
  var setState = match[1];
  var state = match[0];
  React.useEffect((function () {
          ScrollLock.activate(/* () */0);
          return (function (param) {
                    return ScrollLock.deactivate(/* () */0);
                  });
        }));
  React.useEffect((function () {
          return getSubmissionDetails(submissionId, setState, syncSubmissionCB, /* () */0);
        }), [submissionId]);
  var tmp;
  if (state) {
    var submissionDetails = state[0];
    var assignedCoaches = teamCoaches.filter((function (coach) {
            return $$Array.mem(UserProxy.id(coach), CoursesReview__SubmissionDetails.coachIds(submissionDetails));
          }));
    tmp = React.createElement("div", undefined, headerSection(submissionDetails, courseId, assignedCoaches), React.createElement("div", {
              className: "container mx-auto mt-16 md:mt-18 max-w-3xl px-3 lg:px-0"
            }, inactiveWarning(submissionDetails)), React.createElement("div", {
              className: "review-submission-overlay__submission-container relative container mx-auto max-w-3xl px-3 lg:px-0 pb-8"
            }, $$Array.mapi((function (index, overlaySubmission) {
                    return React.createElement(CoursesReview__SubmissionsList.make, {
                                overlaySubmission: overlaySubmission,
                                teamSubmission: CoursesReview__SubmissionDetails.students(submissionDetails).length > 1,
                                addGradingCB: (function (param) {
                                    return addGrading(setState, removePendingSubmissionCB, submissionDetails, param);
                                  }),
                                addFeedbackCB: (function (param) {
                                    return addFeedbackToReviewedSubmission(setState, updateReviewedSubmissionCB, submissionDetails, param);
                                  }),
                                submissionNumber: CoursesReview__SubmissionDetails.submissions(submissionDetails).length - index | 0,
                                currentCoach: currentCoach,
                                evaluationCriteria: CoursesReview__SubmissionDetails.evaluationCriteria(submissionDetails),
                                reviewChecklist: CoursesReview__SubmissionDetails.reviewChecklist(submissionDetails),
                                updateReviewChecklistCB: (function (param) {
                                    return updateReviewChecklist(submissionDetails, setState, param);
                                  }),
                                targetId: CoursesReview__SubmissionDetails.targetId(submissionDetails),
                                targetEvaluationCriteriaIds: CoursesReview__SubmissionDetails.targetEvaluationCriteriaIds(submissionDetails),
                                key: String(index)
                              });
                  }), CoursesReview__SubmissionDetails.submissions(submissionDetails))));
  } else {
    tmp = React.createElement("div", undefined, React.createElement("div", {
              className: "bg-gray-100 py-4"
            }, React.createElement("div", {
                  className: "max-w-3xl mx-auto"
                }, SkeletonLoading.card(undefined, /* () */0))), React.createElement("div", {
              className: "max-w-3xl mx-auto"
            }, SkeletonLoading.heading(/* () */0), SkeletonLoading.paragraph(/* () */0), SkeletonLoading.profileCard(/* () */0), SkeletonLoading.paragraph(/* () */0)));
  }
  return React.createElement("div", {
              className: "fixed z-30 top-0 left-0 w-full h-full overflow-y-scroll bg-white"
            }, tmp);
}

var make$1 = CoursesReview__SubmissionOverlay;

exports.str = str;
exports.SubmissionDetailsQuery = SubmissionDetailsQuery;
exports.getSubmissionDetails = getSubmissionDetails;
exports.closeOverlay = closeOverlay;
exports.headerSection = headerSection;
exports.updateSubmissionDetails = updateSubmissionDetails$1;
exports.addGrading = addGrading;
exports.addFeedbackToReviewedSubmission = addFeedbackToReviewedSubmission;
exports.updateReviewChecklist = updateReviewChecklist;
exports.inactiveWarning = inactiveWarning;
exports.make = make$1;
/*  Not a pure module */
