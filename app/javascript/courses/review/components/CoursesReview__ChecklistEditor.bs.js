// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Icon = require("../../../shared/Icon.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var DisablingCover = require("../../../shared/components/DisablingCover.bs.js");
var School__InputGroupError = require("../../../schools/shared/components/School__InputGroupError.bs.js");
var CoursesReview__ReviewChecklistItem = require("../types/CoursesReview__ReviewChecklistItem.bs.js");
var CoursesReview__ReviewChecklistResult = require("../types/CoursesReview__ReviewChecklistResult.bs.js");

((require("./CoursesReview__ChecklistEditor.css")));

function str(prim) {
  return prim;
}

var ppx_printed_query = "mutation UpdateReviewChecklistMutation($targetId: ID!, $reviewChecklist: JSON!)  {\nupdateReviewChecklist(targetId: $targetId, reviewChecklist: $reviewChecklist)  {\nsuccess  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updateReviewChecklist");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type UpdateReviewChecklistPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field updateReviewChecklist on type Mutation is missing");
  }
  return {
          updateReviewChecklist: tmp
        };
}

function make(targetId, reviewChecklist, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "targetId",
                    targetId
                  ],
                  /* tuple */[
                    "reviewChecklist",
                    reviewChecklist
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var targetId = variables.targetId;
  var reviewChecklist = variables.reviewChecklist;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "targetId",
                    targetId
                  ],
                  /* tuple */[
                    "reviewChecklist",
                    reviewChecklist
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(targetId, reviewChecklist, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "targetId",
                  targetId
                ],
                /* tuple */[
                  "reviewChecklist",
                  reviewChecklist
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, targetId, reviewChecklist, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "targetId",
                      targetId
                    ],
                    /* tuple */[
                      "reviewChecklist",
                      reviewChecklist
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var UpdateReviewChecklistMutation = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function updateReviewChecklist(targetId, reviewChecklist, setState, updateReviewChecklistCB) {
  Curry._1(setState, (function (state) {
          return {
                  reviewChecklist: state.reviewChecklist,
                  saving: true
                };
        }));
  var trimmedChecklist = $$Array.map(CoursesReview__ReviewChecklistItem.trim, reviewChecklist);
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make(targetId, CoursesReview__ReviewChecklistItem.encodeArray(trimmedChecklist), /* () */0)).then((function (response) {
          if (response.updateReviewChecklist.success) {
            Curry._1(updateReviewChecklistCB, trimmedChecklist);
          }
          Curry._1(setState, (function (state) {
                  return {
                          reviewChecklist: state.reviewChecklist,
                          saving: false
                        };
                }));
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function updateChecklistItem(checklistItem, itemIndex, setState) {
  return Curry._1(setState, (function (state) {
                return {
                        reviewChecklist: CoursesReview__ReviewChecklistItem.replace(checklistItem, itemIndex, state.reviewChecklist),
                        saving: state.saving
                      };
              }));
}

function updateChecklistItemTitle(itemIndex, title, checklistItem, setState) {
  return updateChecklistItem(CoursesReview__ReviewChecklistItem.updateTitle(title, checklistItem), itemIndex, setState);
}

function updateChecklistResultTitle(itemIndex, resultIndex, title, reviewChecklistItem, resultItem, setState) {
  var newReviewChecklistItem = CoursesReview__ReviewChecklistItem.updateChecklist(CoursesReview__ReviewChecklistResult.updateTitle(title, resultItem, resultIndex, CoursesReview__ReviewChecklistItem.result(reviewChecklistItem)), reviewChecklistItem);
  return updateChecklistItem(newReviewChecklistItem, itemIndex, setState);
}

function updateChecklistResultFeedback(itemIndex, resultIndex, feedback, reviewChecklistItem, resultItem, setState) {
  var newReviewChecklistItem = CoursesReview__ReviewChecklistItem.updateChecklist(CoursesReview__ReviewChecklistResult.updateFeedback(feedback, resultItem, resultIndex, CoursesReview__ReviewChecklistItem.result(reviewChecklistItem)), reviewChecklistItem);
  return updateChecklistItem(newReviewChecklistItem, itemIndex, setState);
}

function addEmptyResultItem(reviewChecklistItem, itemIndex, setState) {
  return updateChecklistItem(CoursesReview__ReviewChecklistItem.appendEmptyChecklistItem(reviewChecklistItem), itemIndex, setState);
}

function addEmptyChecklistItem(setState) {
  return Curry._1(setState, (function (state) {
                return {
                        reviewChecklist: $$Array.append(state.reviewChecklist, CoursesReview__ReviewChecklistItem.empty(/* () */0)),
                        saving: state.saving
                      };
              }));
}

function removeChecklistResult(itemIndex, resultIndex, reviewChecklistItem, setState) {
  return updateChecklistItem(CoursesReview__ReviewChecklistItem.deleteResultItem(resultIndex, reviewChecklistItem), itemIndex, setState);
}

function removeChecklistItem(itemIndex, setState) {
  return Curry._1(setState, (function (state) {
                return {
                        reviewChecklist: state.reviewChecklist.filter((function (_el, i) {
                                return i !== itemIndex;
                              })),
                        saving: state.saving
                      };
              }));
}

function initialStateForReviewChecklist(reviewChecklist) {
  if (ArrayUtils.isEmpty(reviewChecklist)) {
    return CoursesReview__ReviewChecklistItem.emptyTemplate(/* () */0);
  } else {
    return reviewChecklist;
  }
}

function invalidTitle(title) {
  return $$String.trim(title) === "";
}

function invalidChecklist(reviewChecklist) {
  return ArrayUtils.isNotEmpty($$Array.map((function (reviewChecklistItem) {
                      var title = CoursesReview__ReviewChecklistItem.title(reviewChecklistItem);
                      if ($$String.trim(title) === "") {
                        return true;
                      } else {
                        return ArrayUtils.isNotEmpty(CoursesReview__ReviewChecklistItem.result(reviewChecklistItem).filter((function (resultItem) {
                                          var title = CoursesReview__ReviewChecklistResult.title(resultItem);
                                          return $$String.trim(title) === "";
                                        })));
                      }
                    }), reviewChecklist).filter((function (valid) {
                    return valid;
                  })));
}

function CoursesReview__ChecklistEditor(Props) {
  var reviewChecklist = Props.reviewChecklist;
  var updateReviewChecklistCB = Props.updateReviewChecklistCB;
  var closeEditModeCB = Props.closeEditModeCB;
  var targetId = Props.targetId;
  var match = React.useState((function () {
          return {
                  reviewChecklist: initialStateForReviewChecklist(reviewChecklist),
                  saving: false
                };
        }));
  var setState = match[1];
  var state = match[0];
  return React.createElement("div", {
              className: "bg-gray-100 border border-primary-200 shadow-inner rounded-lg p-2 pt-0 md:p-4 md:pt-0"
            }, React.createElement(DisablingCover.make, {
                  disabled: state.saving,
                  children: null
                }, $$Array.mapi((function (itemIndex, reviewChecklistItem) {
                        var title = CoursesReview__ReviewChecklistItem.title(reviewChecklistItem);
                        return React.createElement("div", {
                                    key: String(itemIndex),
                                    "aria-label": "checklist-item-" + String(itemIndex),
                                    className: "pt-5"
                                  }, React.createElement("div", {
                                        className: "flex"
                                      }, React.createElement("div", {
                                            className: "w-full"
                                          }, React.createElement("input", {
                                                className: "checklist-editor__checklist-item-title h-11 text-sm focus:outline-none focus:bg-white focus:border-primary-300",
                                                id: "checklist_title",
                                                placeholder: "Add an item to the checklist",
                                                type: "text",
                                                value: CoursesReview__ReviewChecklistItem.title(reviewChecklistItem),
                                                onChange: (function ($$event) {
                                                    return updateChecklistItemTitle(itemIndex, $$event.target.value, reviewChecklistItem, setState);
                                                  })
                                              }), React.createElement(School__InputGroupError.make, {
                                                message: "A checklist item cannot be blank",
                                                active: $$String.trim(title) === ""
                                              })), React.createElement("button", {
                                            className: "bg-gray-200 p-2 w-11 border border-gray-400 text-gray-700 rounded ml-2 hover:text-red-600 hover:bg-red-100 focus:outline-none",
                                            title: "Remove checklist item",
                                            onClick: (function (param) {
                                                return removeChecklistItem(itemIndex, setState);
                                              })
                                          }, React.createElement("i", {
                                                className: "fas fa-trash-alt"
                                              }))), React.createElement("div", undefined, $$Array.mapi((function (resultIndex, resultItem) {
                                              var match = CoursesReview__ReviewChecklistResult.feedback(resultItem);
                                              var feedback = match !== undefined ? match : "";
                                              var title = CoursesReview__ReviewChecklistResult.title(resultItem);
                                              return React.createElement("div", {
                                                          key: String(itemIndex) + String(resultIndex),
                                                          "aria-label": "result-item-" + String(resultIndex),
                                                          className: "pl-2 md:pl-4 mt-2"
                                                        }, React.createElement("div", {
                                                              className: "flex"
                                                            }, React.createElement("label", {
                                                                  className: "flex-shrink-0 rounded border border-gray-400 bg-gray-100 w-4 h-4 mr-2 mt-3 cursor-not-allowed",
                                                                  title: "Disabled"
                                                                }), React.createElement("div", {
                                                                  className: "w-full bg-gray-100 relative"
                                                                }, React.createElement("div", {
                                                                      className: "relative"
                                                                    }, React.createElement("input", {
                                                                          className: "checklist-editor__checklist-result-item-title h-10 pr-12 focus:outline-none focus:bg-white focus:border-primary-300",
                                                                          id: "result_" + (String(resultIndex) + "_title"),
                                                                          placeholder: "Add a result for this check",
                                                                          type: "text",
                                                                          value: CoursesReview__ReviewChecklistResult.title(resultItem),
                                                                          onChange: (function ($$event) {
                                                                              return updateChecklistResultTitle(itemIndex, resultIndex, $$event.target.value, reviewChecklistItem, resultItem, setState);
                                                                            })
                                                                        }), React.createElement("div", {
                                                                          className: "flex w-10 h-10 absolute top-0 right-0 mr-1 items-center justify-center"
                                                                        }, React.createElement("button", {
                                                                              className: "flex items-center justify-center bg-gray-100 w-7 h-7 mt-px text-sm text-gray-700 hover:text-red-600 hover:bg-red-100 rounded-full ml-2 border border-transparent text-center",
                                                                              title: "Remove checklist result",
                                                                              onClick: (function (param) {
                                                                                  return removeChecklistResult(itemIndex, resultIndex, reviewChecklistItem, setState);
                                                                                })
                                                                            }, React.createElement(Icon.make, {
                                                                                  className: "if i-times-regular"
                                                                                })))), React.createElement("textarea", {
                                                                      className: "appearance-none border border-gray-400 bg-transparent rounded-b text-xs align-top py-2 px-4 leading-relaxed w-full focus:outline-none focus:bg-white focus:border-primary-300",
                                                                      id: "result_" + (String(resultIndex) + "_feedback"),
                                                                      cols: 33,
                                                                      placeholder: "Add feedback (optional)",
                                                                      rows: 2,
                                                                      type: "text",
                                                                      value: feedback,
                                                                      onChange: (function ($$event) {
                                                                          return updateChecklistResultFeedback(itemIndex, resultIndex, $$event.target.value, reviewChecklistItem, resultItem, setState);
                                                                        })
                                                                    }), React.createElement(School__InputGroupError.make, {
                                                                      message: "A check's result cannot be blank",
                                                                      active: $$String.trim(title) === ""
                                                                    }))));
                                            }), CoursesReview__ReviewChecklistItem.result(reviewChecklistItem)), React.createElement("button", {
                                            className: "checklist-editor__add-result-btn ml-2 md:ml-4 mt-3 flex items-center focus:outline-none",
                                            onClick: (function (param) {
                                                return addEmptyResultItem(reviewChecklistItem, itemIndex, setState);
                                              })
                                          }, React.createElement("span", {
                                                className: "checklist-editor__add-result-btn-check flex-shrink-0 rounded border border-gray-400 bg-gray-100 w-4 h-4 mr-2",
                                                title: "Add Result"
                                              }), React.createElement("span", {
                                                className: "checklist-editor__add-result-btn-text flex items-center text-sm font-semibold bg-gray-200 px-3 py-1 rounded border border-dashed border-gray-600"
                                              }, React.createElement("i", {
                                                    className: "fas fa-plus text-xs mr-2"
                                                  }), "Add Result"))));
                      }), state.reviewChecklist), React.createElement("div", {
                      className: "pt-5"
                    }, React.createElement("button", {
                          className: "flex items-center text-sm font-semibold bg-gray-200 rounded border border-dashed border-gray-600 w-full hover:text-primary-500 hover:bg-white hover:border-primary-500 hover:shadow-md focus:outline-none",
                          onClick: (function (param) {
                              return addEmptyChecklistItem(setState);
                            })
                        }, React.createElement("span", {
                              className: "bg-gray-300 py-2 w-10"
                            }, React.createElement("i", {
                                  className: "fas fa-plus text-sm"
                                })), React.createElement("span", {
                              className: "px-3 py-2"
                            }, "Add Checklist Item"))), React.createElement("div", {
                      className: "py-2 mt-4 flex flex-row-reverse"
                    }, React.createElement("button", {
                          className: "btn btn-success w-1/2 md:w-auto",
                          disabled: state.saving || invalidChecklist(state.reviewChecklist),
                          onClick: (function (param) {
                              return updateReviewChecklist(targetId, state.reviewChecklist, setState, updateReviewChecklistCB);
                            })
                        }, "Save Checklist"), React.createElement("button", {
                          className: "btn btn-subtle w-1/2 md:w-auto mr-4",
                          onClick: (function (param) {
                              return Curry._1(closeEditModeCB, /* () */0);
                            })
                        }, "Cancel"))));
}

var make$1 = CoursesReview__ChecklistEditor;

exports.str = str;
exports.UpdateReviewChecklistMutation = UpdateReviewChecklistMutation;
exports.updateReviewChecklist = updateReviewChecklist;
exports.updateChecklistItem = updateChecklistItem;
exports.updateChecklistItemTitle = updateChecklistItemTitle;
exports.updateChecklistResultTitle = updateChecklistResultTitle;
exports.updateChecklistResultFeedback = updateChecklistResultFeedback;
exports.addEmptyResultItem = addEmptyResultItem;
exports.addEmptyChecklistItem = addEmptyChecklistItem;
exports.removeChecklistResult = removeChecklistResult;
exports.removeChecklistItem = removeChecklistItem;
exports.initialStateForReviewChecklist = initialStateForReviewChecklist;
exports.invalidTitle = invalidTitle;
exports.invalidChecklist = invalidChecklist;
exports.make = make$1;
/*  Not a pure module */
