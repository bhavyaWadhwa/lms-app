// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var DateFns = require("../../../shared/utils/DateFns.bs.js");
var UserProxy = require("../../../shared/types/UserProxy.bs.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var CoursesReview__Feedback = require("../types/CoursesReview__Feedback.bs.js");
var CoursesReview__GradeCard = require("./CoursesReview__GradeCard.bs.js");
var CoursesReview__ShowFeedback = require("./CoursesReview__ShowFeedback.bs.js");
var CoursesReview__OverlaySubmission = require("../types/CoursesReview__OverlaySubmission.bs.js");

function str(prim) {
  return prim;
}

function showSubmissionStatus(overlaySubmission) {
  var match = CoursesReview__OverlaySubmission.passedAt(overlaySubmission);
  var match$1 = CoursesReview__OverlaySubmission.evaluatorName(overlaySubmission);
  var match$2 = match !== undefined ? /* tuple */[
      "Passed",
      "bg-green-100 border border-green-500 text-green-800"
    ] : (
      match$1 !== undefined ? /* tuple */[
          "Failed",
          "bg-red-100 border border-red-500 text-red-700"
        ] : /* tuple */[
          "Pending",
          "bg-orange-100 border border-orange-500 text-orange-800 "
        ]
    );
  return React.createElement("div", {
              className: "font-semibold px-3 py-px rounded " + match$2[1]
            }, match$2[0]);
}

function showFeedbackSent(feedbackSent) {
  if (feedbackSent) {
    return React.createElement("div", {
                className: "bg-primary-100 text-primary-600 border border-transparent font-semibold px-3 py-px rounded mr-3"
              }, "Feedback Sent");
  } else {
    return null;
  }
}

function cardClasses(overlaySubmission) {
  var match = CoursesReview__OverlaySubmission.passedAt(overlaySubmission);
  var match$1 = CoursesReview__OverlaySubmission.evaluatorName(overlaySubmission);
  return "mt-6 rounded-b-lg bg-white border-t-3 " + (
          match !== undefined ? "border-green-500" : (
              match$1 !== undefined ? "border-red-500" : "border-orange-300"
            )
        );
}

function updateSubmission(feedbackUpdate, grades, passed, newFeedback, overlaySubmission, currentCoach, addGradingCB, checklist) {
  var feedback;
  if (newFeedback !== undefined) {
    var f = newFeedback;
    feedback = $$String.trim(f) === "" ? CoursesReview__OverlaySubmission.feedback(overlaySubmission) : $$Array.append([CoursesReview__Feedback.make(UserProxy.name(currentCoach), UserProxy.avatarUrl(currentCoach), UserProxy.title(currentCoach), new Date(), f)], CoursesReview__OverlaySubmission.feedback(overlaySubmission));
  } else {
    feedback = CoursesReview__OverlaySubmission.feedback(overlaySubmission);
  }
  var match = passed !== undefined ? /* tuple */[
      passed ? Caml_option.some(new Date()) : undefined,
      Caml_option.some(new Date()),
      grades
    ] : /* tuple */[
      CoursesReview__OverlaySubmission.passedAt(overlaySubmission),
      CoursesReview__OverlaySubmission.evaluatedAt(overlaySubmission),
      CoursesReview__OverlaySubmission.grades(overlaySubmission)
    ];
  return Curry._1(addGradingCB, CoursesReview__OverlaySubmission.make(CoursesReview__OverlaySubmission.id(overlaySubmission), CoursesReview__OverlaySubmission.createdAt(overlaySubmission), match[0], feedbackUpdate ? CoursesReview__OverlaySubmission.evaluatorName(overlaySubmission) : UserProxy.name(currentCoach), feedback, match[2], match[1], checklist));
}

function updateFeedbackArray(currentCoach, overlaySubmission, newFeedback) {
  if ($$String.trim(newFeedback) === "") {
    return CoursesReview__OverlaySubmission.feedback(overlaySubmission);
  } else {
    return $$Array.append([CoursesReview__Feedback.make(UserProxy.name(currentCoach), UserProxy.avatarUrl(currentCoach), UserProxy.title(currentCoach), new Date(), newFeedback)], CoursesReview__OverlaySubmission.feedback(overlaySubmission));
  }
}

function addGrading(addGradingCB, currentCoach, overlaySubmission, newFeedback, passed, grades, checklist) {
  var feedback = updateFeedbackArray(currentCoach, overlaySubmission, newFeedback);
  var passedAt = passed ? Caml_option.some(new Date()) : undefined;
  var evaluatedAt = Caml_option.some(new Date());
  return Curry._1(addGradingCB, CoursesReview__OverlaySubmission.make(CoursesReview__OverlaySubmission.id(overlaySubmission), CoursesReview__OverlaySubmission.createdAt(overlaySubmission), passedAt, UserProxy.name(currentCoach), feedback, grades, evaluatedAt, checklist));
}

function addFeedback(addFeedbackCB, currentCoach, overlaySubmission, newFeedback) {
  var feedback = updateFeedbackArray(currentCoach, overlaySubmission, newFeedback);
  return Curry._1(addFeedbackCB, CoursesReview__OverlaySubmission.updateFeedback(feedback, overlaySubmission));
}

function CoursesReview__SubmissionsList(Props) {
  var overlaySubmission = Props.overlaySubmission;
  var teamSubmission = Props.teamSubmission;
  var addGradingCB = Props.addGradingCB;
  var addFeedbackCB = Props.addFeedbackCB;
  var submissionNumber = Props.submissionNumber;
  var currentCoach = Props.currentCoach;
  var evaluationCriteria = Props.evaluationCriteria;
  var reviewChecklist = Props.reviewChecklist;
  var updateReviewChecklistCB = Props.updateReviewChecklistCB;
  var targetId = Props.targetId;
  var targetEvaluationCriteriaIds = Props.targetEvaluationCriteriaIds;
  return React.createElement("div", {
              "aria-label": "submissions-overlay-card-" + CoursesReview__OverlaySubmission.id(overlaySubmission),
              className: cardClasses(overlaySubmission)
            }, React.createElement("div", {
                  className: "rounded-b-lg shadow"
                }, React.createElement("div", {
                      className: "p-4 md:px-6 md:py-5 border-b bg-white flex flex-col sm:flex-row items-center justify-between"
                    }, React.createElement("div", {
                          className: "flex flex-col w-full sm:w-auto"
                        }, React.createElement("h2", {
                              className: "font-semibold text-sm lg:text-base leading-tight"
                            }, "Submission #" + String(submissionNumber)), React.createElement("span", {
                              className: "text-xs text-gray-800 pt-px"
                            }, DateFns.formatPreset(CoursesReview__OverlaySubmission.createdAt(overlaySubmission), undefined, true, undefined, /* () */0))), React.createElement("div", {
                          className: "text-xs flex w-full sm:w-auto mt-2 sm:mt-0"
                        }, showFeedbackSent(ArrayUtils.isNotEmpty(CoursesReview__OverlaySubmission.feedback(overlaySubmission))), showSubmissionStatus(overlaySubmission))), React.createElement(CoursesReview__GradeCard.make, {
                      overlaySubmission: overlaySubmission,
                      teamSubmission: teamSubmission,
                      evaluationCriteria: evaluationCriteria,
                      reviewChecklist: reviewChecklist,
                      addGradingCB: (function (param, param$1, param$2, param$3) {
                          return addGrading(addGradingCB, currentCoach, overlaySubmission, param, param$1, param$2, param$3);
                        }),
                      updateReviewChecklistCB: updateReviewChecklistCB,
                      targetId: targetId,
                      targetEvaluationCriteriaIds: targetEvaluationCriteriaIds
                    }), React.createElement(CoursesReview__ShowFeedback.make, {
                      feedback: CoursesReview__OverlaySubmission.feedback(overlaySubmission),
                      reviewed: ArrayUtils.isNotEmpty(CoursesReview__OverlaySubmission.grades(overlaySubmission)),
                      submissionId: CoursesReview__OverlaySubmission.id(overlaySubmission),
                      reviewChecklist: reviewChecklist,
                      addFeedbackCB: (function (param) {
                          return addFeedback(addFeedbackCB, currentCoach, overlaySubmission, param);
                        }),
                      updateReviewChecklistCB: updateReviewChecklistCB,
                      targetId: targetId
                    })));
}

var make = CoursesReview__SubmissionsList;

exports.str = str;
exports.showSubmissionStatus = showSubmissionStatus;
exports.showFeedbackSent = showFeedbackSent;
exports.cardClasses = cardClasses;
exports.updateSubmission = updateSubmission;
exports.updateFeedbackArray = updateFeedbackArray;
exports.addGrading = addGrading;
exports.addFeedback = addFeedback;
exports.make = make;
/* react Not a pure module */
