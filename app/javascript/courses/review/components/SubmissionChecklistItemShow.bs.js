// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var PfIcon = require("../../../packages/pf-icon/src/PfIcon.bs.js");
var MarkdownBlock = require("../../../shared/components/MarkdownBlock.bs.js");
var SubmissionChecklistItem = require("../types/SubmissionChecklistItem.bs.js");

function str(prim) {
  return prim;
}

function kindIconClasses(result) {
  switch (result.tag | 0) {
    case /* ShortText */0 :
        return "if i-short-text-regular md:text-base text-gray-800 if-fw";
    case /* LongText */1 :
        return "if i-long-text-regular md:text-base text-gray-800 if-fw";
    case /* Link */2 :
        return "if i-link-regular md:text-base text-gray-800 if-fw";
    case /* Files */3 :
        return "if i-file-regular md:text-base text-gray-800 if-fw";
    case /* MultiChoice */4 :
        return "if i-check-circle-alt-regular md:text-base text-gray-800 if-fw";
    
  }
}

function showFiles(files) {
  return React.createElement("div", {
              className: "flex flex-wrap"
            }, $$Array.map((function (file) {
                    return React.createElement("a", {
                                key: "file-" + SubmissionChecklistItem.fileUrl(file),
                                className: "mt-1 mr-3 flex border overflow-hidden rounded hover:shadow-md border-pink-400 bg-white text-pink-700 hover:border-pink-600 hover:text-pink-700",
                                href: SubmissionChecklistItem.fileUrl(file),
                                target: "_blank"
                              }, React.createElement("span", {
                                    className: "course-show-attachments__attachment-title rounded text-xs font-semibold inline-block whitespace-normal truncate w-32 md:w-42 h-full px-3 py-2 leading-loose"
                                  }, SubmissionChecklistItem.fileName(file)), React.createElement("span", {
                                    className: "flex w-10 justify-center items-center p-2 bg-pink-700 text-white"
                                  }, React.createElement(PfIcon.make, {
                                        className: "if i-download-regular"
                                      })));
                  }), files));
}

function showlink(link) {
  return React.createElement("a", {
              className: "max-w-fc mt-1 mr-3 flex border overflow-hidden rounded hover:shadow-md border-indigo-400 bg-white text-indigo-700 hover:border-blue-600 hover:text-indigo-800",
              href: link,
              target: "_blank"
            }, React.createElement("span", {
                  className: "course-show-attachments__attachment-title rounded text-xs font-semibold inline-block whitespace-normal truncate w-32 md:w-42 h-full px-3 py-2 leading-loose"
                }, link), React.createElement("span", {
                  className: "flex w-10 justify-center items-center p-2 bg-indigo-700 text-white"
                }, React.createElement(PfIcon.make, {
                      className: "if i-external-link-regular"
                    })));
}

function statusIcon(updateChecklistCB, status) {
  if (updateChecklistCB !== undefined) {
    return null;
  } else {
    switch (status) {
      case /* Passed */0 :
          return React.createElement(PfIcon.make, {
                      className: "if i-check-square-solid text-green-500 text-lg mr-3 -ml-6 mt-1 bg-white"
                    });
      case /* Failed */1 :
          return React.createElement(PfIcon.make, {
                      className: "if i-times-square-solid text-red-500 text-lg mr-3 -ml-6 mt-1 bg-white"
                    });
      case /* NoAnswer */2 :
          return null;
      
    }
  }
}

function showStatus(status) {
  switch (status) {
    case /* Passed */0 :
        return React.createElement("div", {
                    className: "bg-green-200 rounded px-1 py-px text-green-800 text-tiny"
                  }, "Correct");
    case /* Failed */1 :
        return React.createElement("div", {
                    className: "bg-red-200 rounded px-1 py-px text-red-800 text-tiny"
                  }, "Incorrect");
    case /* NoAnswer */2 :
        return null;
    
  }
}

function statusButtonSelectedClasses(status, currentStatus) {
  var tmp;
  switch (currentStatus) {
    case /* Passed */0 :
        tmp = status !== 0 ? "bg-white" : "bg-green-100 hover:bg-green-100 text-green-800 hover:text-green-800 border-green-500 z-10";
        break;
    case /* Failed */1 :
        tmp = status !== 1 ? "bg-white" : "bg-red-100 hover:bg-red-100 text-red-700 hover:text-red-700 border-red-500 z-10";
        break;
    case /* NoAnswer */2 :
        tmp = "bg-white";
        break;
    
  }
  return "inline-flex items-center cursor-pointer leading-tight font-semibold inline-block text-xs relative hover:bg-gray-100 hover:text-gray-700 " + tmp;
}

function statusButtonIcon(bool) {
  if (bool) {
    return "if i-times-square-solid text-base if-fw";
  } else {
    return "if i-square-regular text-base if-fw text-gray-500";
  }
}

function statusButtonOnClick(bool, callback, checklist, index, _event) {
  if (bool) {
    return Curry._1(callback, SubmissionChecklistItem.makeNoAnswer(index, checklist));
  } else {
    return Curry._1(callback, SubmissionChecklistItem.makeFailed(index, checklist));
  }
}

function statusButton(index, status, callback, checklist) {
  var partial_arg = status === /* Failed */1;
  return React.createElement("div", {
              className: "mt-2"
            }, React.createElement("button", {
                  className: "border border-gray-500 rounded " + statusButtonSelectedClasses(/* Failed */1, status),
                  onClick: (function (param) {
                      return statusButtonOnClick(partial_arg, callback, checklist, index, param);
                    })
                }, React.createElement("span", {
                      className: "w-8 p-2 border-r border-gray-500 flex items-center justify-center"
                    }, React.createElement(PfIcon.make, {
                          className: status === /* Failed */1 ? "if i-times-square-solid text-base if-fw" : "if i-square-regular text-base if-fw text-gray-500"
                        })), React.createElement("span", {
                      className: "p-2"
                    }, "Mark as incorrect")));
}

function computeShowResult(pending, checklistItem) {
  var match = SubmissionChecklistItem.status(checklistItem);
  if (pending) {
    return true;
  } else {
    return match === 1;
  }
}

function cardClasses(pending) {
  if (pending) {
    return "mt-3";
  } else {
    return "rounded shadow mt-4 ";
  }
}

function cardHeaderClasses(pending) {
  return "text-sm font-semibold flex items-center justify-between " + (
          pending ? "" : "p-4 bg-white rounded cursor-pointer"
        );
}

function cardBodyClasses(pending) {
  return "pl-5 md:pl-7 p-3 pb-4 " + (
          pending ? "" : "border-t bg-gray-200 rounded-b"
        );
}

function SubmissionChecklistItemShow(Props) {
  var index = Props.index;
  var checklistItem = Props.checklistItem;
  var updateChecklistCB = Props.updateChecklistCB;
  var checklist = Props.checklist;
  var pending = Props.pending;
  var match = React.useState((function () {
          return computeShowResult(pending, checklistItem);
        }));
  var setShowResult = match[1];
  var showResult = match[0];
  React.useEffect((function () {
          var newShowResult = computeShowResult(pending, checklistItem);
          if (newShowResult !== showResult) {
            Curry._1(setShowResult, (function (param) {
                    return newShowResult;
                  }));
          }
          return ;
        }), [updateChecklistCB]);
  var status = SubmissionChecklistItem.status(checklistItem);
  var tmp;
  if (showResult) {
    var match$1 = SubmissionChecklistItem.result(checklistItem);
    var tmp$1;
    switch (match$1.tag | 0) {
      case /* LongText */1 :
          tmp$1 = React.createElement(MarkdownBlock.make, {
                markdown: match$1[0],
                profile: /* Permissive */2
              });
          break;
      case /* Link */2 :
          tmp$1 = showlink(match$1[0]);
          break;
      case /* Files */3 :
          tmp$1 = showFiles(match$1[0]);
          break;
      case /* ShortText */0 :
      case /* MultiChoice */4 :
          tmp$1 = React.createElement("div", undefined, match$1[0]);
          break;
      
    }
    tmp = React.createElement("div", {
          className: cardBodyClasses(pending)
        }, React.createElement("div", undefined, tmp$1), updateChecklistCB !== undefined ? statusButton(index, status, updateChecklistCB, checklist) : null);
  } else {
    tmp = null;
  }
  return React.createElement("div", {
              "aria-label": SubmissionChecklistItem.title(checklistItem),
              className: pending ? "mt-3" : "rounded shadow mt-4 ",
              onClick: (function (param) {
                  return Curry._1(setShowResult, (function (param) {
                                return true;
                              }));
                })
            }, React.createElement("div", {
                  className: cardHeaderClasses(pending)
                }, React.createElement("div", {
                      className: "inline-flex items-center"
                    }, statusIcon(updateChecklistCB, status), React.createElement(PfIcon.make, {
                          className: kindIconClasses(SubmissionChecklistItem.result(checklistItem))
                        }), React.createElement("p", {
                          className: "pl-2 tracking-wide"
                        }, SubmissionChecklistItem.title(checklistItem))), React.createElement("div", {
                      className: "inline-block"
                    }, showResult ? showStatus(status) : React.createElement("button", undefined, React.createElement("i", {
                                className: "fas fa-chevron-down"
                              })))), tmp);
}

var ChecklistItem = /* alias */0;

var make = SubmissionChecklistItemShow;

exports.ChecklistItem = ChecklistItem;
exports.str = str;
exports.kindIconClasses = kindIconClasses;
exports.showFiles = showFiles;
exports.showlink = showlink;
exports.statusIcon = statusIcon;
exports.showStatus = showStatus;
exports.statusButtonSelectedClasses = statusButtonSelectedClasses;
exports.statusButtonIcon = statusButtonIcon;
exports.statusButtonOnClick = statusButtonOnClick;
exports.statusButton = statusButton;
exports.computeShowResult = computeShowResult;
exports.cardClasses = cardClasses;
exports.cardHeaderClasses = cardHeaderClasses;
exports.cardBodyClasses = cardBodyClasses;
exports.make = make;
/* react Not a pure module */
