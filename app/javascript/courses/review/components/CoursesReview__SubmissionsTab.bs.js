// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Link = require("../../../shared/components/Link.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var UserProxy = require("../../../shared/types/UserProxy.bs.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var OptionUtils = require("../../../shared/utils/OptionUtils.bs.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var LoadingSpinner = require("../../../shared/components/LoadingSpinner.bs.js");
var SkeletonLoading = require("../../../shared/components/SkeletonLoading.bs.js");
var CoursesReview__Level = require("../types/CoursesReview__Level.bs.js");
var CoursesReview__Submissions = require("../types/CoursesReview__Submissions.bs.js");
var PendingEmptySvg = require("../images/pending-empty.svg");
var CoursesReview__IndexSubmission = require("../types/CoursesReview__IndexSubmission.bs.js");
var ReviewedEmptySvg = require("../../shared/images/reviewed-empty.svg");

var reviewedEmptyImage = ReviewedEmptySvg.default;

var pendingEmptyImage = PendingEmptySvg.default;

function str(prim) {
  return prim;
}

var ppx_printed_query = "query SubmissionsQuery($courseId: ID!, $status: SubmissionStatus!, $sortDirection: SortDirection!, $levelId: ID, $coachId: ID, $after: String)  {\nsubmissions(courseId: $courseId, status: $status, sortDirection: $sortDirection, levelId: $levelId, coachId: $coachId, first: 20, after: $after)  {\nnodes  {\nid  \ntitle  \nuserNames  \nevaluatedAt  \npassedAt  \nfeedbackSent  \nlevelId  \ncreatedAt  \ntargetId  \ncoachIds  \n}\n\npageInfo  {\nendCursor  \nhasNextPage  \n}\n\ntotalCount  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "submissions");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "nodes");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      tmp$1 = match$2 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$3)).map((function (value) {
                var match = Js_json.decodeNull(value);
                if (match !== undefined) {
                  return ;
                } else {
                  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                  var match$1 = Js_dict.get(value$1, "id");
                  var tmp;
                  if (match$1 !== undefined) {
                    var value$2 = Caml_option.valFromOption(match$1);
                    var match$2 = Js_json.decodeString(value$2);
                    tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field id on type Submission is missing");
                  }
                  var match$3 = Js_dict.get(value$1, "title");
                  var tmp$1;
                  if (match$3 !== undefined) {
                    var value$3 = Caml_option.valFromOption(match$3);
                    var match$4 = Js_json.decodeString(value$3);
                    tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  } else {
                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field title on type Submission is missing");
                  }
                  var match$5 = Js_dict.get(value$1, "userNames");
                  var tmp$2;
                  if (match$5 !== undefined) {
                    var value$4 = Caml_option.valFromOption(match$5);
                    var match$6 = Js_json.decodeString(value$4);
                    tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                  } else {
                    tmp$2 = Js_exn.raiseError("graphql_ppx: Field userNames on type Submission is missing");
                  }
                  var match$7 = Js_dict.get(value$1, "evaluatedAt");
                  var tmp$3;
                  if (match$7 !== undefined) {
                    var value$5 = Caml_option.valFromOption(match$7);
                    var match$8 = Js_json.decodeNull(value$5);
                    tmp$3 = match$8 !== undefined ? undefined : Caml_option.some(value$5);
                  } else {
                    tmp$3 = undefined;
                  }
                  var match$9 = Js_dict.get(value$1, "passedAt");
                  var tmp$4;
                  if (match$9 !== undefined) {
                    var value$6 = Caml_option.valFromOption(match$9);
                    var match$10 = Js_json.decodeNull(value$6);
                    tmp$4 = match$10 !== undefined ? undefined : Caml_option.some(value$6);
                  } else {
                    tmp$4 = undefined;
                  }
                  var match$11 = Js_dict.get(value$1, "feedbackSent");
                  var tmp$5;
                  if (match$11 !== undefined) {
                    var value$7 = Caml_option.valFromOption(match$11);
                    var match$12 = Js_json.decodeBoolean(value$7);
                    tmp$5 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$7));
                  } else {
                    tmp$5 = Js_exn.raiseError("graphql_ppx: Field feedbackSent on type Submission is missing");
                  }
                  var match$13 = Js_dict.get(value$1, "levelId");
                  var tmp$6;
                  if (match$13 !== undefined) {
                    var value$8 = Caml_option.valFromOption(match$13);
                    var match$14 = Js_json.decodeString(value$8);
                    tmp$6 = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
                  } else {
                    tmp$6 = Js_exn.raiseError("graphql_ppx: Field levelId on type Submission is missing");
                  }
                  var match$15 = Js_dict.get(value$1, "createdAt");
                  var match$16 = Js_dict.get(value$1, "targetId");
                  var tmp$7;
                  if (match$16 !== undefined) {
                    var value$9 = Caml_option.valFromOption(match$16);
                    var match$17 = Js_json.decodeString(value$9);
                    tmp$7 = match$17 !== undefined ? match$17 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
                  } else {
                    tmp$7 = Js_exn.raiseError("graphql_ppx: Field targetId on type Submission is missing");
                  }
                  var match$18 = Js_dict.get(value$1, "coachIds");
                  return {
                          id: tmp,
                          title: tmp$1,
                          userNames: tmp$2,
                          evaluatedAt: tmp$3,
                          passedAt: tmp$4,
                          feedbackSent: tmp$5,
                          levelId: tmp$6,
                          createdAt: match$15 !== undefined ? Caml_option.valFromOption(match$15) : Js_exn.raiseError("graphql_ppx: Field createdAt on type Submission is missing"),
                          targetId: tmp$7,
                          coachIds: match$18 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$18))).map((function (value) {
                                    var match = Js_json.decodeString(value);
                                    if (match !== undefined) {
                                      return match;
                                    } else {
                                      return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                                    }
                                  })) : Js_exn.raiseError("graphql_ppx: Field coachIds on type Submission is missing")
                        };
                }
              }));
    } else {
      tmp$1 = undefined;
    }
    var match$3 = Js_dict.get(value$2, "pageInfo");
    var tmp$2;
    if (match$3 !== undefined) {
      var value$4 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$3)));
      var match$4 = Js_dict.get(value$4, "endCursor");
      var tmp$3;
      if (match$4 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$4);
        var match$5 = Js_json.decodeNull(value$5);
        if (match$5 !== undefined) {
          tmp$3 = undefined;
        } else {
          var match$6 = Js_json.decodeString(value$5);
          tmp$3 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$3 = undefined;
      }
      var match$7 = Js_dict.get(value$4, "hasNextPage");
      var tmp$4;
      if (match$7 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$7);
        var match$8 = Js_json.decodeBoolean(value$6);
        tmp$4 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$6));
      } else {
        tmp$4 = Js_exn.raiseError("graphql_ppx: Field hasNextPage on type PageInfo is missing");
      }
      tmp$2 = {
        endCursor: tmp$3,
        hasNextPage: tmp$4
      };
    } else {
      tmp$2 = Js_exn.raiseError("graphql_ppx: Field pageInfo on type SubmissionConnection is missing");
    }
    var match$9 = Js_dict.get(value$2, "totalCount");
    var tmp$5;
    if (match$9 !== undefined) {
      var value$7 = Caml_option.valFromOption(match$9);
      var match$10 = Js_json.decodeNumber(value$7);
      tmp$5 = match$10 !== undefined ? match$10 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$7));
    } else {
      tmp$5 = Js_exn.raiseError("graphql_ppx: Field totalCount on type SubmissionConnection is missing");
    }
    tmp = {
      nodes: tmp$1,
      pageInfo: tmp$2,
      totalCount: tmp$5
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field submissions on type Query is missing");
  }
  return {
          submissions: tmp
        };
}

function json_of_SubmissionStatus(value) {
  if (value >= 544019991) {
    return "Reviewed";
  } else {
    return "Pending";
  }
}

function json_of_SortDirection(value) {
  if (value >= 235215128) {
    return "Descending";
  } else {
    return "Ascending";
  }
}

function make(courseId, status, sortDirection, levelId, coachId, after, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "courseId",
                    courseId
                  ],
                  /* tuple */[
                    "status",
                    json_of_SubmissionStatus(status)
                  ],
                  /* tuple */[
                    "sortDirection",
                    json_of_SortDirection(sortDirection)
                  ],
                  /* tuple */[
                    "levelId",
                    levelId !== undefined ? levelId : null
                  ],
                  /* tuple */[
                    "coachId",
                    coachId !== undefined ? coachId : null
                  ],
                  /* tuple */[
                    "after",
                    after !== undefined ? after : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var courseId = variables.courseId;
  var status = variables.status;
  var sortDirection = variables.sortDirection;
  var levelId = variables.levelId;
  var coachId = variables.coachId;
  var after = variables.after;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "courseId",
                    courseId
                  ],
                  /* tuple */[
                    "status",
                    json_of_SubmissionStatus(status)
                  ],
                  /* tuple */[
                    "sortDirection",
                    json_of_SortDirection(sortDirection)
                  ],
                  /* tuple */[
                    "levelId",
                    levelId !== undefined ? levelId : null
                  ],
                  /* tuple */[
                    "coachId",
                    coachId !== undefined ? coachId : null
                  ],
                  /* tuple */[
                    "after",
                    after !== undefined ? after : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(courseId, status, sortDirection, levelId, coachId, after, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "courseId",
                  courseId
                ],
                /* tuple */[
                  "status",
                  json_of_SubmissionStatus(status)
                ],
                /* tuple */[
                  "sortDirection",
                  json_of_SortDirection(sortDirection)
                ],
                /* tuple */[
                  "levelId",
                  levelId !== undefined ? levelId : null
                ],
                /* tuple */[
                  "coachId",
                  coachId !== undefined ? coachId : null
                ],
                /* tuple */[
                  "after",
                  after !== undefined ? after : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, courseId, status, sortDirection, levelId, coachId, after, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "courseId",
                      courseId
                    ],
                    /* tuple */[
                      "status",
                      json_of_SubmissionStatus(status)
                    ],
                    /* tuple */[
                      "sortDirection",
                      json_of_SortDirection(sortDirection)
                    ],
                    /* tuple */[
                      "levelId",
                      levelId !== undefined ? levelId : null
                    ],
                    /* tuple */[
                      "coachId",
                      coachId !== undefined ? coachId : null
                    ],
                    /* tuple */[
                      "after",
                      after !== undefined ? after : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var SubmissionsQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  json_of_SubmissionStatus: json_of_SubmissionStatus,
  json_of_SortDirection: json_of_SortDirection,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function updateSubmissions(setState, endCursor, hasNextPage, totalCount, submissions, selectedTab, updateSubmissionsCB, nodes) {
  Curry._5(updateSubmissionsCB, $$Array.append($$Array.of_list(List.flatten($$Array.to_list(nodes !== undefined ? CoursesReview__IndexSubmission.decodeJs(nodes) : []))), submissions), selectedTab, hasNextPage, totalCount, endCursor);
  return Curry._1(setState, (function (param) {
                return /* Loaded */2;
              }));
}

function getSubmissions(courseId, cursor, setState, selectedLevel, selectedCoach, sortDirection, selectedTab, submissions, updateSubmissionsCB) {
  Curry._1(setState, (function (state) {
          if (state !== 0) {
            return /* Reloading */1;
          } else {
            return /* Loading */0;
          }
        }));
  var levelId = OptionUtils.map(CoursesReview__Level.id, selectedLevel);
  var coachId = OptionUtils.map(UserProxy.id, selectedCoach);
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make(courseId, selectedTab, sortDirection, levelId, coachId, cursor, /* () */0)).then((function (response) {
          updateSubmissions(setState, response.submissions.pageInfo.endCursor, response.submissions.pageInfo.hasNextPage, response.submissions.totalCount, submissions, selectedTab, updateSubmissionsCB, response.submissions.nodes);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function submissionStatus(submission) {
  var match = CoursesReview__IndexSubmission.pendingReview(submission) ? /* tuple */[
      "border flex-shrink-0 leading-normal font-semibold px-3 py-px rounded bg-orange-100 text-orange-600",
      CoursesReview__IndexSubmission.timeDistance(submission)
    ] : (
      CoursesReview__IndexSubmission.failed(submission) ? /* tuple */[
          "border flex-shrink-0 leading-normal font-semibold px-3 py-px rounded bg-red-100 border-red-500 text-red-800",
          "Failed"
        ] : /* tuple */[
          "border flex-shrink-0 leading-normal font-semibold px-3 py-px rounded bg-green-100 border-green-500 text-green-800",
          "Passed"
        ]
    );
  return React.createElement("div", {
              className: match[0]
            }, match[1]);
}

function feedbackSentNotice(feedbackSent) {
  if (feedbackSent) {
    return React.createElement("div", {
                className: "bg-primary-100 text-primary-600 border border-transparent flex-shrink-0 leading-normal font-semibold px-3 py-px rounded mr-3"
              }, "Feedback Sent");
  } else {
    return null;
  }
}

function submissionCardClasses(submission) {
  return "flex flex-col md:flex-row items-start md:items-center justify-between bg-white border-l-3 p-3 md:py-6 md:px-5 mb-4 cursor-pointer rounded-r-lg shadow hover:border-primary-500 hover:text-primary-500 hover:shadow-md " + (
          CoursesReview__IndexSubmission.pendingReview(submission) ? "border-orange-400" : (
              CoursesReview__IndexSubmission.failed(submission) ? "border-red-500" : "border-green-500"
            )
        );
}

function showSubmission(submissions, levels, sortDirection) {
  return React.createElement("div", {
              id: "submissions"
            }, $$Array.map((function (submission) {
                    return React.createElement(Link.make, {
                                href: "/submissions/" + (CoursesReview__IndexSubmission.id(submission) + "/review"),
                                ariaLabel: "Submission " + CoursesReview__IndexSubmission.id(submission),
                                className: submissionCardClasses(submission),
                                children: null,
                                key: CoursesReview__IndexSubmission.id(submission)
                              }, React.createElement("div", {
                                    className: "w-full md:w-3/4"
                                  }, React.createElement("div", {
                                        className: "block text-sm md:pr-2"
                                      }, React.createElement("span", {
                                            className: "bg-gray-300 text-xs font-semibold px-2 py-px rounded"
                                          }, CoursesReview__Level.unsafeLevelNumber(levels, "SubmissionsTab", CoursesReview__IndexSubmission.levelId(submission))), React.createElement("span", {
                                            className: "ml-2 font-semibold text-base"
                                          }, CoursesReview__IndexSubmission.title(submission))), React.createElement("div", {
                                        className: "mt-1 ml-px text-xs text-gray-900"
                                      }, React.createElement("span", undefined, "Submitted by "), React.createElement("span", {
                                            className: "font-semibold"
                                          }, CoursesReview__IndexSubmission.userNames(submission)), React.createElement("span", {
                                            className: "ml-1"
                                          }, "on " + CoursesReview__IndexSubmission.createdAtPretty(submission)))), React.createElement("div", {
                                    className: "w-auto md:w-1/4 text-xs flex justify-end mt-2 md:mt-0"
                                  }, feedbackSentNotice(CoursesReview__IndexSubmission.feedbackSent(submission)), submissionStatus(submission)));
                  }), CoursesReview__IndexSubmission.sortArray(sortDirection, submissions)));
}

function showSubmissions(submissions, selectedTab, levels, sortDirection) {
  var imageSrc = selectedTab >= 544019991 ? reviewedEmptyImage : pendingEmptyImage;
  if (ArrayUtils.isEmpty(submissions)) {
    return React.createElement("div", {
                className: "course-review__submissions-empty text-lg font-semibold text-center py-4"
              }, React.createElement("h5", {
                    className: "py-4 mt-4 bg-gray-200 text-gray-800 font-semibold"
                  }, "No submissions found"), React.createElement("img", {
                    className: "w-3/4 md:w-1/2 mx-auto mt-2",
                    src: imageSrc
                  }));
  } else {
    return showSubmission(submissions, levels, sortDirection);
  }
}

function CoursesReview__SubmissionsTab(Props) {
  var courseId = Props.courseId;
  var selectedTab = Props.selectedTab;
  var selectedLevel = Props.selectedLevel;
  var selectedCoach = Props.selectedCoach;
  var sortDirection = Props.sortDirection;
  var levels = Props.levels;
  var submissions = Props.submissions;
  var updateSubmissionsCB = Props.updateSubmissionsCB;
  var reloadAt = Props.reloadAt;
  var match = React.useState((function () {
          return /* Loading */0;
        }));
  var setState = match[1];
  var state = match[0];
  React.useEffect((function () {
          if (CoursesReview__Submissions.needsReloading(selectedLevel, selectedCoach, sortDirection, submissions)) {
            Curry._1(setState, (function (param) {
                    return /* Reloading */1;
                  }));
            getSubmissions(courseId, undefined, setState, selectedLevel, selectedCoach, sortDirection, selectedTab, [], updateSubmissionsCB);
          }
          return ;
        }), /* tuple */[
        selectedLevel,
        selectedCoach,
        sortDirection,
        selectedTab,
        reloadAt
      ]);
  var tmp;
  if (typeof submissions === "number") {
    tmp = SkeletonLoading.multiple(10, SkeletonLoading.card(undefined, /* () */0));
  } else if (submissions.tag) {
    tmp = showSubmissions(submissions[0].submissions, selectedTab, levels, sortDirection);
  } else {
    var cursor = submissions[1];
    var submissions$1 = submissions[0].submissions;
    tmp = React.createElement("div", undefined, showSubmissions(submissions$1, selectedTab, levels, sortDirection), state === /* Loading */0 ? SkeletonLoading.multiple(3, SkeletonLoading.card(undefined, /* () */0)) : React.createElement("button", {
                className: "btn btn-primary-ghost cursor-pointer w-full mt-4",
                onClick: (function (param) {
                    Curry._1(setState, (function (_state) {
                            return /* Loading */0;
                          }));
                    return getSubmissions(courseId, cursor, setState, selectedLevel, selectedCoach, sortDirection, selectedTab, submissions$1, updateSubmissionsCB);
                  })
              }, "Load More..."));
  }
  return React.createElement("div", undefined, React.createElement(LoadingSpinner.make, {
                  loading: state === /* Reloading */1
                }), tmp);
}

var make$1 = CoursesReview__SubmissionsTab;

exports.reviewedEmptyImage = reviewedEmptyImage;
exports.pendingEmptyImage = pendingEmptyImage;
exports.str = str;
exports.SubmissionsQuery = SubmissionsQuery;
exports.updateSubmissions = updateSubmissions;
exports.getSubmissions = getSubmissions;
exports.submissionStatus = submissionStatus;
exports.feedbackSentNotice = feedbackSentNotice;
exports.submissionCardClasses = submissionCardClasses;
exports.showSubmission = showSubmission;
exports.showSubmissions = showSubmissions;
exports.make = make$1;
/* reviewedEmptyImage Not a pure module */
