// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var $$Notification = require("../Notification.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var AuthenticityToken = require("./AuthenticityToken.bs.js");

var Graphql_error = Caml_exceptions.create("GraphqlQuery.Graphql_error");

function decodeNotification(json) {
  return {
          kind: Json_decode.field("kind", Json_decode.string, json),
          title: Json_decode.field("title", Json_decode.string, json),
          body: Json_decode.field("body", Json_decode.string, json)
        };
}

function flashNotifications(obj) {
  var match = Js_dict.get(obj, "notifications");
  if (match !== undefined) {
    return List.iter((function (n) {
                  var match = n.kind;
                  var notify;
                  switch (match) {
                    case "error" :
                        notify = $$Notification.error;
                        break;
                    case "success" :
                        notify = $$Notification.success;
                        break;
                    default:
                      notify = $$Notification.notice;
                  }
                  return Curry._2(notify, n.title, n.body);
                }), Json_decode.list(decodeNotification, Caml_option.valFromOption(match)));
  } else {
    return /* () */0;
  }
}

function sendQuery(notifyOpt, q) {
  var notify = notifyOpt !== undefined ? notifyOpt : true;
  return fetch("/graphql", Fetch.RequestInit.make(/* Post */2, [
                        /* tuple */[
                          "X-CSRF-Token",
                          AuthenticityToken.fromHead(/* () */0)
                        ],
                        /* tuple */[
                          "Content-Type",
                          "application/json"
                        ]
                      ], Caml_option.some(JSON.stringify(Js_dict.fromList(/* :: */[
                                    /* tuple */[
                                      "query",
                                      q.query
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "variables",
                                        q.variables
                                      ],
                                      /* [] */0
                                    ]
                                  ]))), undefined, undefined, undefined, /* Include */2, undefined, undefined, undefined, undefined, undefined)(/* () */0)).then((function (resp) {
                  if (resp.ok) {
                    return resp.json();
                  } else {
                    if (notify) {
                      var statusCode = String(resp.status);
                      $$Notification.error("Error " + statusCode, "Our team has been notified of this error. Please reload the page and try again.");
                    }
                    return Promise.reject([
                                Graphql_error,
                                "Request failed: " + resp.statusText
                              ]);
                  }
                })).then((function (json) {
                var match = Js_json.decodeObject(json);
                if (match !== undefined) {
                  var obj = Caml_option.valFromOption(match);
                  if (notify) {
                    flashNotifications(obj);
                  }
                  return Promise.resolve(Curry._1(q.parse, obj["data"]));
                } else {
                  return Promise.reject([
                              Graphql_error,
                              "Response is not an object"
                            ]);
                }
              }));
}

exports.sendQuery = sendQuery;
/* Notification Not a pure module */
