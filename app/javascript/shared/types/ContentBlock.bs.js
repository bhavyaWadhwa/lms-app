// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ListUtils = require("../utils/ListUtils.bs.js");
var ArrayUtils = require("../utils/ArrayUtils.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var UnexpectedBlockType = Caml_exceptions.create("ContentBlock.UnexpectedBlockType");

function decodeMarkdownContent(json) {
  return Json_decode.field("markdown", Json_decode.string, json);
}

function decodeFileContent(json) {
  return Json_decode.field("title", Json_decode.string, json);
}

function decodeImageContent(json) {
  return Json_decode.field("caption", Json_decode.string, json);
}

function decodeEmbedContent(json) {
  return /* tuple */[
          Json_decode.field("url", Json_decode.string, json),
          Json_decode.field("embedCode", Json_decode.string, json)
        ];
}

function decode(json) {
  var unknownBlockType = Json_decode.field("blockType", Json_decode.string, json);
  var blockType;
  switch (unknownBlockType) {
    case "embed" :
        var match = Json_decode.field("content", decodeEmbedContent, json);
        blockType = /* Embed */Block.__(3, [
            match[0],
            match[1]
          ]);
        break;
    case "file" :
        var title = Json_decode.field("content", decodeFileContent, json);
        var url = Json_decode.field("fileUrl", Json_decode.string, json);
        var filename = Json_decode.field("filename", Json_decode.string, json);
        blockType = /* File */Block.__(1, [
            url,
            title,
            filename
          ]);
        break;
    case "image" :
        var caption = Json_decode.field("content", decodeImageContent, json);
        var url$1 = Json_decode.field("fileUrl", Json_decode.string, json);
        blockType = /* Image */Block.__(2, [
            url$1,
            caption
          ]);
        break;
    case "markdown" :
        blockType = /* Markdown */Block.__(0, [Json_decode.field("content", decodeMarkdownContent, json)]);
        break;
    default:
      throw [
            UnexpectedBlockType,
            unknownBlockType
          ];
  }
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          blockType: blockType,
          sortIndex: Json_decode.field("sortIndex", Json_decode.$$int, json)
        };
}

function sort(blocks) {
  return ArrayUtils.copyAndSort((function (x, y) {
                return x.sortIndex - y.sortIndex | 0;
              }), blocks);
}

function id(t) {
  return t.id;
}

function blockType(t) {
  return t.blockType;
}

function sortIndex(t) {
  return t.sortIndex;
}

function makeMarkdownBlock(markdown) {
  return /* Markdown */Block.__(0, [markdown]);
}

function makeImageBlock(fileUrl, caption) {
  return /* Image */Block.__(2, [
            fileUrl,
            caption
          ]);
}

function makeFileBlock(fileUrl, title, fileName) {
  return /* File */Block.__(1, [
            fileUrl,
            title,
            fileName
          ]);
}

function makeEmbedBlock(url, embedCode) {
  return /* Embed */Block.__(3, [
            url,
            embedCode
          ]);
}

function make(id, blockType, sortIndex) {
  return {
          id: id,
          blockType: blockType,
          sortIndex: sortIndex
        };
}

function makeFromJs(js) {
  var id = js.id;
  var sortIndex = js.sortIndex;
  var match = js.content;
  var variant = match[0];
  var blockType;
  if (variant >= 905808084) {
    if (variant >= 930824210) {
      var content = match[1];
      blockType = /* Image */Block.__(2, [
          content.url,
          content.caption
        ]);
    } else {
      var content$1 = match[1];
      blockType = /* Embed */Block.__(3, [
          content$1.url,
          content$1.embedCode
        ]);
    }
  } else if (variant >= -240357442) {
    blockType = /* Markdown */Block.__(0, [match[1].markdown]);
  } else {
    var content$2 = match[1];
    blockType = /* File */Block.__(1, [
        content$2.url,
        content$2.title,
        content$2.filename
      ]);
  }
  return {
          id: id,
          blockType: blockType,
          sortIndex: sortIndex
        };
}

function blockTypeAsString(blockType) {
  switch (blockType.tag | 0) {
    case /* Markdown */0 :
        return "markdown";
    case /* File */1 :
        return "file";
    case /* Image */2 :
        return "image";
    case /* Embed */3 :
        return "embed";
    
  }
}

function incrementSortIndex(t) {
  return {
          id: t.id,
          blockType: t.blockType,
          sortIndex: t.sortIndex + 1 | 0
        };
}

function reindex(ts) {
  return List.mapi((function (sortIndex, t) {
                return {
                        id: t.id,
                        blockType: t.blockType,
                        sortIndex: sortIndex
                      };
              }), ts);
}

function moveUp(t, ts) {
  return $$Array.of_list(reindex(ListUtils.swapUp(t, $$Array.to_list(sort(ts)))));
}

function moveDown(t, ts) {
  return $$Array.of_list(reindex(ListUtils.swapDown(t, $$Array.to_list(sort(ts)))));
}

function updateFile(title, t) {
  var match = t.blockType;
  if (match.tag === /* File */1) {
    return {
            id: t.id,
            blockType: /* File */Block.__(1, [
                match[0],
                title,
                match[2]
              ]),
            sortIndex: t.sortIndex
          };
  } else {
    return t;
  }
}

function updateImage(caption, t) {
  var match = t.blockType;
  if (match.tag === /* Image */2) {
    return {
            id: t.id,
            blockType: /* Image */Block.__(2, [
                match[0],
                caption
              ]),
            sortIndex: t.sortIndex
          };
  } else {
    return t;
  }
}

function updateMarkdown(markdown, t) {
  var match = t.blockType;
  if (match.tag) {
    return t;
  } else {
    return {
            id: t.id,
            blockType: /* Markdown */Block.__(0, [markdown]),
            sortIndex: t.sortIndex
          };
  }
}

var ppx_printed_query = "fragment allFields on ContentBlock   {\nid  \nblockType  \nsortIndex  \ncontent  {\n__typename\n...on ImageBlock   {\ncaption  \nurl  \nfilename  \n}\n\n...on FileBlock   {\ntitle  \nurl  \nfilename  \n}\n\n...on MarkdownBlock   {\nmarkdown  \n}\n\n...on EmbedBlock   {\nurl  \nembedCode  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "id");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeString(value$2);
    tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field id on type ContentBlock is missing");
  }
  var match$2 = Js_dict.get(value$1, "blockType");
  var tmp$1;
  if (match$2 !== undefined) {
    var value$3 = Caml_option.valFromOption(match$2);
    var match$3 = Js_json.decodeString(value$3);
    tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
  } else {
    tmp$1 = Js_exn.raiseError("graphql_ppx: Field blockType on type ContentBlock is missing");
  }
  var match$4 = Js_dict.get(value$1, "sortIndex");
  var tmp$2;
  if (match$4 !== undefined) {
    var value$4 = Caml_option.valFromOption(match$4);
    var match$5 = Js_json.decodeNumber(value$4);
    tmp$2 = match$5 !== undefined ? match$5 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$4));
  } else {
    tmp$2 = Js_exn.raiseError("graphql_ppx: Field sortIndex on type ContentBlock is missing");
  }
  var match$6 = Js_dict.get(value$1, "content");
  var tmp$3;
  if (match$6 !== undefined) {
    var value$5 = Caml_option.valFromOption(match$6);
    var match$7 = Js_json.decodeObject(value$5);
    if (match$7 !== undefined) {
      var match$8 = Js_dict.get(Caml_option.valFromOption(match$7), "__typename");
      if (match$8 !== undefined) {
        var match$9 = Js_json.decodeString(Caml_option.valFromOption(match$8));
        if (match$9 !== undefined) {
          var typename = match$9;
          switch (typename) {
            case "EmbedBlock" :
                var value$6 = Js_option.getExn(Js_json.decodeObject(value$5));
                var match$10 = Js_dict.get(value$6, "url");
                var tmp$4;
                if (match$10 !== undefined) {
                  var value$7 = Caml_option.valFromOption(match$10);
                  var match$11 = Js_json.decodeString(value$7);
                  tmp$4 = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
                } else {
                  tmp$4 = Js_exn.raiseError("graphql_ppx: Field url on type EmbedBlock is missing");
                }
                var match$12 = Js_dict.get(value$6, "embedCode");
                var tmp$5;
                if (match$12 !== undefined) {
                  var value$8 = Caml_option.valFromOption(match$12);
                  var match$13 = Js_json.decodeString(value$8);
                  tmp$5 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
                } else {
                  tmp$5 = Js_exn.raiseError("graphql_ppx: Field embedCode on type EmbedBlock is missing");
                }
                tmp$3 = /* `EmbedBlock */[
                  905808084,
                  {
                    url: tmp$4,
                    embedCode: tmp$5
                  }
                ];
                break;
            case "FileBlock" :
                var value$9 = Js_option.getExn(Js_json.decodeObject(value$5));
                var match$14 = Js_dict.get(value$9, "title");
                var tmp$6;
                if (match$14 !== undefined) {
                  var value$10 = Caml_option.valFromOption(match$14);
                  var match$15 = Js_json.decodeString(value$10);
                  tmp$6 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$10));
                } else {
                  tmp$6 = Js_exn.raiseError("graphql_ppx: Field title on type FileBlock is missing");
                }
                var match$16 = Js_dict.get(value$9, "url");
                var tmp$7;
                if (match$16 !== undefined) {
                  var value$11 = Caml_option.valFromOption(match$16);
                  var match$17 = Js_json.decodeString(value$11);
                  tmp$7 = match$17 !== undefined ? match$17 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$11));
                } else {
                  tmp$7 = Js_exn.raiseError("graphql_ppx: Field url on type FileBlock is missing");
                }
                var match$18 = Js_dict.get(value$9, "filename");
                var tmp$8;
                if (match$18 !== undefined) {
                  var value$12 = Caml_option.valFromOption(match$18);
                  var match$19 = Js_json.decodeString(value$12);
                  tmp$8 = match$19 !== undefined ? match$19 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$12));
                } else {
                  tmp$8 = Js_exn.raiseError("graphql_ppx: Field filename on type FileBlock is missing");
                }
                tmp$3 = /* `FileBlock */[
                  -654904047,
                  {
                    title: tmp$6,
                    url: tmp$7,
                    filename: tmp$8
                  }
                ];
                break;
            case "ImageBlock" :
                var value$13 = Js_option.getExn(Js_json.decodeObject(value$5));
                var match$20 = Js_dict.get(value$13, "caption");
                var tmp$9;
                if (match$20 !== undefined) {
                  var value$14 = Caml_option.valFromOption(match$20);
                  var match$21 = Js_json.decodeString(value$14);
                  tmp$9 = match$21 !== undefined ? match$21 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$14));
                } else {
                  tmp$9 = Js_exn.raiseError("graphql_ppx: Field caption on type ImageBlock is missing");
                }
                var match$22 = Js_dict.get(value$13, "url");
                var tmp$10;
                if (match$22 !== undefined) {
                  var value$15 = Caml_option.valFromOption(match$22);
                  var match$23 = Js_json.decodeString(value$15);
                  tmp$10 = match$23 !== undefined ? match$23 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$15));
                } else {
                  tmp$10 = Js_exn.raiseError("graphql_ppx: Field url on type ImageBlock is missing");
                }
                var match$24 = Js_dict.get(value$13, "filename");
                var tmp$11;
                if (match$24 !== undefined) {
                  var value$16 = Caml_option.valFromOption(match$24);
                  var match$25 = Js_json.decodeString(value$16);
                  tmp$11 = match$25 !== undefined ? match$25 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$16));
                } else {
                  tmp$11 = Js_exn.raiseError("graphql_ppx: Field filename on type ImageBlock is missing");
                }
                tmp$3 = /* `ImageBlock */[
                  930824210,
                  {
                    caption: tmp$9,
                    url: tmp$10,
                    filename: tmp$11
                  }
                ];
                break;
            case "MarkdownBlock" :
                var value$17 = Js_option.getExn(Js_json.decodeObject(value$5));
                var match$26 = Js_dict.get(value$17, "markdown");
                var tmp$12;
                if (match$26 !== undefined) {
                  var value$18 = Caml_option.valFromOption(match$26);
                  var match$27 = Js_json.decodeString(value$18);
                  tmp$12 = match$27 !== undefined ? match$27 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$18));
                } else {
                  tmp$12 = Js_exn.raiseError("graphql_ppx: Field markdown on type MarkdownBlock is missing");
                }
                tmp$3 = /* `MarkdownBlock */[
                  -240357442,
                  {
                    markdown: tmp$12
                  }
                ];
                break;
            default:
              tmp$3 = Js_exn.raiseError("graphql_ppx: Union Content returned unknown type " + typename);
          }
        } else {
          tmp$3 = Js_exn.raiseError("graphql_ppx: Union Content has a __typename field that is not a string");
        }
      } else {
        tmp$3 = Js_exn.raiseError("graphql_ppx: Union Content is missing the __typename field");
      }
    } else {
      tmp$3 = Js_exn.raiseError("graphql_ppx: Expected union Content to be an object, got " + JSON.stringify(value$5));
    }
  } else {
    tmp$3 = Js_exn.raiseError("graphql_ppx: Field content on type ContentBlock is missing");
  }
  return {
          id: tmp,
          blockType: tmp$1,
          sortIndex: tmp$2,
          content: tmp$3
        };
}

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var AllFields = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  name: "allFields",
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var Fragments = {
  AllFields: AllFields
};

var ppx_printed_query$1 = "query ContentBlocksWithVersionsQuery($targetId: ID!, $targetVersionId: ID)  {\ncontentBlocks(targetId: $targetId, targetVersionId: $targetVersionId)  {\nid  \nblockType  \nsortIndex  \ncontent  {\n__typename\n...on ImageBlock   {\ncaption  \nurl  \nfilename  \n}\n\n...on FileBlock   {\ntitle  \nurl  \nfilename  \n}\n\n...on MarkdownBlock   {\nmarkdown  \n}\n\n...on EmbedBlock   {\nurl  \nembedCode  \n}\n\n}\n\n}\n\ntargetVersions(targetId: $targetId)  {\nid  \ncreatedAt  \nupdatedAt  \n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "contentBlocks");
  var match$1 = Js_dict.get(value$1, "targetVersions");
  return {
          contentBlocks: match !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match))).map((function (value) {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var match = Js_dict.get(value$1, "id");
                    var tmp;
                    if (match !== undefined) {
                      var value$2 = Caml_option.valFromOption(match);
                      var match$1 = Js_json.decodeString(value$2);
                      tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Field id on type ContentBlock is missing");
                    }
                    var match$2 = Js_dict.get(value$1, "blockType");
                    var tmp$1;
                    if (match$2 !== undefined) {
                      var value$3 = Caml_option.valFromOption(match$2);
                      var match$3 = Js_json.decodeString(value$3);
                      tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                    } else {
                      tmp$1 = Js_exn.raiseError("graphql_ppx: Field blockType on type ContentBlock is missing");
                    }
                    var match$4 = Js_dict.get(value$1, "sortIndex");
                    var tmp$2;
                    if (match$4 !== undefined) {
                      var value$4 = Caml_option.valFromOption(match$4);
                      var match$5 = Js_json.decodeNumber(value$4);
                      tmp$2 = match$5 !== undefined ? match$5 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$4));
                    } else {
                      tmp$2 = Js_exn.raiseError("graphql_ppx: Field sortIndex on type ContentBlock is missing");
                    }
                    var match$6 = Js_dict.get(value$1, "content");
                    var tmp$3;
                    if (match$6 !== undefined) {
                      var value$5 = Caml_option.valFromOption(match$6);
                      var match$7 = Js_json.decodeObject(value$5);
                      if (match$7 !== undefined) {
                        var match$8 = Js_dict.get(Caml_option.valFromOption(match$7), "__typename");
                        if (match$8 !== undefined) {
                          var match$9 = Js_json.decodeString(Caml_option.valFromOption(match$8));
                          if (match$9 !== undefined) {
                            var typename = match$9;
                            switch (typename) {
                              case "EmbedBlock" :
                                  var value$6 = Js_option.getExn(Js_json.decodeObject(value$5));
                                  var match$10 = Js_dict.get(value$6, "url");
                                  var tmp$4;
                                  if (match$10 !== undefined) {
                                    var value$7 = Caml_option.valFromOption(match$10);
                                    var match$11 = Js_json.decodeString(value$7);
                                    tmp$4 = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
                                  } else {
                                    tmp$4 = Js_exn.raiseError("graphql_ppx: Field url on type EmbedBlock is missing");
                                  }
                                  var match$12 = Js_dict.get(value$6, "embedCode");
                                  var tmp$5;
                                  if (match$12 !== undefined) {
                                    var value$8 = Caml_option.valFromOption(match$12);
                                    var match$13 = Js_json.decodeString(value$8);
                                    tmp$5 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
                                  } else {
                                    tmp$5 = Js_exn.raiseError("graphql_ppx: Field embedCode on type EmbedBlock is missing");
                                  }
                                  tmp$3 = /* `EmbedBlock */[
                                    905808084,
                                    {
                                      url: tmp$4,
                                      embedCode: tmp$5
                                    }
                                  ];
                                  break;
                              case "FileBlock" :
                                  var value$9 = Js_option.getExn(Js_json.decodeObject(value$5));
                                  var match$14 = Js_dict.get(value$9, "title");
                                  var tmp$6;
                                  if (match$14 !== undefined) {
                                    var value$10 = Caml_option.valFromOption(match$14);
                                    var match$15 = Js_json.decodeString(value$10);
                                    tmp$6 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$10));
                                  } else {
                                    tmp$6 = Js_exn.raiseError("graphql_ppx: Field title on type FileBlock is missing");
                                  }
                                  var match$16 = Js_dict.get(value$9, "url");
                                  var tmp$7;
                                  if (match$16 !== undefined) {
                                    var value$11 = Caml_option.valFromOption(match$16);
                                    var match$17 = Js_json.decodeString(value$11);
                                    tmp$7 = match$17 !== undefined ? match$17 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$11));
                                  } else {
                                    tmp$7 = Js_exn.raiseError("graphql_ppx: Field url on type FileBlock is missing");
                                  }
                                  var match$18 = Js_dict.get(value$9, "filename");
                                  var tmp$8;
                                  if (match$18 !== undefined) {
                                    var value$12 = Caml_option.valFromOption(match$18);
                                    var match$19 = Js_json.decodeString(value$12);
                                    tmp$8 = match$19 !== undefined ? match$19 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$12));
                                  } else {
                                    tmp$8 = Js_exn.raiseError("graphql_ppx: Field filename on type FileBlock is missing");
                                  }
                                  tmp$3 = /* `FileBlock */[
                                    -654904047,
                                    {
                                      title: tmp$6,
                                      url: tmp$7,
                                      filename: tmp$8
                                    }
                                  ];
                                  break;
                              case "ImageBlock" :
                                  var value$13 = Js_option.getExn(Js_json.decodeObject(value$5));
                                  var match$20 = Js_dict.get(value$13, "caption");
                                  var tmp$9;
                                  if (match$20 !== undefined) {
                                    var value$14 = Caml_option.valFromOption(match$20);
                                    var match$21 = Js_json.decodeString(value$14);
                                    tmp$9 = match$21 !== undefined ? match$21 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$14));
                                  } else {
                                    tmp$9 = Js_exn.raiseError("graphql_ppx: Field caption on type ImageBlock is missing");
                                  }
                                  var match$22 = Js_dict.get(value$13, "url");
                                  var tmp$10;
                                  if (match$22 !== undefined) {
                                    var value$15 = Caml_option.valFromOption(match$22);
                                    var match$23 = Js_json.decodeString(value$15);
                                    tmp$10 = match$23 !== undefined ? match$23 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$15));
                                  } else {
                                    tmp$10 = Js_exn.raiseError("graphql_ppx: Field url on type ImageBlock is missing");
                                  }
                                  var match$24 = Js_dict.get(value$13, "filename");
                                  var tmp$11;
                                  if (match$24 !== undefined) {
                                    var value$16 = Caml_option.valFromOption(match$24);
                                    var match$25 = Js_json.decodeString(value$16);
                                    tmp$11 = match$25 !== undefined ? match$25 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$16));
                                  } else {
                                    tmp$11 = Js_exn.raiseError("graphql_ppx: Field filename on type ImageBlock is missing");
                                  }
                                  tmp$3 = /* `ImageBlock */[
                                    930824210,
                                    {
                                      caption: tmp$9,
                                      url: tmp$10,
                                      filename: tmp$11
                                    }
                                  ];
                                  break;
                              case "MarkdownBlock" :
                                  var value$17 = Js_option.getExn(Js_json.decodeObject(value$5));
                                  var match$26 = Js_dict.get(value$17, "markdown");
                                  var tmp$12;
                                  if (match$26 !== undefined) {
                                    var value$18 = Caml_option.valFromOption(match$26);
                                    var match$27 = Js_json.decodeString(value$18);
                                    tmp$12 = match$27 !== undefined ? match$27 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$18));
                                  } else {
                                    tmp$12 = Js_exn.raiseError("graphql_ppx: Field markdown on type MarkdownBlock is missing");
                                  }
                                  tmp$3 = /* `MarkdownBlock */[
                                    -240357442,
                                    {
                                      markdown: tmp$12
                                    }
                                  ];
                                  break;
                              default:
                                tmp$3 = Js_exn.raiseError("graphql_ppx: Union Content returned unknown type " + typename);
                            }
                          } else {
                            tmp$3 = Js_exn.raiseError("graphql_ppx: Union Content has a __typename field that is not a string");
                          }
                        } else {
                          tmp$3 = Js_exn.raiseError("graphql_ppx: Union Content is missing the __typename field");
                        }
                      } else {
                        tmp$3 = Js_exn.raiseError("graphql_ppx: Expected union Content to be an object, got " + JSON.stringify(value$5));
                      }
                    } else {
                      tmp$3 = Js_exn.raiseError("graphql_ppx: Field content on type ContentBlock is missing");
                    }
                    return {
                            id: tmp,
                            blockType: tmp$1,
                            sortIndex: tmp$2,
                            content: tmp$3
                          };
                  })) : Js_exn.raiseError("graphql_ppx: Field contentBlocks on type Query is missing"),
          targetVersions: match$1 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$1))).map((function (value) {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var match = Js_dict.get(value$1, "id");
                    var tmp;
                    if (match !== undefined) {
                      var value$2 = Caml_option.valFromOption(match);
                      var match$1 = Js_json.decodeString(value$2);
                      tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Field id on type TargetVersion is missing");
                    }
                    var match$2 = Js_dict.get(value$1, "createdAt");
                    var match$3 = Js_dict.get(value$1, "updatedAt");
                    return {
                            id: tmp,
                            createdAt: match$2 !== undefined ? Caml_option.valFromOption(match$2) : Js_exn.raiseError("graphql_ppx: Field createdAt on type TargetVersion is missing"),
                            updatedAt: match$3 !== undefined ? Caml_option.valFromOption(match$3) : Js_exn.raiseError("graphql_ppx: Field updatedAt on type TargetVersion is missing")
                          };
                  })) : Js_exn.raiseError("graphql_ppx: Field targetVersions on type Query is missing")
        };
}

function make$1(targetId, targetVersionId, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "targetId",
                    targetId
                  ],
                  /* tuple */[
                    "targetVersionId",
                    targetVersionId !== undefined ? targetVersionId : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeWithVariables(variables) {
  var targetId = variables.targetId;
  var targetVersionId = variables.targetVersionId;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "targetId",
                    targetId
                  ],
                  /* tuple */[
                    "targetVersionId",
                    targetVersionId !== undefined ? targetVersionId : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeVariables(targetId, targetVersionId, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "targetId",
                  targetId
                ],
                /* tuple */[
                  "targetVersionId",
                  targetVersionId !== undefined ? targetVersionId : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, targetId, targetVersionId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "targetId",
                      targetId
                    ],
                    /* tuple */[
                      "targetVersionId",
                      targetVersionId !== undefined ? targetVersionId : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var Query = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  make: make$1,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

exports.UnexpectedBlockType = UnexpectedBlockType;
exports.decodeMarkdownContent = decodeMarkdownContent;
exports.decodeFileContent = decodeFileContent;
exports.decodeImageContent = decodeImageContent;
exports.decodeEmbedContent = decodeEmbedContent;
exports.decode = decode;
exports.sort = sort;
exports.id = id;
exports.blockType = blockType;
exports.sortIndex = sortIndex;
exports.makeMarkdownBlock = makeMarkdownBlock;
exports.makeImageBlock = makeImageBlock;
exports.makeFileBlock = makeFileBlock;
exports.makeEmbedBlock = makeEmbedBlock;
exports.make = make;
exports.makeFromJs = makeFromJs;
exports.blockTypeAsString = blockTypeAsString;
exports.incrementSortIndex = incrementSortIndex;
exports.reindex = reindex;
exports.moveUp = moveUp;
exports.moveDown = moveDown;
exports.updateFile = updateFile;
exports.updateImage = updateImage;
exports.updateMarkdown = updateMarkdown;
exports.Fragments = Fragments;
exports.Query = Query;
/* ArrayUtils Not a pure module */
