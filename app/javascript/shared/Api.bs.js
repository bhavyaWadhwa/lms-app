// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var $$Notification = require("./Notification.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var UnexpectedResponse = Caml_exceptions.create("Api.UnexpectedResponse");

function handleApiError(match) {
  if (Caml_exceptions.caml_is_extension(match) && match[0] === UnexpectedResponse) {
    return match[1];
  }
  
}

function acceptOrRejectResponse(response) {
  if (response.ok || response.status === 422) {
    return response.json();
  } else {
    return Promise.reject([
                UnexpectedResponse,
                response.status
              ]);
  }
}

function handleResponseError(error) {
  var message = "Our team has been notified of this error. Please reload the page and try again.";
  var match = handleApiError(error);
  if (match !== undefined) {
    return $$Notification.error(String(match), message);
  } else {
    return $$Notification.error("An unexpected error occurred", message);
  }
}

function handleResponseJSON(json, responseCB, errorCB) {
  var error = Json_decode.optional((function (param) {
          return Json_decode.field("error", Json_decode.string, param);
        }), json);
  if (error !== undefined) {
    $$Notification.error("Something went wrong!", error);
    return Curry._1(errorCB, /* () */0);
  } else {
    return Curry._1(responseCB, json);
  }
}

function handleResponse(responseCB, errorCB, promise) {
  promise.then(acceptOrRejectResponse).then((function (json) {
            return Promise.resolve(handleResponseJSON(json, responseCB, errorCB));
          })).catch((function (error) {
          Curry._1(errorCB, /* () */0);
          console.log(error);
          return Promise.resolve(handleResponseError(handleApiError(error)));
        }));
  return /* () */0;
}

function sendPayload(url, payload, responseCB, errorCB, method_) {
  return handleResponse(responseCB, errorCB, fetch(url, Fetch.RequestInit.make(method_, {
                        "Content-Type": "application/json"
                      }, Caml_option.some(JSON.stringify(payload)), undefined, undefined, undefined, /* SameOrigin */1, undefined, undefined, undefined, undefined, undefined)(/* () */0)));
}

function sendFormData(url, formData, responseCB, errorCB) {
  return handleResponse(responseCB, errorCB, fetch(url, Fetch.RequestInit.make(/* Post */2, undefined, Caml_option.some(formData), undefined, undefined, undefined, /* SameOrigin */1, undefined, undefined, undefined, undefined, undefined)(/* () */0)));
}

function create(url, payload, responseCB, errorCB) {
  return sendPayload(url, payload, responseCB, errorCB, /* Post */2);
}

function update(url, payload, responseCB, errorCB) {
  return sendPayload(url, payload, responseCB, errorCB, /* Patch */8);
}

exports.UnexpectedResponse = UnexpectedResponse;
exports.handleApiError = handleApiError;
exports.acceptOrRejectResponse = acceptOrRejectResponse;
exports.handleResponseError = handleResponseError;
exports.handleResponseJSON = handleResponseJSON;
exports.handleResponse = handleResponse;
exports.sendPayload = sendPayload;
exports.sendFormData = sendFormData;
exports.create = create;
exports.update = update;
/* Notification Not a pure module */
