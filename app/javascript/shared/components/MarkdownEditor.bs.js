// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Api = require("../Api.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FaIcon = require("./FaIcon.bs.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var DateTime = require("../utils/DateTime.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var OptionUtils = require("../utils/OptionUtils.bs.js");
var MarkdownBlock = require("./MarkdownBlock.bs.js");
var DisablingCover = require("./DisablingCover.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var TextareaAutosize = require("../utils/TextareaAutosize.bs.js");
var AuthenticityToken = require("../utils/AuthenticityToken.bs.js");
var Webapi__Dom__HtmlElement = require("bs-webapi/src/Webapi/Webapi__Dom/Webapi__Dom__HtmlElement.js");

var InvalidModeForPreview = Caml_exceptions.create("MarkdownEditor.InvalidModeForPreview");

((require("./MarkdownEditor.css")));

function str(prim) {
  return prim;
}

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* ClickPreview */0 :
          var match = state.mode;
          var mode;
          mode = match.tag ? (
              match[0] >= 153880552 ? /* Windowed */Block.__(1, [/* Editor */-260983347]) : /* Windowed */Block.__(1, [/* Preview */153880552])
            ) : (
              match[0] !== 153880552 ? /* Fullscreen */Block.__(0, [/* Preview */153880552]) : /* Fullscreen */Block.__(0, [/* Editor */-260983347])
            );
          return {
                  id: state.id,
                  mode: mode,
                  selection: state.selection,
                  uploadState: state.uploadState
                };
      case /* ClickSplit */1 :
          var match$1 = state.mode;
          var mode$1;
          mode$1 = match$1.tag || match$1[0] < 345791162 ? /* Fullscreen */Block.__(0, [/* Split */345791162]) : /* Fullscreen */Block.__(0, [/* Editor */-260983347]);
          return {
                  id: state.id,
                  mode: mode$1,
                  selection: state.selection,
                  uploadState: state.uploadState
                };
      case /* ClickFullscreen */2 :
          var match$2 = state.mode;
          var mode$2;
          mode$2 = match$2.tag ? (
              match$2[0] >= 153880552 ? /* Fullscreen */Block.__(0, [/* Preview */153880552]) : /* Fullscreen */Block.__(0, [/* Editor */-260983347])
            ) : (
              match$2[0] !== 153880552 ? /* Windowed */Block.__(1, [/* Editor */-260983347]) : /* Windowed */Block.__(1, [/* Preview */153880552])
            );
          return {
                  id: state.id,
                  mode: mode$2,
                  selection: state.selection,
                  uploadState: state.uploadState
                };
      case /* PressEscapeKey */3 :
          var match$3 = state.mode;
          var mode$3;
          if (match$3.tag) {
            mode$3 = match$3[0] >= 153880552 ? /* Windowed */Block.__(1, [/* Preview */153880552]) : /* Windowed */Block.__(1, [/* Editor */-260983347]);
          } else {
            var match$4 = match$3[0];
            mode$3 = match$4 !== 153880552 ? /* Windowed */Block.__(1, [/* Editor */-260983347]) : /* Windowed */Block.__(1, [/* Preview */153880552]);
          }
          return {
                  id: state.id,
                  mode: mode$3,
                  selection: state.selection,
                  uploadState: state.uploadState
                };
      case /* SetUploading */4 :
          return {
                  id: state.id,
                  mode: state.mode,
                  selection: state.selection,
                  uploadState: /* Uploading */0
                };
      case /* FinishUploading */5 :
          return {
                  id: state.id,
                  mode: state.mode,
                  selection: state.selection,
                  uploadState: /* ReadyToUpload */[undefined]
                };
      
    }
  } else {
    switch (action.tag | 0) {
      case /* SetSelection */0 :
          return {
                  id: state.id,
                  mode: state.mode,
                  selection: action[0],
                  uploadState: state.uploadState
                };
      case /* BumpSelection */1 :
          var offset = action[0];
          var match$5 = state.selection;
          return {
                  id: state.id,
                  mode: state.mode,
                  selection: /* tuple */[
                    match$5[0] + offset | 0,
                    match$5[1] + offset | 0
                  ],
                  uploadState: state.uploadState
                };
      case /* SetUploadError */2 :
          return {
                  id: state.id,
                  mode: state.mode,
                  selection: state.selection,
                  uploadState: /* ReadyToUpload */[action[0]]
                };
      
    }
  }
}

function computeInitialState(param) {
  var textareaId = param[1];
  var id = textareaId !== undefined ? textareaId : DateTime.randomId(/* () */0);
  var length = param[0].length;
  return {
          id: id,
          mode: param[2],
          selection: /* tuple */[
            length,
            length
          ],
          uploadState: /* ReadyToUpload */[undefined]
        };
}

function containerClasses(mode) {
  if (mode.tag) {
    return "relative bg-white";
  } else {
    return "bg-white fixed z-50 top-0 left-0 h-screen w-screen flex flex-col";
  }
}

function modeIcon(desiredMode, currentMode) {
  var icon = desiredMode !== 153880552 ? (
      desiredMode >= 345791162 ? (
          currentMode.tag || currentMode[0] < 345791162 ? "fas fa-columns" : "far fa-window-maximize"
        ) : (
          currentMode.tag ? "fas fa-expand" : "fas fa-compress"
        )
    ) : (
      currentMode.tag ? (
          currentMode[0] >= 153880552 ? "fas fa-pen-nib" : "fas fa-eye"
        ) : (
          currentMode[0] !== 153880552 ? "fas fa-eye" : "fas fa-pen-nib"
        )
    );
  return React.createElement(FaIcon.make, {
              classes: "fa-fw " + icon
            });
}

function onClickFullscreen(state, send, _event) {
  var match = state.mode;
  if (match.tag) {
    TextareaAutosize.destroy(state.id);
  }
  return Curry._1(send, /* ClickFullscreen */2);
}

function onClickPreview(state, send, _event) {
  var match = state.mode;
  if (match.tag && match[0] < 153880552) {
    TextareaAutosize.destroy(state.id);
  }
  return Curry._1(send, /* ClickPreview */0);
}

function onClickSplit(state, send, _event) {
  var match = state.mode;
  if (match.tag) {
    TextareaAutosize.destroy(state.id);
  }
  return Curry._1(send, /* ClickSplit */1);
}

function insertAt(textToInsert, position, sourceText) {
  var head = $$String.sub(sourceText, 0, position);
  var tail = $$String.sub(sourceText, position, sourceText.length - position | 0);
  return head + (textToInsert + tail);
}

function wrapWith(wrapper, selectionStart, selectionEnd, sourceText) {
  var head = $$String.sub(sourceText, 0, selectionStart);
  var selection = $$String.sub(sourceText, selectionStart, selectionEnd - selectionStart | 0);
  var tail = $$String.sub(sourceText, selectionEnd, sourceText.length - selectionEnd | 0);
  return head + (wrapper + (selection + (wrapper + tail)));
}

function updateTextareaAfterDelay(state, cursorPosition) {
  var match = state.mode;
  if (match.tag) {
    setTimeout((function (param) {
            return TextareaAutosize.update(state.id);
          }), 25);
  }
  var match$1 = document.getElementById(state.id);
  if (match$1 == null) {
    return /* () */0;
  } else {
    setTimeout((function (param) {
            match$1.setSelectionRange(cursorPosition, cursorPosition);
            return /* () */0;
          }), 25);
    return /* () */0;
  }
}

function finalizeChange(oldValue, newValue, state, send, onChange) {
  var offset = newValue.length - oldValue.length | 0;
  var match = state.selection;
  Curry._1(send, /* BumpSelection */Block.__(1, [offset / 2 | 0]));
  Curry._1(onChange, newValue);
  return updateTextareaAfterDelay(state, match[1] + offset | 0);
}

function insertAndWrapper(phraseModifer) {
  switch (phraseModifer) {
    case /* Bold */0 :
        return /* tuple */[
                "**bold**",
                "**"
              ];
    case /* Italic */1 :
        return /* tuple */[
                "*italics*",
                "*"
              ];
    case /* Strikethrough */2 :
        return /* tuple */[
                "~~strikethrough~~",
                "~~"
              ];
    
  }
}

function modifyPhrase(oldValue, state, send, onChange, phraseModifer) {
  var match = state.selection;
  var selectionEnd = match[1];
  var selectionStart = match[0];
  var match$1 = insertAndWrapper(phraseModifer);
  var newValue = selectionStart === selectionEnd ? insertAt(match$1[0], selectionStart, oldValue) : wrapWith(match$1[1], selectionStart, selectionEnd, oldValue);
  return finalizeChange(oldValue, newValue, state, send, onChange);
}

function controlsContainerClasses(mode) {
  var tmp;
  tmp = mode.tag ? "rounded-t border-gray-400 sticky top-0 z-20" : "border-gray-400 ";
  return "border bg-gray-100 text-sm px-2 flex justify-between items-end " + tmp;
}

function controls(value, state, send, onChange) {
  var buttonClasses = "px-2 py-1 hover:bg-gray-300 hover:text-primary-500 focus:outline-none ";
  var mode = state.mode;
  var curriedModifyPhrase = function (param) {
    return modifyPhrase(value, state, send, onChange, param);
  };
  var tmp;
  var exit = 0;
  if (mode.tag) {
    if (mode[0] >= 153880552) {
      tmp = React.createElement("div", undefined);
    } else {
      exit = 1;
    }
  } else if (mode[0] !== 153880552) {
    exit = 1;
  } else {
    tmp = React.createElement("div", undefined);
  }
  if (exit === 1) {
    tmp = React.createElement("div", {
          className: "bg-white border border-gray-400 rounded-t border-b-0"
        }, React.createElement("button", {
              className: buttonClasses,
              onClick: (function (param) {
                  return curriedModifyPhrase(/* Bold */0);
                })
            }, React.createElement("i", {
                  className: "fas fa-bold fa-fw"
                })), React.createElement("button", {
              className: "px-2 py-1 hover:bg-gray-300 hover:text-primary-500 focus:outline-none border-l border-gray-400",
              onClick: (function (param) {
                  return curriedModifyPhrase(/* Italic */1);
                })
            }, React.createElement("i", {
                  className: "fas fa-italic fa-fw"
                })), React.createElement("button", {
              className: "px-2 py-1 hover:bg-gray-300 hover:text-primary-500 focus:outline-none border-l border-gray-400",
              onClick: (function (param) {
                  return curriedModifyPhrase(/* Strikethrough */2);
                })
            }, React.createElement("i", {
                  className: "fas fa-strikethrough fa-fw"
                })));
  }
  var tmp$1;
  tmp$1 = mode.tag ? null : React.createElement("span", {
          className: "ml-2 text-xs font-semibold"
        }, "Exit full-screen");
  return React.createElement("div", {
              className: controlsContainerClasses(state.mode)
            }, tmp, React.createElement("div", {
                  className: "py-1"
                }, React.createElement("button", {
                      className: "rounded px-2 py-1 hover:bg-gray-300 hover:text-primary-500 focus:outline-none ",
                      onClick: (function (param) {
                          return onClickPreview(state, send, param);
                        })
                    }, modeIcon(/* Preview */153880552, mode)), React.createElement("button", {
                      className: "px-2 py-1 hover:bg-gray-300 hover:text-primary-500 focus:outline-none rounded ml-1 hidden md:inline",
                      onClick: (function (param) {
                          return onClickSplit(state, send, param);
                        })
                    }, modeIcon(/* Split */345791162, mode)), React.createElement("button", {
                      className: "px-2 py-1 hover:bg-gray-300 hover:text-primary-500 focus:outline-none rounded  ml-1 hidden md:inline",
                      onClick: (function (param) {
                          return onClickFullscreen(state, send, param);
                        })
                    }, modeIcon(/* Fullscreen */-261800357, mode), tmp$1)));
}

function modeClasses(mode) {
  if (mode.tag) {
    return "";
  } else {
    return "flex flex-grow";
  }
}

function editorContainerClasses(mode) {
  var tmp;
  if (mode.tag) {
    tmp = mode[0] >= 153880552 ? "hidden" : "border-l";
  } else {
    var match = mode[0];
    tmp = match !== 153880552 ? (
        match >= 345791162 ? "w-1/2" : "w-full"
      ) : "hidden";
  }
  return "border-r border-gray-400 " + tmp;
}

function previewType(mode) {
  if (mode.tag) {
    if (mode[0] >= 153880552) {
      return /* WindowedPreview */-12288167;
    } else {
      throw InvalidModeForPreview;
    }
  } else {
    var match = mode[0];
    if (match !== 153880552) {
      if (match >= 345791162) {
        return /* FullscreenSplit */418394751;
      } else {
        throw InvalidModeForPreview;
      }
    } else {
      return /* FullscreenPreview */737745645;
    }
  }
}

function previewContainerClasses(mode) {
  var match = previewType(mode);
  return "border-gray-400 bg-gray-100 " + (
          match !== 418394751 ? (
              match >= 737745645 ? "w-screen mx-auto" : "markdown-editor__windowed-preview-container border-l border-r border-b rounded-b px-2 md:px-3"
            ) : "w-1/2 relative"
        );
}

function previewClasses(mode) {
  if (mode.tag || mode[0] < 153880552) {
    return "";
  } else {
    return "absolute max-h-full overflow-auto w-full px-4 pb-8";
  }
}

function focusOnEditor(id) {
  return OptionUtils.mapWithDefault((function (element) {
                element.focus();
                return /* () */0;
              }), /* () */0, OptionUtils.flatMap(Webapi__Dom__HtmlElement.ofElement, Caml_option.nullable_to_opt(document.getElementById(id))));
}

function handleUploadFileResponse(oldValue, state, send, onChange, json) {
  var errors = Json_decode.field("errors", (function (param) {
          return Json_decode.array(Json_decode.string, param);
        }), json);
  if (Caml_obj.caml_equal(errors, [])) {
    var markdownEmbedCode = Json_decode.field("markdownEmbedCode", Json_decode.string, json);
    var insert = "\n" + (markdownEmbedCode + "\n");
    var match = state.selection;
    var newValue = insertAt(insert, match[1], oldValue);
    finalizeChange(oldValue, newValue, state, send, onChange);
    return Curry._1(send, /* FinishUploading */5);
  } else {
    return Curry._1(send, /* SetUploadError */Block.__(2, ["Failed to attach file! " + errors.join(", ")]));
  }
}

function submitForm(formId, oldValue, state, send, onChange) {
  return OptionUtils.mapWithDefault((function (element) {
                var formData = new FormData(element);
                return Api.sendFormData("/markdown_attachments/", formData, (function (param) {
                              return handleUploadFileResponse(oldValue, state, send, onChange, param);
                            }), (function (param) {
                              return Curry._1(send, /* SetUploadError */Block.__(2, ["An unexpected error occured! Please reload the page before trying again."]));
                            }));
              }), /* () */0, Caml_option.nullable_to_opt(document.getElementById(formId)));
}

function attachFile(fileFormId, oldValue, state, send, onChange, $$event) {
  var files = $$event.target.files;
  if (files.length !== 0) {
    var file = Caml_array.caml_array_get(files, 0);
    var error = file.size > 5242880 ? "The maximum file size is 5 MB. Please select another file." : undefined;
    if (error !== undefined) {
      return Curry._1(send, /* SetUploadError */Block.__(2, [error]));
    } else {
      Curry._1(send, /* SetUploading */4);
      return submitForm(fileFormId, oldValue, state, send, onChange);
    }
  } else {
    return /* () */0;
  }
}

function footerContainerClasses(mode) {
  var tmp;
  tmp = mode.tag ? "rounded-b border-gray-400" : "border-gray-400";
  return "markdown-editor__footer-container border bg-gray-100 flex justify-between items-center " + tmp;
}

function footer(oldValue, state, send, onChange) {
  var id = state.id;
  var fileFormId = id + "-file-form";
  var fileInputId = id + "-file-input";
  var match = state.mode;
  if (match.tag) {
    if (match[0] >= 153880552) {
      return null;
    }
    
  } else if (match[0] === 153880552) {
    return null;
  }
  var match$1 = state.uploadState;
  var tmp;
  if (match$1) {
    var error = match$1[0];
    tmp = React.createElement("label", {
          className: "text-xs px-3 py-2 flex-grow cursor-pointer",
          htmlFor: fileInputId
        }, error !== undefined ? React.createElement("span", {
                className: "text-red-500"
              }, React.createElement("i", {
                    className: "fas fa-exclamation-triangle mr-2"
                  }), error) : React.createElement("span", undefined, React.createElement("i", {
                    className: "far fa-file-image mr-2"
                  }), "Click here to attach a file."));
  } else {
    tmp = React.createElement("span", {
          className: "text-xs px-3 py-2 flex-grow cursor-wait"
        }, React.createElement("i", {
              className: "fas fa-spinner fa-pulse mr-2"
            }), "Please wait for the file to upload...");
  }
  return React.createElement("div", {
              className: footerContainerClasses(state.mode)
            }, React.createElement("form", {
                  className: "flex items-center flex-wrap flex-1 text-sm font-semibold hover:bg-gray-300 hover:text-primary-500",
                  id: fileFormId
                }, React.createElement("input", {
                      name: "authenticity_token",
                      type: "hidden",
                      value: AuthenticityToken.fromHead(/* () */0)
                    }), React.createElement("input", {
                      className: "hidden",
                      id: fileInputId,
                      multiple: false,
                      name: "markdown_attachment[file]",
                      type: "file",
                      onChange: (function (param) {
                          return attachFile(fileFormId, oldValue, state, send, onChange, param);
                        })
                    }), tmp), React.createElement("a", {
                  className: "flex items-center px-3 py-2 hover:bg-gray-300 hover:text-secondary-500 cursor-pointer",
                  href: "/help/markdown_editor",
                  target: "_blank"
                }, React.createElement("i", {
                      className: "fab fa-markdown text-sm"
                    }), React.createElement("span", {
                      className: "text-xs ml-1 font-semibold hidden sm:inline"
                    }, "Need help?")));
}

function textareaClasses(mode) {
  var tmp;
  tmp = mode.tag ? "p-3" : "px-3 pt-4 pb-8 h-full resize-none";
  return "w-full outline-none font-mono " + tmp;
}

function onChangeWrapper(onChange, $$event) {
  return Curry._1(onChange, $$event.target.value);
}

function onSelect(send, $$event) {
  var htmlInputElement = $$event.target;
  var selection_000 = htmlInputElement.selectionStart;
  var selection_001 = htmlInputElement.selectionEnd;
  var selection = /* tuple */[
    selection_000,
    selection_001
  ];
  return Curry._1(send, /* SetSelection */Block.__(0, [selection]));
}

function handleEscapeKey(send, $$event) {
  var _anyOtherKey = $$event.key;
  if (_anyOtherKey === "Escape") {
    return Curry._1(send, /* PressEscapeKey */3);
  } else {
    return /* () */0;
  }
}

function handleKeyboardControls(value, state, send, onChange, $$event) {
  var curriedModifyPhrase = function (param) {
    return modifyPhrase(value, state, send, onChange, param);
  };
  var _anyOtherKey = $$event.key;
  switch (_anyOtherKey) {
    case "b" :
        if ($$event.ctrlKey || $$event.metaKey) {
          return curriedModifyPhrase(/* Bold */0);
        } else {
          return /* () */0;
        }
    case "i" :
        if ($$event.ctrlKey || $$event.metaKey) {
          return curriedModifyPhrase(/* Italic */1);
        } else {
          return /* () */0;
        }
    default:
      return /* () */0;
  }
}

function scrollTargetToSource(source, target, _event) {
  var sourceScrollTop = source.scrollTop;
  var sourceOffsetHeight = source.offsetHeight;
  var sourceScrollHeight = source.scrollHeight;
  var scrollFraction = sourceScrollTop / (sourceScrollHeight - sourceOffsetHeight | 0);
  var maxTargetScrollTop = target.scrollHeight - target.offsetHeight | 0;
  target.scrollTop = scrollFraction * maxTargetScrollTop;
  return /* () */0;
}

var ScrollSync = {
  scrollTargetToSource: scrollTargetToSource
};

function MarkdownEditor(Props) {
  var value = Props.value;
  var onChange = Props.onChange;
  var profile = Props.profile;
  var textareaId = Props.textareaId;
  var maxLengthOpt = Props.maxLength;
  var defaultModeOpt = Props.defaultMode;
  var placeholder = Props.placeholder;
  var tabIndex = Props.tabIndex;
  var maxLength = maxLengthOpt !== undefined ? maxLengthOpt : 1000;
  var defaultMode = defaultModeOpt !== undefined ? defaultModeOpt : /* Windowed */Block.__(1, [/* Editor */-260983347]);
  var match = React.useReducer(reducer, /* tuple */[
        value,
        textareaId,
        defaultMode
      ], computeInitialState);
  var send = match[1];
  var state = match[0];
  React.useEffect((function () {
          var match = state.mode;
          if (match.tag && match[0] < 153880552) {
            TextareaAutosize.create(state.id);
          }
          return (function (param) {
                    return TextareaAutosize.destroy(state.id);
                  });
        }), [state.mode]);
  React.useEffect((function () {
          var curriedHandler = function (param) {
            return handleEscapeKey(send, param);
          };
          var documentEventTarget = document;
          documentEventTarget.addEventListener("keydown", curriedHandler);
          return (function (param) {
                    documentEventTarget.removeEventListener("keydown", curriedHandler);
                    return /* () */0;
                  });
        }), ([]));
  React.useEffect((function () {
          var curriedHandler = function (param) {
            return handleKeyboardControls(value, state, send, onChange, param);
          };
          var textareaEventTarget = OptionUtils.map((function (prim) {
                  return prim;
                }), Caml_option.nullable_to_opt(document.getElementById(state.id)));
          OptionUtils.mapWithDefault((function (param) {
                  param.addEventListener("keydown", curriedHandler);
                  return /* () */0;
                }), /* () */0, textareaEventTarget);
          return (function (param) {
                    return OptionUtils.mapWithDefault((function (param) {
                                  param.removeEventListener("keydown", curriedHandler);
                                  return /* () */0;
                                }), /* () */0, textareaEventTarget);
                  });
        }));
  React.useEffect((function () {
          var textarea = document.getElementById(state.id);
          var preview = document.getElementById(state.id + "-preview");
          if ((textarea == null) || (preview == null)) {
            return ;
          } else {
            var scrollCallback = function (param) {
              return scrollTargetToSource(textarea, preview, param);
            };
            var _anyOtherMode = state.mode;
            if (_anyOtherMode.tag) {
              textarea.removeEventListener("scroll", scrollCallback);
              return ;
            } else if (_anyOtherMode[0] !== 345791162) {
              textarea.removeEventListener("scroll", scrollCallback);
              return ;
            } else {
              textarea.addEventListener("scroll", scrollCallback);
              return (function (param) {
                        textarea.removeEventListener("scroll", scrollCallback);
                        return /* () */0;
                      });
            }
          }
        }), [state.mode]);
  var tmp = {
    "aria-label": "Markdown editor",
    className: textareaClasses(state.mode),
    id: state.id,
    maxLength: maxLength,
    rows: 4,
    value: value,
    onChange: (function (param) {
        return Curry._1(onChange, param.target.value);
      }),
    onSelect: (function (param) {
        return onSelect(send, param);
      })
  };
  if (tabIndex !== undefined) {
    tmp.tabIndex = Caml_option.valFromOption(tabIndex);
  }
  if (placeholder !== undefined) {
    tmp.placeholder = Caml_option.valFromOption(placeholder);
  }
  var match$1 = state.mode;
  return React.createElement("div", {
              className: containerClasses(state.mode)
            }, controls(value, state, send, onChange), React.createElement("div", {
                  className: modeClasses(state.mode)
                }, React.createElement("div", {
                      className: editorContainerClasses(state.mode)
                    }, React.createElement(DisablingCover.make, {
                          disabled: state.uploadState === /* Uploading */0,
                          message: "Uploading...",
                          containerClasses: "h-full",
                          children: React.createElement("textarea", tmp)
                        })), match$1[0] >= 153880552 ? React.createElement("div", {
                        className: previewContainerClasses(state.mode)
                      }, React.createElement("div", {
                            className: previewClasses(state.mode),
                            id: state.id + "-preview"
                          }, React.createElement(MarkdownBlock.make, {
                                markdown: value,
                                className: "max-w-3xl mx-auto",
                                profile: profile
                              }))) : null), footer(value, state, send, onChange));
}

var make = MarkdownEditor;

exports.InvalidModeForPreview = InvalidModeForPreview;
exports.str = str;
exports.reducer = reducer;
exports.computeInitialState = computeInitialState;
exports.containerClasses = containerClasses;
exports.modeIcon = modeIcon;
exports.onClickFullscreen = onClickFullscreen;
exports.onClickPreview = onClickPreview;
exports.onClickSplit = onClickSplit;
exports.insertAt = insertAt;
exports.wrapWith = wrapWith;
exports.updateTextareaAfterDelay = updateTextareaAfterDelay;
exports.finalizeChange = finalizeChange;
exports.insertAndWrapper = insertAndWrapper;
exports.modifyPhrase = modifyPhrase;
exports.controlsContainerClasses = controlsContainerClasses;
exports.controls = controls;
exports.modeClasses = modeClasses;
exports.editorContainerClasses = editorContainerClasses;
exports.previewType = previewType;
exports.previewContainerClasses = previewContainerClasses;
exports.previewClasses = previewClasses;
exports.focusOnEditor = focusOnEditor;
exports.handleUploadFileResponse = handleUploadFileResponse;
exports.submitForm = submitForm;
exports.attachFile = attachFile;
exports.footerContainerClasses = footerContainerClasses;
exports.footer = footer;
exports.textareaClasses = textareaClasses;
exports.onChangeWrapper = onChangeWrapper;
exports.onSelect = onSelect;
exports.handleEscapeKey = handleEscapeKey;
exports.handleKeyboardControls = handleKeyboardControls;
exports.ScrollSync = ScrollSync;
exports.make = make;
/*  Not a pure module */
