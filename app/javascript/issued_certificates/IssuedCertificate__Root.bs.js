// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Js_math = require("bs-platform/lib/js/js_math.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var OptionUtils = require("../shared/utils/OptionUtils.bs.js");
var QrcodeReact = require("qrcode.react");
var IssuedCertificate = require("../shared/types/IssuedCertificate.bs.js");

function str(prim) {
  return prim;
}

function paddingPercentage(issuedCertificate) {
  return String(IssuedCertificate.margin(issuedCertificate)) + "%";
}

function certificateContainerStyle(issuedCertificate) {
  return {
          padding: paddingPercentage(issuedCertificate)
        };
}

function issuedToStyle(issuedCertificate) {
  return {
          top: String(IssuedCertificate.nameOffsetTop(issuedCertificate)) + "%"
        };
}

function qrCodeStyle(issuedCertificate) {
  var padding = paddingPercentage(issuedCertificate);
  return {
          padding: padding
        };
}

function nameCanvasId(issuedCertificate) {
  return "name-canvas-" + IssuedCertificate.serialNumber(issuedCertificate);
}

function nameCanvas(issuedCertificate) {
  return React.createElement("canvas", {
              className: "absolute top-0 w-full",
              id: "name-canvas-" + IssuedCertificate.serialNumber(issuedCertificate),
              style: issuedToStyle(issuedCertificate),
              height: "100",
              width: "2000"
            });
}

function qrPositionClasses(issuedCertificate) {
  var match = IssuedCertificate.qrCorner(issuedCertificate);
  switch (match) {
    case /* Hidden */0 :
        return "hidden";
    case /* TopLeft */1 :
        return "top-0 left-0";
    case /* TopRight */2 :
        return "top-0 right-0";
    case /* BottomRight */3 :
        return "bottom-0 right-0";
    case /* BottomLeft */4 :
        return "bottom-0 left-0";
    
  }
}

function qrContainerStyle(issuedCertificate) {
  var widthPercentage = IssuedCertificate.qrScale(issuedCertificate) / 100.0 * 10.0;
  return {
          width: widthPercentage.toString() + "%"
        };
}

function certificateUrl(issuedCertificate) {
  var prefix = window.location.origin;
  var suffix = "/c/" + IssuedCertificate.serialNumber(issuedCertificate);
  return prefix + suffix;
}

function qrCode(issuedCertificate, verifyImageUrl) {
  var match = IssuedCertificate.qrCorner(issuedCertificate);
  if (match !== 0) {
    return React.createElement("div", {
                className: "absolute " + qrPositionClasses(issuedCertificate),
                style: qrContainerStyle(issuedCertificate)
              }, React.createElement(QrcodeReact, {
                    value: certificateUrl(issuedCertificate),
                    style: {
                      height: "100%",
                      width: "100%"
                    },
                    className: "w-full h-full",
                    size: 256,
                    bgColor: "transparent",
                    level: "Q",
                    imageSettings: {
                      src: verifyImageUrl,
                      height: 29,
                      width: 133,
                      excavate: true
                    }
                  }));
  } else {
    return null;
  }
}

function drawName(issuedCertificate) {
  var canvasId = "name-canvas-" + IssuedCertificate.serialNumber(issuedCertificate);
  var ctx = OptionUtils.map((function (el) {
          return el.getContext("2d", {
                      alpha: true
                    });
        }), Caml_option.nullable_to_opt(document.getElementById(canvasId)));
  var fontSize = 50.0 * (IssuedCertificate.fontSize(issuedCertificate) / 100.0);
  OptionUtils.map((function (ctx) {
          ctx.font = String(Js_math.floor_int(fontSize)) + "px Menlo, Monaco, Consolas, Liberation Mono, Courier New, monospace";
          return /* () */0;
        }), ctx);
  OptionUtils.map((function (ctx) {
          ctx.textAlign = "center";
          return /* () */0;
        }), ctx);
  OptionUtils.map((function (ctx) {
          ctx.textBaseline = "middle";
          return /* () */0;
        }), ctx);
  OptionUtils.map((function (ctx) {
          ctx.fillText(IssuedCertificate.issuedTo(issuedCertificate), 1000.0, 50.0, undefined);
          return /* () */0;
        }), ctx);
  return /* () */0;
}

function IssuedCertificate__Root(Props) {
  var issuedCertificate = Props.issuedCertificate;
  var verifyImageUrl = Props.verifyImageUrl;
  React.useEffect((function () {
          drawName(issuedCertificate);
          return ;
        }), ([]));
  return React.createElement("div", {
              className: "relative"
            }, React.createElement("img", {
                  src: IssuedCertificate.imageUrl(issuedCertificate)
                }), React.createElement("div", {
                  className: "absolute top-0 left-0 w-full h-full",
                  style: certificateContainerStyle(issuedCertificate)
                }, React.createElement("div", {
                      className: "relative w-full h-full"
                    }, nameCanvas(issuedCertificate), qrCode(issuedCertificate, verifyImageUrl))));
}

var make = IssuedCertificate__Root;

exports.str = str;
exports.paddingPercentage = paddingPercentage;
exports.certificateContainerStyle = certificateContainerStyle;
exports.issuedToStyle = issuedToStyle;
exports.qrCodeStyle = qrCodeStyle;
exports.nameCanvasId = nameCanvasId;
exports.nameCanvas = nameCanvas;
exports.qrPositionClasses = qrPositionClasses;
exports.qrContainerStyle = qrContainerStyle;
exports.certificateUrl = certificateUrl;
exports.qrCode = qrCode;
exports.drawName = drawName;
exports.make = make;
/* react Not a pure module */
