// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FaIcon = require("../shared/components/FaIcon.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var $$String = require("bs-platform/lib/js/string.js");
var DateFns = require("../shared/utils/DateFns.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var DomUtils = require("../shared/utils/DomUtils.bs.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ArrayUtils = require("../shared/utils/ArrayUtils.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var OptionUtils = require("../shared/utils/OptionUtils.bs.js");
var StringUtils = require("../shared/utils/StringUtils.bs.js");
var GraphqlQuery = require("../shared/utils/GraphqlQuery.bs.js");
var $$Notification = require("../shared/Notification.bs.js");
var DisablingCover = require("../shared/components/DisablingCover.bs.js");
var MarkdownEditor = require("../shared/components/MarkdownEditor.bs.js");
var TopicsShow__LinkedTarget = require("../topics/types/TopicsShow__LinkedTarget.bs.js");
var CommunitiesNewTopic__TopicSuggestion = require("./types/CommunitiesNewTopic__TopicSuggestion.bs.js");

function str(prim) {
  return prim;
}

var initialState_similar = {
  search: "",
  suggestions: []
};

var initialState = {
  title: "",
  titleTimeoutId: undefined,
  similar: initialState_similar,
  searching: false,
  body: "",
  saving: false
};

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* BeginSaving */0 :
          return {
                  title: state.title,
                  titleTimeoutId: state.titleTimeoutId,
                  similar: state.similar,
                  searching: state.searching,
                  body: state.body,
                  saving: true
                };
      case /* FailSaving */1 :
          return {
                  title: state.title,
                  titleTimeoutId: state.titleTimeoutId,
                  similar: state.similar,
                  searching: state.searching,
                  body: state.body,
                  saving: false
                };
      case /* BeginSearching */2 :
          return {
                  title: state.title,
                  titleTimeoutId: state.titleTimeoutId,
                  similar: state.similar,
                  searching: true,
                  body: state.body,
                  saving: state.saving
                };
      case /* FailSearching */3 :
          return {
                  title: state.title,
                  titleTimeoutId: state.titleTimeoutId,
                  similar: state.similar,
                  searching: false,
                  body: state.body,
                  saving: state.saving
                };
      
    }
  } else {
    switch (action.tag | 0) {
      case /* UpdateTitle */0 :
          var title = action[0];
          var similar = $$String.trim(title) === "" ? ({
                search: "",
                suggestions: []
              }) : state.similar;
          return {
                  title: title,
                  titleTimeoutId: state.titleTimeoutId,
                  similar: similar,
                  searching: state.searching,
                  body: state.body,
                  saving: state.saving
                };
      case /* UpdateTitleAndTimeout */1 :
          return {
                  title: action[0],
                  titleTimeoutId: Caml_option.some(action[1]),
                  similar: state.similar,
                  searching: state.searching,
                  body: state.body,
                  saving: state.saving
                };
      case /* UpdateBody */2 :
          return {
                  title: state.title,
                  titleTimeoutId: state.titleTimeoutId,
                  similar: state.similar,
                  searching: state.searching,
                  body: action[0],
                  saving: state.saving
                };
      case /* FinishSearching */3 :
          return {
                  title: state.title,
                  titleTimeoutId: state.titleTimeoutId,
                  similar: {
                    search: action[0],
                    suggestions: action[1]
                  },
                  searching: false,
                  body: state.body,
                  saving: state.saving
                };
      
    }
  }
}

var ppx_printed_query = "query SimilarTopicsQuery($communityId: ID!, $title: String!)  {\nsimilarTopics(communityId: $communityId, title: $title)  {\nid  \ntitle  \ncreatedAt  \nrepliesCount  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "similarTopics");
  return {
          similarTopics: match !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match))).map((function (value) {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var match = Js_dict.get(value$1, "id");
                    var tmp;
                    if (match !== undefined) {
                      var value$2 = Caml_option.valFromOption(match);
                      var match$1 = Js_json.decodeString(value$2);
                      tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Field id on type Topic is missing");
                    }
                    var match$2 = Js_dict.get(value$1, "title");
                    var tmp$1;
                    if (match$2 !== undefined) {
                      var value$3 = Caml_option.valFromOption(match$2);
                      var match$3 = Js_json.decodeString(value$3);
                      tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                    } else {
                      tmp$1 = Js_exn.raiseError("graphql_ppx: Field title on type Topic is missing");
                    }
                    var match$4 = Js_dict.get(value$1, "createdAt");
                    var match$5 = Js_dict.get(value$1, "repliesCount");
                    var tmp$2;
                    if (match$5 !== undefined) {
                      var value$4 = Caml_option.valFromOption(match$5);
                      var match$6 = Js_json.decodeNumber(value$4);
                      tmp$2 = match$6 !== undefined ? match$6 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$4));
                    } else {
                      tmp$2 = Js_exn.raiseError("graphql_ppx: Field repliesCount on type Topic is missing");
                    }
                    return {
                            id: tmp,
                            title: tmp$1,
                            createdAt: match$4 !== undefined ? Caml_option.valFromOption(match$4) : Js_exn.raiseError("graphql_ppx: Field createdAt on type Topic is missing"),
                            repliesCount: tmp$2
                          };
                  })) : Js_exn.raiseError("graphql_ppx: Field similarTopics on type Query is missing")
        };
}

function make(communityId, title, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "communityId",
                    communityId
                  ],
                  /* tuple */[
                    "title",
                    title
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var communityId = variables.communityId;
  var title = variables.title;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "communityId",
                    communityId
                  ],
                  /* tuple */[
                    "title",
                    title
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(communityId, title, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "communityId",
                  communityId
                ],
                /* tuple */[
                  "title",
                  title
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, communityId, title, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "communityId",
                      communityId
                    ],
                    /* tuple */[
                      "title",
                      title
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var SimilarTopicsQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function searchForSimilarTopics(send, title, communityId, param) {
  Curry._1(send, /* BeginSearching */2);
  var trimmedTitle = $$String.trim(title);
  (function (eta) {
            return GraphqlQuery.sendQuery(undefined, eta);
          })(make(communityId, trimmedTitle, /* () */0)).then((function (result) {
            var suggestions = $$Array.map(CommunitiesNewTopic__TopicSuggestion.makeFromJs, result.similarTopics);
            Curry._1(send, /* FinishSearching */Block.__(3, [
                    trimmedTitle,
                    suggestions
                  ]));
            return Promise.resolve(/* () */0);
          })).catch((function (e) {
          console.log(e);
          $$Notification.warn("Oops!", "We failed to fetch similar topics from the server! Our team has been notified about this error.");
          Curry._1(send, /* FailSaving */1);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function isInvalidString(s) {
  return $$String.trim(s) === "";
}

function updateTitleAndSearch(state, send, communityId, title) {
  Belt_Option.forEach(state.titleTimeoutId, (function (prim) {
          clearTimeout(prim);
          return /* () */0;
        }));
  var trimmedTitle = $$String.trim(title);
  if ($$String.trim(title) === "" || trimmedTitle === state.similar.search) {
    return Curry._1(send, /* UpdateTitle */Block.__(0, [title]));
  } else {
    var timeoutId = setTimeout((function (param) {
            return searchForSimilarTopics(send, trimmedTitle, communityId, param);
          }), 1500);
    return Curry._1(send, /* UpdateTitleAndTimeout */Block.__(1, [
                  title,
                  timeoutId
                ]));
  }
}

var ppx_printed_query$1 = "mutation CreateTopicQuery($title: String!, $body: String!, $communityId: ID!, $targetId: ID)  {\ncreateTopic(body: $body, title: $title, communityId: $communityId, targetId: $targetId)  {\ntopicId  \n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createTopic");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "topicId");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      if (match$2 !== undefined) {
        tmp$1 = undefined;
      } else {
        var match$3 = Js_json.decodeString(value$3);
        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
      }
    } else {
      tmp$1 = undefined;
    }
    tmp = {
      topicId: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field createTopic on type Mutation is missing");
  }
  return {
          createTopic: tmp
        };
}

function make$1(title, body, communityId, targetId, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "title",
                    title
                  ],
                  /* tuple */[
                    "body",
                    body
                  ],
                  /* tuple */[
                    "communityId",
                    communityId
                  ],
                  /* tuple */[
                    "targetId",
                    targetId !== undefined ? targetId : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var title = variables.title;
  var body = variables.body;
  var communityId = variables.communityId;
  var targetId = variables.targetId;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "title",
                    title
                  ],
                  /* tuple */[
                    "body",
                    body
                  ],
                  /* tuple */[
                    "communityId",
                    communityId
                  ],
                  /* tuple */[
                    "targetId",
                    targetId !== undefined ? targetId : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeVariables$1(title, body, communityId, targetId, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "title",
                  title
                ],
                /* tuple */[
                  "body",
                  body
                ],
                /* tuple */[
                  "communityId",
                  communityId
                ],
                /* tuple */[
                  "targetId",
                  targetId !== undefined ? targetId : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$1(graphql_ppx_use_json_variables_fn, title, body, communityId, targetId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "title",
                      title
                    ],
                    /* tuple */[
                      "body",
                      body
                    ],
                    /* tuple */[
                      "communityId",
                      communityId
                    ],
                    /* tuple */[
                      "targetId",
                      targetId !== undefined ? targetId : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$1 = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002$1
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var CreateTopicQuery = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  make: make$1,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

function redirectToNewTopic(id, title) {
  var redirectPath = "/topics/" + (id + ("/" + StringUtils.parameterize(title)));
  window.location = redirectPath;
  return /* () */0;
}

function saveDisabled(state) {
  if ($$String.trim(state.body) === "") {
    return true;
  } else {
    return $$String.trim(state.title) === "";
  }
}

function handleCreateTopic(state, send, communityId, target, $$event) {
  $$event.preventDefault();
  if (saveDisabled(state)) {
    return $$Notification.error("Missing Info!", "Topic title and body must be present.");
  } else {
    Curry._1(send, /* BeginSaving */0);
    var targetId = OptionUtils.flatMap(TopicsShow__LinkedTarget.id, target);
    (function (eta) {
              return GraphqlQuery.sendQuery(undefined, eta);
            })(make$1(state.title, state.body, communityId, targetId, /* () */0)).then((function (response) {
              var match = response.createTopic.topicId;
              if (match !== undefined) {
                $$Notification.success("Done!", "Redirecting to new topic now...");
                redirectToNewTopic(match, state.title);
              } else {
                Curry._1(send, /* FailSaving */1);
              }
              return Promise.resolve(/* () */0);
            })).catch((function (error) {
            console.log(error);
            $$Notification.error("Unexpected Error!", "Please reload the page before trying to post again.");
            return Promise.resolve(/* () */0);
          }));
    return /* () */0;
  }
}

function suggestions(state) {
  var suggestions$1 = state.similar.suggestions;
  if (ArrayUtils.isNotEmpty(suggestions$1)) {
    return React.createElement("div", {
                className: "pt-3"
              }, React.createElement("span", {
                    className: "tracking-wide text-gray-900 text-xs font-semibold"
                  }, "Similar Topics"), state.searching ? React.createElement("span", {
                      className: "ml-2"
                    }, React.createElement(FaIcon.make, {
                          classes: "fa fa-spinner fa-pulse"
                        })) : null, $$Array.map((function (suggestion) {
                      var askedOn = DateFns.formatPreset(CommunitiesNewTopic__TopicSuggestion.createdAt(suggestion), true, true, undefined, /* () */0);
                      var n = CommunitiesNewTopic__TopicSuggestion.repliesCount(suggestion);
                      var match = n !== 0 ? (
                          n !== 1 ? /* tuple */[
                              String(n) + " replies",
                              "bg-green-500 text-white"
                            ] : /* tuple */[
                              "1 reply",
                              "bg-green-500 text-white"
                            ]
                        ) : /* tuple */[
                          "No replies",
                          "bg-gray-300 text-gray-700"
                        ];
                      return React.createElement("a", {
                                  key: CommunitiesNewTopic__TopicSuggestion.id(suggestion),
                                  className: "flex w-full items-center justify-between mt-1 p-3 rounded cursor-pointer border bg-gray-100 hover:text-primary-500 hover:bg-gray-200",
                                  href: "/topics/" + (CommunitiesNewTopic__TopicSuggestion.id(suggestion) + ("/" + StringUtils.parameterize(CommunitiesNewTopic__TopicSuggestion.title(suggestion)))),
                                  target: "_blank"
                                }, React.createElement("div", {
                                      className: "flex flex-col min-w-0"
                                    }, React.createElement("h5", {
                                          className: "font-semibold text-sm leading-snug md:text-base pr-1 truncate flex-1",
                                          title: CommunitiesNewTopic__TopicSuggestion.title(suggestion)
                                        }, CommunitiesNewTopic__TopicSuggestion.title(suggestion)), React.createElement("p", {
                                          className: "text-xs mt-1 leading-tight text-gray-800"
                                        }, "Asked on " + askedOn)), React.createElement("div", {
                                      className: "text-xs px-1 py-px ml-2 rounded font-semibold flex-shrink-0 " + match[1]
                                    }, match[0]));
                    }), suggestions$1));
  } else {
    return null;
  }
}

function searchingIndicator(state) {
  if (ArrayUtils.isEmpty(state.similar.suggestions) && state.searching) {
    return React.createElement("div", {
                className: "md:flex-1 pl-1 pb-3 md:p-0"
              }, React.createElement(FaIcon.make, {
                    classes: "fas fa-spinner fa-pulse"
                  }));
  } else {
    return null;
  }
}

function CommunitiesNewTopic__Root(Props) {
  var communityId = Props.communityId;
  var target = Props.target;
  var match = React.useReducer(reducer, initialState);
  var send = match[1];
  var state = match[0];
  return React.createElement(DisablingCover.make, {
              disabled: state.saving,
              children: React.createElement("div", {
                    className: "bg-gray-100"
                  }, React.createElement("div", {
                        className: "flex-1 flex flex-col"
                      }, React.createElement("div", {
                            className: "px-3 lg:px-0"
                          }, React.createElement("div", {
                                className: "max-w-3xl w-full mx-auto mt-5 pb-2"
                              }, React.createElement("a", {
                                    className: "btn btn-subtle",
                                    onClick: (function (param) {
                                        return DomUtils.goBack(/* () */0);
                                      })
                                  }, React.createElement("i", {
                                        className: "fas fa-arrow-left"
                                      }), React.createElement("span", {
                                        className: "ml-2"
                                      }, "Back")))), target !== undefined ? React.createElement("div", {
                              className: "max-w-3xl w-full mt-5 mx-auto px-3 lg:px-0"
                            }, React.createElement("div", {
                                  className: "flex py-4 px-4 md:px-5 w-full bg-white border border-primary-500  shadow-md rounded-lg justify-between items-center mb-2"
                                }, React.createElement("p", {
                                      className: "w-3/5 md:w-4/5 text-sm"
                                    }, React.createElement("span", {
                                          className: "font-semibold block text-xs"
                                        }, "Linked Target: "), React.createElement("span", undefined, TopicsShow__LinkedTarget.title(target))), React.createElement("a", {
                                      className: "btn btn-default",
                                      href: "./new_topic"
                                    }, "Clear"))) : null, React.createElement("h4", {
                            className: "max-w-3xl w-full mx-auto pb-2 mt-2 px-3 lg:px-0"
                          }, "Create a new topic of discussion"), React.createElement("div", {
                            className: "md:px-3"
                          }, React.createElement("div", {
                                className: "mb-8 max-w-3xl w-full mx-auto relative border-t border-b md:border-0 bg-white md:shadow md:rounded-lg"
                              }, React.createElement("div", {
                                    className: "flex w-full flex-col p-3 md:p-6"
                                  }, React.createElement("label", {
                                        className: "inline-block tracking-wide text-gray-900 text-xs font-semibold mb-2",
                                        htmlFor: "title"
                                      }, "Title"), React.createElement("input", {
                                        className: "appearance-none block w-full bg-white text-gray-900 font-semibold border border-gray-400 rounded py-3 px-4 mb-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500",
                                        id: "title",
                                        tabIndex: 1,
                                        placeholder: "Title for the new topic",
                                        value: state.title,
                                        onChange: (function ($$event) {
                                            var newTitle = $$event.target.value;
                                            return updateTitleAndSearch(state, send, communityId, newTitle);
                                          })
                                      }), React.createElement("label", {
                                        className: "inline-block tracking-wide text-gray-900 text-xs font-semibold mb-2",
                                        htmlFor: "body"
                                      }, "Body"), React.createElement("div", {
                                        className: "w-full flex flex-col"
                                      }, React.createElement(MarkdownEditor.make, {
                                            value: state.body,
                                            onChange: (function (markdown) {
                                                return Curry._1(send, /* UpdateBody */Block.__(2, [markdown]));
                                              }),
                                            profile: /* QuestionAndAnswer */1,
                                            textareaId: "body",
                                            maxLength: 10000,
                                            placeholder: "If you're asking a question, try to be as descriptive as possible to make it easier for others to post answers. You can use Markdown to format this text.",
                                            tabIndex: 2
                                          }), React.createElement("div", undefined, suggestions(state), React.createElement("div", {
                                                className: "flex flex-col md:flex-row justify-end mt-3 items-center md:items-start"
                                              }, searchingIndicator(state), React.createElement("button", {
                                                    className: "btn btn-primary border border-transparent w-full md:w-auto",
                                                    tabIndex: 3,
                                                    disabled: saveDisabled(state),
                                                    onClick: (function (param) {
                                                        return handleCreateTopic(state, send, communityId, target, param);
                                                      })
                                                  }, "Create Post")))))))))
            });
}

var make$2 = CommunitiesNewTopic__Root;

exports.str = str;
exports.initialState = initialState;
exports.reducer = reducer;
exports.SimilarTopicsQuery = SimilarTopicsQuery;
exports.searchForSimilarTopics = searchForSimilarTopics;
exports.isInvalidString = isInvalidString;
exports.updateTitleAndSearch = updateTitleAndSearch;
exports.CreateTopicQuery = CreateTopicQuery;
exports.redirectToNewTopic = redirectToNewTopic;
exports.saveDisabled = saveDisabled;
exports.handleCreateTopic = handleCreateTopic;
exports.suggestions = suggestions;
exports.searchingIndicator = searchingIndicator;
exports.make = make$2;
/* react Not a pure module */
