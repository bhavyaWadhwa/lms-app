// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.js");
var SchoolAdminNavbar__Course = require("../types/SchoolAdminNavbar__Course.bs.js");
var SchoolAdminNavbar__CourseDropdown = require("./SchoolAdminNavbar__CourseDropdown.bs.js");

var UnknownPathEncountered = Caml_exceptions.create("SchoolAdminNavbar__Root.UnknownPathEncountered");

((require("./SchoolAdminNavbar__Root.css")));

function str(prim) {
  return prim;
}

function containerClasses(shrunk) {
  return "bg-gradient-primary-600-to-primary-800-to-bottom school-admin-navbar__primary-nav flex flex-col justify-between " + (
          shrunk ? "school-admin-navbar__primary-nav--shrunk" : "overflow-y-auto"
        );
}

function headerclasses(shrunk) {
  return "school-admin-navbar__header " + (
          shrunk ? "mx-auto" : "px-5 py-2 relative z-20 border-r border-b border-gray-400 bg-white flex h-16 items-center"
        );
}

function imageContainerClasses(shrunk) {
  return "school-admin-navbar__school-logo-container flex items-center " + (
          shrunk ? "justify-center w-16 h-16" : "bg-white h-8 w-3/5 rounded"
        );
}

function bottomLinkClasses(shrunk) {
  return "flex text-white text-sm py-4 px-5 hover:bg-primary-900 font-semibold items-center " + (
          shrunk ? "justify-center" : ""
        );
}

function bottomLink(path, shrunk, iconClasses, text) {
  var title = shrunk ? text : undefined;
  var tmp = {
    className: bottomLinkClasses(shrunk),
    href: path
  };
  if (title !== undefined) {
    tmp.title = Caml_option.valFromOption(title);
  }
  return React.createElement("li", undefined, React.createElement("a", tmp, React.createElement("i", {
                      className: iconClasses + " fa-fw"
                    }), shrunk ? null : React.createElement("span", {
                        className: "ml-2"
                      }, text)));
}

function topLink(selectedOption, currentOption, path, shrunk, iconClasses, text) {
  var classes = "school-admin-navbar__primary-nav-link py-4 px-5" + (
    Caml_obj.caml_equal(selectedOption, currentOption) ? " school-admin-navbar__primary-nav-link--active" : ""
  );
  var title = shrunk ? text : undefined;
  var tmp = {
    className: classes,
    href: path
  };
  if (title !== undefined) {
    tmp.title = Caml_option.valFromOption(title);
  }
  return React.createElement("a", tmp, React.createElement("i", {
                  className: iconClasses + " fa-fw text-lg"
                }), shrunk ? null : React.createElement("span", {
                    className: "ml-2"
                  }, text));
}

function secondaryNavOption(path, currentSelection, inspectedSelection, text) {
  var classes = "flex text-indigo-800 text-sm py-3 px-4 hover:bg-gray-400 focus:bg-gray-400 font-semibold rounded items-center my-1" + (
    Caml_obj.caml_equal(currentSelection, inspectedSelection) ? " bg-gray-400" : ""
  );
  return React.createElement("div", {
              key: text
            }, React.createElement("a", {
                  className: classes,
                  href: path
                }, text));
}

function secondaryNav(courses, userRole, selectedOption) {
  if (typeof selectedOption === "number") {
    return null;
  } else if (selectedOption.tag) {
    var courseSelection = selectedOption[1];
    var courseId = selectedOption[0];
    return React.createElement("div", {
                key: "secondary-nav",
                className: "bg-gray-200 school-admin-navbar__secondary-nav w-full border-r border-gray-400 pb-6 overflow-y-auto"
              }, React.createElement("div", {
                    className: "p-4"
                  }, React.createElement(SchoolAdminNavbar__CourseDropdown.make, {
                        courses: courses,
                        currentCourseId: courseId
                      }), secondaryNavOption("/school/courses/" + (courseId + "/curriculum"), courseSelection, /* Curriculum */2, "Curriculum"), userRole ? null : [
                      secondaryNavOption("/school/courses/" + (courseId + "/students"), courseSelection, /* Students */0, "Users"),
                      secondaryNavOption("/school/courses/" + (courseId + "/coaches"), courseSelection, /* CourseCoaches */1, "Coaches"),
                      secondaryNavOption("/school/courses/" + (courseId + "/exports"), courseSelection, /* CourseExports */4, "Exports"),
                      secondaryNavOption("/school/courses/" + (courseId + "/authors"), courseSelection, /* Authors */5, "Authors")
                    ], secondaryNavOption("/school/courses/" + (courseId + "/evaluation_criteria"), courseSelection, /* EvaluationCriteria */3, "Evaluation Criteria")));
  } else {
    var settingsSelection = selectedOption[0];
    return React.createElement("div", {
                key: "secondary-nav",
                className: "bg-gray-200 school-admin-navbar__secondary-nav w-full border-r border-gray-400 pb-6 overflow-y-auto"
              }, React.createElement("ul", {
                    className: "p-4"
                  }, secondaryNavOption("/school/customize", settingsSelection, /* Customization */0, "Customization"), secondaryNavOption("/school/admins", settingsSelection, /* Admins */1, "Admins")));
  }
}

function SchoolAdminNavbar__Root(Props) {
  var schoolName = Props.schoolName;
  var schoolLogoPath = Props.schoolLogoPath;
  var schoolIconPath = Props.schoolIconPath;
  var courses = Props.courses;
  var isCourseAuthor = Props.isCourseAuthor;
  var url = ReasonReactRouter.useUrl(undefined, /* () */0);
  var userRole = isCourseAuthor ? /* CourseAuthor */1 : /* SchoolAdmin */0;
  var match = url.path;
  var match$1;
  var exit = 0;
  if (match && match[0] === "school") {
    var match$2 = match[1];
    if (match$2) {
      switch (match$2[0]) {
        case "admins" :
            if (match$2[1]) {
              exit = 1;
            } else {
              match$1 = /* tuple */[
                /* Settings */Block.__(0, [/* Admins */1]),
                true
              ];
            }
            break;
        case "coaches" :
            if (match$2[1]) {
              exit = 1;
            } else {
              match$1 = /* tuple */[
                /* SchoolCoaches */1,
                false
              ];
            }
            break;
        case "communities" :
            if (match$2[1]) {
              exit = 1;
            } else {
              match$1 = /* tuple */[
                /* Communities */3,
                false
              ];
            }
            break;
        case "courses" :
            var match$3 = match$2[1];
            if (match$3) {
              var match$4 = match$3[1];
              if (match$4) {
                var courseId = match$3[0];
                var exit$1 = 0;
                switch (match$4[0]) {
                  case "authors" :
                      var match$5 = match$4[1];
                      if (match$5 && match$5[1]) {
                        exit = 1;
                      } else {
                        match$1 = /* tuple */[
                          /* SelectedCourse */Block.__(1, [
                              courseId,
                              /* Authors */5
                            ]),
                          true
                        ];
                      }
                      break;
                  case "coaches" :
                      if (match$4[1]) {
                        exit = 1;
                      } else {
                        match$1 = /* tuple */[
                          /* SelectedCourse */Block.__(1, [
                              courseId,
                              /* CourseCoaches */1
                            ]),
                          true
                        ];
                      }
                      break;
                  case "curriculum" :
                      if (match$4[1]) {
                        exit = 1;
                      } else {
                        match$1 = /* tuple */[
                          /* SelectedCourse */Block.__(1, [
                              courseId,
                              /* Curriculum */2
                            ]),
                          true
                        ];
                      }
                      break;
                  case "evaluation_criteria" :
                      if (match$4[1]) {
                        exit = 1;
                      } else {
                        match$1 = /* tuple */[
                          /* SelectedCourse */Block.__(1, [
                              courseId,
                              /* EvaluationCriteria */3
                            ]),
                          true
                        ];
                      }
                      break;
                  case "exports" :
                      if (match$4[1]) {
                        exit = 1;
                      } else {
                        match$1 = /* tuple */[
                          /* SelectedCourse */Block.__(1, [
                              courseId,
                              /* CourseExports */4
                            ]),
                          true
                        ];
                      }
                      break;
                  case "inactive_students" :
                  case "students" :
                      exit$1 = 2;
                      break;
                  case "targets" :
                      var match$6 = match$4[1];
                      if (match$6) {
                        var match$7 = match$6[1];
                        if (match$7) {
                          var exit$2 = 0;
                          switch (match$7[0]) {
                            case "content" :
                            case "details" :
                            case "versions" :
                                exit$2 = 3;
                                break;
                            default:
                              exit = 1;
                          }
                          if (exit$2 === 3) {
                            if (match$7[1]) {
                              exit = 1;
                            } else {
                              match$1 = /* tuple */[
                                /* SelectedCourse */Block.__(1, [
                                    courseId,
                                    /* Curriculum */2
                                  ]),
                                true
                              ];
                            }
                          }
                          
                        } else {
                          exit = 1;
                        }
                      } else {
                        exit = 1;
                      }
                      break;
                  default:
                    exit = 1;
                }
                if (exit$1 === 2) {
                  if (match$4[1]) {
                    exit = 1;
                  } else {
                    match$1 = /* tuple */[
                      /* SelectedCourse */Block.__(1, [
                          courseId,
                          /* Students */0
                        ]),
                      true
                    ];
                  }
                }
                
              } else {
                exit = 1;
              }
            } else {
              match$1 = /* tuple */[
                /* Courses */2,
                false
              ];
            }
            break;
        case "customize" :
            if (match$2[1]) {
              exit = 1;
            } else {
              match$1 = /* tuple */[
                /* Settings */Block.__(0, [/* Customization */0]),
                true
              ];
            }
            break;
        default:
          exit = 1;
      }
    } else {
      match$1 = /* tuple */[
        /* Overview */0,
        false
      ];
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    Rollbar.critical("Unknown path encountered by SA navbar: " + $$Array.of_list(url.path).join("/"));
    throw [
          UnknownPathEncountered,
          url.path
        ];
  }
  var shrunk = match$1[1];
  var selectedOption = match$1[0];
  var tmp = {
    className: bottomLinkClasses(shrunk),
    href: "/users/sign_out",
    rel: "nofollow"
  };
  var tmp$1 = shrunk ? "Sign Out" : undefined;
  if (tmp$1 !== undefined) {
    tmp.title = Caml_option.valFromOption(tmp$1);
  }
  return [
          React.createElement("div", {
                key: "main-nav",
                className: containerClasses(shrunk)
              }, React.createElement("div", undefined, React.createElement("div", {
                        className: headerclasses(shrunk)
                      }, React.createElement("div", {
                            className: imageContainerClasses(shrunk)
                          }, shrunk ? React.createElement("div", {
                                  className: "p-2 bg-white flex items-center justify-center p-2 m-2 rounded"
                                }, isCourseAuthor ? React.createElement("img", {
                                        alt: schoolName,
                                        src: schoolIconPath
                                      }) : React.createElement("a", {
                                        className: "text-xs",
                                        href: "/school"
                                      }, React.createElement("img", {
                                            alt: schoolName,
                                            src: schoolIconPath
                                          }))) : React.createElement("img", {
                                  className: "h-full object-contain",
                                  alt: schoolName,
                                  src: schoolLogoPath
                                }))), userRole ? null : React.createElement("ul", undefined, React.createElement("li", undefined, topLink(selectedOption, /* Overview */0, "/school", shrunk, "fas fa-eye", "Overview")), React.createElement("li", undefined, topLink(selectedOption, /* SchoolCoaches */1, "/school/coaches", shrunk, "fas fa-chalkboard-teacher", "Coaches")), React.createElement("li", undefined, topLink(selectedOption, /* Settings */Block.__(0, [/* Customization */0]), "/school/customize", shrunk, "fas fa-cog", "Settings")), React.createElement("li", undefined, topLink(selectedOption, /* Courses */2, "/school/courses", shrunk, "fas fa-book", "Courses"), shrunk ? null : React.createElement("ul", {
                                    className: "pr-4 pb-4 ml-10 mt-1"
                                  }, $$Array.of_list(List.map((function (course) {
                                              return React.createElement("li", {
                                                          key: SchoolAdminNavbar__Course.id(course)
                                                        }, React.createElement("a", {
                                                              className: "block text-white py-3 px-4 hover:bg-primary-800 rounded font-semibold text-xs",
                                                              href: "/school/courses/" + (SchoolAdminNavbar__Course.id(course) + "/curriculum")
                                                            }, SchoolAdminNavbar__Course.name(course)));
                                            }), courses)))), React.createElement("li", undefined, topLink(selectedOption, /* Communities */3, "/school/communities", shrunk, "fas fa-users", "Communities")))), React.createElement("ul", undefined, bottomLink("/home", shrunk, "fas fa-home", "Home"), React.createElement("li", undefined, React.createElement("a", tmp, React.createElement("i", {
                                className: "fas fa-sign-out-alt fa-fw"
                              }), shrunk ? null : React.createElement("span", {
                                  className: "ml-2"
                                }, "Sign Out"))))),
          secondaryNav(courses, userRole, selectedOption)
        ];
}

var make = SchoolAdminNavbar__Root;

exports.UnknownPathEncountered = UnknownPathEncountered;
exports.str = str;
exports.containerClasses = containerClasses;
exports.headerclasses = headerclasses;
exports.imageContainerClasses = imageContainerClasses;
exports.bottomLinkClasses = bottomLinkClasses;
exports.bottomLink = bottomLink;
exports.topLink = topLink;
exports.secondaryNavOption = secondaryNavOption;
exports.secondaryNav = secondaryNav;
exports.make = make;
/*  Not a pure module */
