// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var $$Notification = require("../../../shared/Notification.bs.js");
var Belt_SetString = require("bs-platform/lib/js/belt_SetString.js");
var DisablingCover = require("../../../shared/components/DisablingCover.bs.js");
var MultiselectInline = require("../../../packages/multiselect-inline/src/components/MultiselectInline.bs.js");
var GraphqlErrorHandler = require("../../../shared/utils/GraphqlErrorHandler.bs.js");
var School__InputGroupError = require("../../shared/components/School__InputGroupError.bs.js");
var SchoolCommunities__Course = require("../types/index/SchoolCommunities__Course.bs.js");
var SchoolCommunities__Community = require("../types/index/SchoolCommunities__Community.bs.js");
var SchoolCommunities__Connection = require("../types/index/SchoolCommunities__Connection.bs.js");

function str(prim) {
  return prim;
}

var ppx_printed_query = "mutation CreateCommunityMutation($name: String!, $targetLinkable: Boolean!, $courseIds: [ID!]!)  {\ncreateCommunity(name: $name, targetLinkable: $targetLinkable, courseIds: $courseIds)  {\ncommunityId  \nerrors  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createCommunity");
  var tmp;
  if (match !== undefined) {
    var match$1 = Js_json.decodeObject(Caml_option.valFromOption(match));
    if (match$1 !== undefined) {
      var value$2 = Caml_option.valFromOption(match$1);
      var match$2 = Js_dict.get(value$2, "communityId");
      if (match$2 !== undefined) {
        var temp = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(temp);
        if (match$3 !== undefined) {
          var match$4 = Js_dict.get(value$2, "errors");
          if (match$4 !== undefined) {
            var temp$1 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(temp$1);
            tmp = match$5 !== undefined ? Js_exn.raiseError("graphql_ppx: All fields on variant selection set on type CreateCommunityPayload were null") : /* `Errors */[
                100464587,
                Js_option.getExn(Js_json.decodeArray(temp$1)).map((function (value) {
                        var match = Js_json.decodeString(value);
                        if (match !== undefined) {
                          var value$1 = match;
                          switch (value$1) {
                            case "IncorrectCourseIds" :
                                return /* IncorrectCourseIds */-548933032;
                            case "InvalidLengthName" :
                                return /* InvalidLengthName */781203464;
                            default:
                              return Js_exn.raiseError("graphql_ppx: Unknown enum variant for CreateCommunityErrors: " + value$1);
                          }
                        } else {
                          return Js_exn.raiseError("graphql_ppx: Expected enum value for CreateCommunityErrors, got " + JSON.stringify(value));
                        }
                      }))
              ];
          } else {
            tmp = Js_exn.raiseError("graphql_ppx: Field errors on type CreateCommunityPayload is missing");
          }
        } else {
          var match$6 = Js_json.decodeString(temp);
          tmp = /* `CommunityId */[
            74516740,
            match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(temp))
          ];
        }
      } else {
        tmp = Js_exn.raiseError("graphql_ppx: Field communityId on type CreateCommunityPayload is missing");
      }
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Expected type CreateCommunityPayload to be an object");
    }
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field createCommunity on type Mutation is missing");
  }
  return {
          createCommunity: tmp
        };
}

function make(name, targetLinkable, courseIds, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "targetLinkable",
                    targetLinkable
                  ],
                  /* tuple */[
                    "courseIds",
                    courseIds.map((function (prim) {
                            return prim;
                          }))
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var name = variables.name;
  var targetLinkable = variables.targetLinkable;
  var courseIds = variables.courseIds;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "targetLinkable",
                    targetLinkable
                  ],
                  /* tuple */[
                    "courseIds",
                    courseIds.map((function (prim) {
                            return prim;
                          }))
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(name, targetLinkable, courseIds, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "targetLinkable",
                  targetLinkable
                ],
                /* tuple */[
                  "courseIds",
                  courseIds.map((function (prim) {
                          return prim;
                        }))
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, name, targetLinkable, courseIds, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "name",
                      name
                    ],
                    /* tuple */[
                      "targetLinkable",
                      targetLinkable
                    ],
                    /* tuple */[
                      "courseIds",
                      courseIds.map((function (prim) {
                              return prim;
                            }))
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var CreateCommunityQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var ppx_printed_query$1 = "mutation UpdateCommunityMutation($id: ID!, $name: String!, $targetLinkable: Boolean!, $courseIds: [ID!]!)  {\nupdateCommunity(id: $id, name: $name, targetLinkable: $targetLinkable, courseIds: $courseIds)  {\ncommunityId  \nerrors  \n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updateCommunity");
  var tmp;
  if (match !== undefined) {
    var match$1 = Js_json.decodeObject(Caml_option.valFromOption(match));
    if (match$1 !== undefined) {
      var value$2 = Caml_option.valFromOption(match$1);
      var match$2 = Js_dict.get(value$2, "communityId");
      if (match$2 !== undefined) {
        var temp = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(temp);
        if (match$3 !== undefined) {
          var match$4 = Js_dict.get(value$2, "errors");
          if (match$4 !== undefined) {
            var temp$1 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(temp$1);
            tmp = match$5 !== undefined ? Js_exn.raiseError("graphql_ppx: All fields on variant selection set on type UpdateCommunityPayload were null") : /* `Errors */[
                100464587,
                Js_option.getExn(Js_json.decodeArray(temp$1)).map((function (value) {
                        var match = Js_json.decodeString(value);
                        if (match !== undefined) {
                          var value$1 = match;
                          switch (value$1) {
                            case "IncorrectCommunityId" :
                                return /* IncorrectCommunityId */-449861089;
                            case "IncorrectCourseIds" :
                                return /* IncorrectCourseIds */-548933032;
                            case "InvalidLengthName" :
                                return /* InvalidLengthName */781203464;
                            default:
                              return Js_exn.raiseError("graphql_ppx: Unknown enum variant for UpdateCommunityErrors: " + value$1);
                          }
                        } else {
                          return Js_exn.raiseError("graphql_ppx: Expected enum value for UpdateCommunityErrors, got " + JSON.stringify(value));
                        }
                      }))
              ];
          } else {
            tmp = Js_exn.raiseError("graphql_ppx: Field errors on type UpdateCommunityPayload is missing");
          }
        } else {
          var match$6 = Js_json.decodeString(temp);
          tmp = /* `CommunityId */[
            74516740,
            match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(temp))
          ];
        }
      } else {
        tmp = Js_exn.raiseError("graphql_ppx: Field communityId on type UpdateCommunityPayload is missing");
      }
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Expected type UpdateCommunityPayload to be an object");
    }
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field updateCommunity on type Mutation is missing");
  }
  return {
          updateCommunity: tmp
        };
}

function make$1(id, name, targetLinkable, courseIds, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "targetLinkable",
                    targetLinkable
                  ],
                  /* tuple */[
                    "courseIds",
                    courseIds.map((function (prim) {
                            return prim;
                          }))
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var id = variables.id;
  var name = variables.name;
  var targetLinkable = variables.targetLinkable;
  var courseIds = variables.courseIds;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "targetLinkable",
                    targetLinkable
                  ],
                  /* tuple */[
                    "courseIds",
                    courseIds.map((function (prim) {
                            return prim;
                          }))
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeVariables$1(id, name, targetLinkable, courseIds, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "targetLinkable",
                  targetLinkable
                ],
                /* tuple */[
                  "courseIds",
                  courseIds.map((function (prim) {
                          return prim;
                        }))
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$1(graphql_ppx_use_json_variables_fn, id, name, targetLinkable, courseIds, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "id",
                      id
                    ],
                    /* tuple */[
                      "name",
                      name
                    ],
                    /* tuple */[
                      "targetLinkable",
                      targetLinkable
                    ],
                    /* tuple */[
                      "courseIds",
                      courseIds.map((function (prim) {
                              return prim;
                            }))
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$1 = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002$1
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var UpdateCommunityQuery = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  make: make$1,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

function notification(error) {
  if (error >= 781203464) {
    return /* tuple */[
            "InvalidLengthName",
            "Course name should be between 1 and 50 characters long."
          ];
  } else {
    return /* tuple */[
            "IncorrectCourseIds",
            "Could not find courses with the supplied IDs."
          ];
  }
}

var CreateCommunityError = {
  notification: notification
};

function notification$1(error) {
  if (error !== -449861089) {
    if (error >= 781203464) {
      return /* tuple */[
              "InvalidLengthName",
              "Course name should be between 1 and 50 characters long."
            ];
    } else {
      return /* tuple */[
              "IncorrectCourseIds",
              "Could not find courses with the supplied IDs."
            ];
    }
  } else {
    return /* tuple */[
            "IncorrectCommunityId",
            "Community does not exist."
          ];
  }
}

var UpdateCommunityError = {
  notification: notification$1
};

var CreateCommunityErrorHandler = GraphqlErrorHandler.Make(CreateCommunityError);

var UpdateCommunityErrorHandler = GraphqlErrorHandler.Make(UpdateCommunityError);

function computeInitialState(param) {
  var community = param[0];
  var match;
  if (community !== undefined) {
    var community$1 = community;
    match = /* tuple */[
      SchoolCommunities__Community.name(community$1),
      SchoolCommunities__Community.targetLinkable(community$1),
      Belt_SetString.fromArray($$Array.of_list(List.map(SchoolCommunities__Connection.courseId, List.filter((function (connection) {
                            return SchoolCommunities__Connection.communityId(connection) === SchoolCommunities__Community.id(community$1);
                          }))(param[1]))))
    ];
  } else {
    match = /* tuple */[
      "",
      false,
      null
    ];
  }
  return {
          saving: false,
          dirty: false,
          name: match[0],
          targetLinkable: match[1],
          selectedCourseIds: match[2],
          courseSearch: ""
        };
}

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* BeginSaving */0 :
          return {
                  saving: true,
                  dirty: state.dirty,
                  name: state.name,
                  targetLinkable: state.targetLinkable,
                  selectedCourseIds: state.selectedCourseIds,
                  courseSearch: state.courseSearch
                };
      case /* FailSaving */1 :
          return {
                  saving: false,
                  dirty: state.dirty,
                  name: state.name,
                  targetLinkable: state.targetLinkable,
                  selectedCourseIds: state.selectedCourseIds,
                  courseSearch: state.courseSearch
                };
      case /* FinishSaving */2 :
          return {
                  saving: false,
                  dirty: false,
                  name: state.name,
                  targetLinkable: state.targetLinkable,
                  selectedCourseIds: state.selectedCourseIds,
                  courseSearch: state.courseSearch
                };
      
    }
  } else {
    switch (action.tag | 0) {
      case /* UpdateName */0 :
          return {
                  saving: state.saving,
                  dirty: true,
                  name: action[0],
                  targetLinkable: state.targetLinkable,
                  selectedCourseIds: state.selectedCourseIds,
                  courseSearch: state.courseSearch
                };
      case /* SetTargetLinkable */1 :
          return {
                  saving: state.saving,
                  dirty: true,
                  name: state.name,
                  targetLinkable: action[0],
                  selectedCourseIds: state.selectedCourseIds,
                  courseSearch: state.courseSearch
                };
      case /* SelectCourse */2 :
          return {
                  saving: state.saving,
                  dirty: true,
                  name: state.name,
                  targetLinkable: state.targetLinkable,
                  selectedCourseIds: Belt_SetString.add(state.selectedCourseIds, action[0]),
                  courseSearch: state.courseSearch
                };
      case /* DeselectCourse */3 :
          return {
                  saving: state.saving,
                  dirty: true,
                  name: state.name,
                  targetLinkable: state.targetLinkable,
                  selectedCourseIds: Belt_SetString.remove(state.selectedCourseIds, action[0]),
                  courseSearch: state.courseSearch
                };
      case /* UpdateCourseSearch */4 :
          return {
                  saving: state.saving,
                  dirty: state.dirty,
                  name: state.name,
                  targetLinkable: state.targetLinkable,
                  selectedCourseIds: state.selectedCourseIds,
                  courseSearch: action[0]
                };
      
    }
  }
}

function handleConnections(communityId, connections, courseIds) {
  var oldConnections = List.filter((function (connection) {
            return SchoolCommunities__Connection.communityId(connection) !== communityId;
          }))(connections);
  var newConnectionsForCommunity = $$Array.to_list($$Array.map((function (courseId) {
              return SchoolCommunities__Connection.create(communityId, courseId);
            }), courseIds));
  return List.append(newConnectionsForCommunity, oldConnections);
}

function handleQuery(community, connections, state, send, addCommunityCB, updateCommunitiesCB, $$event) {
  $$event.preventDefault();
  var targetLinkable = state.targetLinkable;
  var name = state.name;
  var courseIds = Belt_SetString.toArray(state.selectedCourseIds);
  if (name !== "") {
    Curry._1(send, /* BeginSaving */0);
    if (community !== undefined) {
      Curry._2(UpdateCommunityErrorHandler.$$catch, (function (param) {
              return Curry._1(send, /* FailSaving */1);
            }), (function (eta) {
                  return GraphqlQuery.sendQuery(undefined, eta);
                })(make$1(SchoolCommunities__Community.id(community), name, targetLinkable, courseIds, /* () */0)).then((function (response) {
                  var match = response.updateCommunity;
                  if (match[0] >= 100464587) {
                    return Promise.reject([
                                UpdateCommunityErrorHandler.Errors,
                                match[1]
                              ]);
                  } else {
                    var communityId = match[1];
                    Curry._1(send, /* FinishSaving */2);
                    Curry._2(updateCommunitiesCB, SchoolCommunities__Community.create(communityId, name, targetLinkable), handleConnections(communityId, connections, courseIds));
                    $$Notification.success("Success", "Community updated successfully.");
                    return Promise.resolve(/* () */0);
                  }
                })));
      return /* () */0;
    } else {
      Curry._2(CreateCommunityErrorHandler.$$catch, (function (param) {
              return Curry._1(send, /* FailSaving */1);
            }), (function (eta) {
                  return GraphqlQuery.sendQuery(undefined, eta);
                })(make(name, targetLinkable, courseIds, /* () */0)).then((function (response) {
                  var match = response.createCommunity;
                  if (match[0] >= 100464587) {
                    return Promise.reject([
                                CreateCommunityErrorHandler.Errors,
                                match[1]
                              ]);
                  } else {
                    var communityId = match[1];
                    Curry._1(send, /* FinishSaving */2);
                    Curry._2(addCommunityCB, SchoolCommunities__Community.create(communityId, name, targetLinkable), handleConnections(communityId, connections, courseIds));
                    $$Notification.success("Success", "Community created successfully.");
                    return Promise.resolve(/* () */0);
                  }
                })));
      return /* () */0;
    }
  } else {
    return $$Notification.error("Empty", "Answer cant be blank");
  }
}

function booleanButtonClasses(bool) {
  return "toggle-button__button" + (
          bool ? " toggle-button__button--active" : ""
        );
}

var value = SchoolCommunities__Course.name;

var Selectable = {
  value: value,
  searchString: value
};

var CourseSelector = MultiselectInline.Make(Selectable);

function selectedCourses(invertOpt, courses, selectedCourseIds) {
  var invert = invertOpt !== undefined ? invertOpt : false;
  return $$Array.of_list(courses).filter((function (course) {
                var condition = Belt_SetString.has(selectedCourseIds, SchoolCommunities__Course.id(course));
                if (invert) {
                  return !condition;
                } else {
                  return condition;
                }
              }));
}

function unselectedCourses(courses, selectedCourseIds) {
  return selectedCourses(true, courses, selectedCourseIds);
}

function onChangeCourseSearch(send, value) {
  return Curry._1(send, /* UpdateCourseSearch */Block.__(4, [value]));
}

function onSelectCourse(send, course) {
  return Curry._1(send, /* SelectCourse */Block.__(2, [SchoolCommunities__Course.id(course)]));
}

function onDeselectCourse(send, course) {
  return Curry._1(send, /* DeselectCourse */Block.__(3, [SchoolCommunities__Course.id(course)]));
}

function SchoolCommunities__Editor(Props) {
  var courses = Props.courses;
  var community = Props.community;
  var connections = Props.connections;
  var addCommunityCB = Props.addCommunityCB;
  var updateCommunitiesCB = Props.updateCommunitiesCB;
  var match = React.useReducer(reducer, /* tuple */[
        community,
        connections
      ], computeInitialState);
  var send = match[1];
  var state = match[0];
  var saveDisabled = $$String.trim(state.name) === "" || !state.dirty;
  return React.createElement("div", {
              className: "mx-8 pt-8"
            }, React.createElement("h5", {
                  className: "uppercase text-center border-b border-gray-400 pb-2"
                }, "Community Editor"), React.createElement(DisablingCover.make, {
                  disabled: state.saving,
                  children: null
                }, React.createElement("div", {
                      key: "communities-editor",
                      className: "mt-3"
                    }, React.createElement("div", {
                          className: "mt-2"
                        }, React.createElement("label", {
                              className: "inline-block tracking-wide text-gray-700 text-xs font-semibold",
                              htmlFor: "communities-editor__name"
                            }, "What do you want to call this community?"), React.createElement("input", {
                              className: "appearance-none h-10 mt-2 block w-full text-gray-700 border border-gray-400 rounded py-2 px-4 text-sm bg-gray-100 hover:bg-gray-200 focus:outline-none focus:bg-white focus:border-primary-400",
                              id: "communities-editor__name",
                              placeholder: "This community needs a name!",
                              value: state.name,
                              onChange: (function ($$event) {
                                  var name = $$event.target.value;
                                  return Curry._1(send, /* UpdateName */Block.__(0, [name]));
                                })
                            }), React.createElement(School__InputGroupError.make, {
                              message: "is not a valid name",
                              active: state.dirty ? $$String.trim(state.name) === "" : false
                            })), React.createElement("div", {
                          className: "flex items-center mt-6"
                        }, React.createElement("label", {
                              className: "inline-block tracking-wide text-gray-700 text-xs font-semibold",
                              htmlFor: "communities-editor__course-list"
                            }, "Should users be allowed to discuss targets in this community?"), React.createElement("div", {
                              className: "flex toggle-button__group flex-no-shrink rounded-lg overflow-hidden ml-2"
                            }, React.createElement("button", {
                                  className: booleanButtonClasses(state.targetLinkable),
                                  onClick: (function (param) {
                                      return Curry._1(send, /* SetTargetLinkable */Block.__(1, [true]));
                                    })
                                }, "Yes"), React.createElement("button", {
                                  className: booleanButtonClasses(!state.targetLinkable),
                                  onClick: (function (param) {
                                      return Curry._1(send, /* SetTargetLinkable */Block.__(1, [false]));
                                    })
                                }, "No"))), React.createElement("div", {
                          className: "mt-4"
                        }, React.createElement("label", {
                              className: "inline-block tracking-wide text-gray-700 text-xs font-semibold mb-2",
                              htmlFor: "communities-editor__course-targetLinkable"
                            }, "Give access to users from:"), React.createElement(CourseSelector.make, {
                              placeholder: "Search for a course",
                              onChange: (function (param) {
                                  return Curry._1(send, /* UpdateCourseSearch */Block.__(4, [param]));
                                }),
                              value: state.courseSearch,
                              unselected: selectedCourses(true, courses, state.selectedCourseIds),
                              selected: selectedCourses(undefined, courses, state.selectedCourseIds),
                              onSelect: (function (param) {
                                  return Curry._1(send, /* SelectCourse */Block.__(2, [SchoolCommunities__Course.id(param)]));
                                }),
                              onDeselect: (function (param) {
                                  return Curry._1(send, /* DeselectCourse */Block.__(3, [SchoolCommunities__Course.id(param)]));
                                }),
                              emptySelectionMessage: "No courses selected",
                              allItemsSelectedMessage: "You have selected all available courses"
                            }))), React.createElement("button", {
                      key: "communities-editor__update-button",
                      className: "w-full btn btn-large btn-primary mt-3",
                      disabled: saveDisabled,
                      onClick: (function (param) {
                          return handleQuery(community, connections, state, send, addCommunityCB, updateCommunitiesCB, param);
                        })
                    }, community !== undefined ? "Update Community" : "Create a new community")), React.createElement("div", {
                  className: "mt-3 mb-3 text-xs"
                }, React.createElement("span", {
                      className: "leading-normal"
                    }, React.createElement("strong", undefined, "Note:"), " Coaches in your learnmax have access to all communities.")));
}

var make$2 = SchoolCommunities__Editor;

exports.str = str;
exports.CreateCommunityQuery = CreateCommunityQuery;
exports.UpdateCommunityQuery = UpdateCommunityQuery;
exports.CreateCommunityError = CreateCommunityError;
exports.UpdateCommunityError = UpdateCommunityError;
exports.CreateCommunityErrorHandler = CreateCommunityErrorHandler;
exports.UpdateCommunityErrorHandler = UpdateCommunityErrorHandler;
exports.computeInitialState = computeInitialState;
exports.reducer = reducer;
exports.handleConnections = handleConnections;
exports.handleQuery = handleQuery;
exports.booleanButtonClasses = booleanButtonClasses;
exports.Selectable = Selectable;
exports.CourseSelector = CourseSelector;
exports.selectedCourses = selectedCourses;
exports.unselectedCourses = unselectedCourses;
exports.onChangeCourseSearch = onChangeCourseSearch;
exports.onSelectCourse = onSelectCourse;
exports.onDeselectCourse = onDeselectCourse;
exports.make = make$2;
/* CreateCommunityErrorHandler Not a pure module */
