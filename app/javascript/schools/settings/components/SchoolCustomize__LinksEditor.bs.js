// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FaIcon = require("../../../shared/components/FaIcon.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var UrlUtils = require("../../../shared/utils/UrlUtils.bs.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var $$Notification = require("../../../shared/Notification.bs.js");
var DisablingCover = require("../../../shared/components/DisablingCover.bs.js");
var GraphqlErrorHandler = require("../../../shared/utils/GraphqlErrorHandler.bs.js");
var School__InputGroupError = require("../../shared/components/School__InputGroupError.bs.js");
var SchoolCustomize__Customizations = require("../types/SchoolCustomize__Customizations.bs.js");

((require("./SchoolCustomize__LinksEditor.css")));

function str(prim) {
  return prim;
}

function handleKindChange(send, kind, $$event) {
  $$event.preventDefault();
  return Curry._1(send, /* UpdateKind */Block.__(0, [kind]));
}

function isTitleInvalid(title) {
  return $$String.trim(title).length === 0;
}

function handleTitleChange(send, $$event) {
  var title = $$event.target.value;
  return Curry._1(send, /* UpdateTitle */Block.__(1, [
                title,
                isTitleInvalid(title)
              ]));
}

function handleUrlChange(send, $$event) {
  var url = $$event.target.value;
  return Curry._1(send, /* UpdateUrl */Block.__(2, [
                url,
                UrlUtils.isInvalid(false, url)
              ]));
}

var ppx_printed_query = "mutation DestroySchoolLinkMutation($id: ID!)  {\ndestroySchoolLink(id: $id)  {\nsuccess  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "destroySchoolLink");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type DestroySchoolLinkPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field destroySchoolLink on type Mutation is missing");
  }
  return {
          destroySchoolLink: tmp
        };
}

function make(id, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(id, param) {
  return Js_dict.fromArray([/* tuple */[
                  "id",
                  id
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, id, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "id",
                      id
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var DestroySchoolLinkQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function handleDelete(state, send, removeLinkCB, id, $$event) {
  $$event.preventDefault();
  if (List.mem(id, state.deleting)) {
    return /* () */0;
  } else {
    Curry._1(send, /* DisableDelete */Block.__(3, [id]));
    (function (eta) {
            return GraphqlQuery.sendQuery(undefined, eta);
          })(make(id, /* () */0)).then((function (_response) {
            Curry._1(removeLinkCB, id);
            return Promise.resolve(/* () */0);
          }));
    return /* () */0;
  }
}

function deleteIconClasses(deleting) {
  if (deleting) {
    return "fas fa-spinner fa-pulse";
  } else {
    return "far fa-trash-alt";
  }
}

function showLinks(state, send, removeLinkCB, kind, links) {
  if (links) {
    return $$Array.of_list(List.map((function (param) {
                      var url = param[2];
                      var id = param[0];
                      var deleting = List.mem(id, state.deleting);
                      return React.createElement("div", {
                                  key: id,
                                  className: "flex items-center justify-between bg-gray-100 text-xs text-gray-900 border rounded pl-3 mt-2"
                                }, React.createElement("div", {
                                      className: "flex items-center"
                                    }, kind >= 2 ? React.createElement("code", undefined, url) : [
                                        React.createElement("span", {
                                              key: "link-editor-entry__title"
                                            }, param[1]),
                                        React.createElement("i", {
                                              key: "link-editor-entry__icon",
                                              className: "fas fa-link mx-2"
                                            }),
                                        React.createElement("code", {
                                              key: "link-editor-entry__url"
                                            }, url)
                                      ]), React.createElement("button", {
                                      className: "p-3",
                                      title: "Delete " + url,
                                      onClick: (function (param) {
                                          return handleDelete(state, send, removeLinkCB, id, param);
                                        })
                                    }, React.createElement(FaIcon.make, {
                                          classes: deleting ? "fas fa-spinner fa-pulse" : "far fa-trash-alt"
                                        })));
                    }), links));
  } else {
    return React.createElement("div", {
                className: "border border-gray-400 rounded italic text-gray-600 text-xs cursor-default mt-2 p-3"
              }, "There are no custom links here. Add some?");
  }
}

function titleInputVisible(state) {
  var match = state.kind;
  return match < 2;
}

function kindClasses(selected) {
  return "nav-tab-item border-t cursor-pointer w-1/3 appearance-none flex justify-center items-center w-full text-sm text-center text-gray-800 bg-white hover:bg-gray-200 hover:text-gray-900 py-3 px-4 font-semibold leading-tight focus:outline-none" + (
          selected ? " nav-tab-item--selected text-primary-500 bg-white hover:bg-white hover:text-primary-500" : " text-gray-600"
        );
}

function addLinkText(adding) {
  if (adding) {
    return "Adding new link...";
  } else {
    return "Add a New Link";
  }
}

function addLinkDisabled(state) {
  if (state.adding || !state.formDirty) {
    return true;
  } else {
    var match = state.kind;
    if (match >= 2 || !isTitleInvalid(state.title)) {
      return UrlUtils.isInvalid(false, state.url);
    } else {
      return true;
    }
  }
}

var ppx_printed_query$1 = "mutation CreateSchoolLinkMutation($kind: String!, $title: String, $url: String!)  {\ncreateSchoolLink(kind: $kind, title: $title, url: $url)  {\nschoolLink  {\nid  \n}\n\nerrors  \n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createSchoolLink");
  var tmp;
  if (match !== undefined) {
    var match$1 = Js_json.decodeObject(Caml_option.valFromOption(match));
    if (match$1 !== undefined) {
      var value$2 = Caml_option.valFromOption(match$1);
      var match$2 = Js_dict.get(value$2, "schoolLink");
      if (match$2 !== undefined) {
        var temp = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(temp);
        if (match$3 !== undefined) {
          var match$4 = Js_dict.get(value$2, "errors");
          if (match$4 !== undefined) {
            var temp$1 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(temp$1);
            tmp = match$5 !== undefined ? Js_exn.raiseError("graphql_ppx: All fields on variant selection set on type CreateSchoolLinkPayload were null") : /* `Errors */[
                100464587,
                Js_option.getExn(Js_json.decodeArray(temp$1)).map((function (value) {
                        var match = Js_json.decodeString(value);
                        if (match !== undefined) {
                          var value$1 = match;
                          switch (value$1) {
                            case "BlankTitle" :
                                return /* BlankTitle */117021124;
                            case "InvalidKind" :
                                return /* InvalidKind */323733451;
                            case "InvalidLengthTitle" :
                                return /* InvalidLengthTitle */156718395;
                            case "InvalidUrl" :
                                return /* InvalidUrl */-36568872;
                            default:
                              return Js_exn.raiseError("graphql_ppx: Unknown enum variant for CreateSchoolLinkError: " + value$1);
                          }
                        } else {
                          return Js_exn.raiseError("graphql_ppx: Expected enum value for CreateSchoolLinkError, got " + JSON.stringify(value));
                        }
                      }))
              ];
          } else {
            tmp = Js_exn.raiseError("graphql_ppx: Field errors on type CreateSchoolLinkPayload is missing");
          }
        } else {
          var value$3 = Js_option.getExn(Js_json.decodeObject(temp));
          var match$6 = Js_dict.get(value$3, "id");
          var tmp$1;
          if (match$6 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$6);
            var match$7 = Js_json.decodeString(value$4);
            tmp$1 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
          } else {
            tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type SchoolLink is missing");
          }
          tmp = /* `SchoolLink */[
            -214086994,
            {
              id: tmp$1
            }
          ];
        }
      } else {
        tmp = Js_exn.raiseError("graphql_ppx: Field schoolLink on type CreateSchoolLinkPayload is missing");
      }
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Expected type CreateSchoolLinkPayload to be an object");
    }
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field createSchoolLink on type Mutation is missing");
  }
  return {
          createSchoolLink: tmp
        };
}

function make$1(kind, title, url, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "kind",
                    kind
                  ],
                  /* tuple */[
                    "title",
                    title !== undefined ? title : null
                  ],
                  /* tuple */[
                    "url",
                    url
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var kind = variables.kind;
  var title = variables.title;
  var url = variables.url;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "kind",
                    kind
                  ],
                  /* tuple */[
                    "title",
                    title !== undefined ? title : null
                  ],
                  /* tuple */[
                    "url",
                    url
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeVariables$1(kind, title, url, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "kind",
                  kind
                ],
                /* tuple */[
                  "title",
                  title !== undefined ? title : null
                ],
                /* tuple */[
                  "url",
                  url
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$1(graphql_ppx_use_json_variables_fn, kind, title, url, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "kind",
                      kind
                    ],
                    /* tuple */[
                      "title",
                      title !== undefined ? title : null
                    ],
                    /* tuple */[
                      "url",
                      url
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$1 = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002$1
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var CreateSchoolLinkQuery = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  make: make$1,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

function displayNewLink(state, addLinkCB, id) {
  var match = state.kind;
  var tmp;
  switch (match) {
    case /* HeaderLink */0 :
        tmp = /* HeaderLink */Block.__(0, [
            id,
            state.title,
            state.url
          ]);
        break;
    case /* FooterLink */1 :
        tmp = /* FooterLink */Block.__(1, [
            id,
            state.title,
            state.url
          ]);
        break;
    case /* SocialLink */2 :
        tmp = /* SocialLink */Block.__(2, [
            id,
            state.url
          ]);
        break;
    
  }
  return Curry._1(addLinkCB, tmp);
}

function notification(error) {
  if (error >= 156718395) {
    if (error >= 323733451) {
      return /* tuple */[
              "InvalidKind",
              ""
            ];
    } else {
      return /* tuple */[
              "InvalidLengthTitle",
              ""
            ];
    }
  } else if (error >= 117021124) {
    return /* tuple */[
            "BlankTitle",
            ""
          ];
  } else {
    return /* tuple */[
            "Invalid URL",
            "It looks like the URL you've entered isn't valid. Please check, and try again."
          ];
  }
}

var CreateLinkError = {
  notification: notification
};

var CreateLinkErrorHandler = GraphqlErrorHandler.Make(CreateLinkError);

function handleAddLink(state, send, addLinkCB, $$event) {
  $$event.preventDefault();
  if (addLinkDisabled(state)) {
    return /* () */0;
  } else {
    Curry._1(send, /* DisableForm */0);
    var match = state.kind;
    var tmp;
    switch (match) {
      case /* HeaderLink */0 :
          tmp = make$1("header", state.title, state.url, /* () */0);
          break;
      case /* FooterLink */1 :
          tmp = make$1("footer", state.title, state.url, /* () */0);
          break;
      case /* SocialLink */2 :
          tmp = make$1("social", undefined, state.url, /* () */0);
          break;
      
    }
    Curry._2(CreateLinkErrorHandler.$$catch, (function (param) {
            return Curry._1(send, /* EnableForm */1);
          }), (function (eta) {
                return GraphqlQuery.sendQuery(undefined, eta);
              })(tmp).then((function (response) {
                var match = response.createSchoolLink;
                if (match[0] >= 100464587) {
                  return Promise.reject([
                              CreateLinkErrorHandler.Errors,
                              match[1]
                            ]);
                } else {
                  displayNewLink(state, addLinkCB, match[1].id);
                  Curry._1(send, /* ClearForm */2);
                  $$Notification.success("Done!", "A custom link has been added.");
                  return Promise.resolve(/* () */0);
                }
              })));
    return /* () */0;
  }
}

function linksTitle(kind) {
  switch (kind) {
    case /* HeaderLink */0 :
        return "Current Header Links";
    case /* FooterLink */1 :
        return "Current Sitemap Links";
    case /* SocialLink */2 :
        return "Current Social Media Links";
    
  }
}

function unpackLinks(kind, customizations) {
  var tmp;
  switch (kind) {
    case /* HeaderLink */0 :
        tmp = SchoolCustomize__Customizations.headerLinks;
        break;
    case /* FooterLink */1 :
        tmp = SchoolCustomize__Customizations.footerLinks;
        break;
    case /* SocialLink */2 :
        tmp = SchoolCustomize__Customizations.socialLinks;
        break;
    
  }
  return SchoolCustomize__Customizations.unpackLinks(tmp(customizations));
}

function initialState(kind) {
  return {
          kind: kind,
          title: "",
          url: "",
          titleInvalid: false,
          urlInvalid: false,
          formDirty: false,
          adding: false,
          deleting: /* [] */0
        };
}

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* DisableForm */0 :
          return {
                  kind: state.kind,
                  title: state.title,
                  url: state.url,
                  titleInvalid: state.titleInvalid,
                  urlInvalid: state.urlInvalid,
                  formDirty: state.formDirty,
                  adding: true,
                  deleting: state.deleting
                };
      case /* EnableForm */1 :
          return {
                  kind: state.kind,
                  title: state.title,
                  url: state.url,
                  titleInvalid: state.titleInvalid,
                  urlInvalid: state.urlInvalid,
                  formDirty: state.formDirty,
                  adding: false,
                  deleting: state.deleting
                };
      case /* ClearForm */2 :
          return {
                  kind: state.kind,
                  title: "",
                  url: "",
                  titleInvalid: state.titleInvalid,
                  urlInvalid: state.urlInvalid,
                  formDirty: state.formDirty,
                  adding: false,
                  deleting: state.deleting
                };
      
    }
  } else {
    switch (action.tag | 0) {
      case /* UpdateKind */0 :
          return {
                  kind: action[0],
                  title: state.title,
                  url: state.url,
                  titleInvalid: state.titleInvalid,
                  urlInvalid: state.urlInvalid,
                  formDirty: true,
                  adding: state.adding,
                  deleting: state.deleting
                };
      case /* UpdateTitle */1 :
          return {
                  kind: state.kind,
                  title: action[0],
                  url: state.url,
                  titleInvalid: action[1],
                  urlInvalid: state.urlInvalid,
                  formDirty: true,
                  adding: state.adding,
                  deleting: state.deleting
                };
      case /* UpdateUrl */2 :
          return {
                  kind: state.kind,
                  title: state.title,
                  url: action[0],
                  titleInvalid: state.titleInvalid,
                  urlInvalid: action[1],
                  formDirty: true,
                  adding: state.adding,
                  deleting: state.deleting
                };
      case /* DisableDelete */3 :
          return {
                  kind: state.kind,
                  title: state.title,
                  url: state.url,
                  titleInvalid: state.titleInvalid,
                  urlInvalid: state.urlInvalid,
                  formDirty: state.formDirty,
                  adding: state.adding,
                  deleting: /* :: */[
                    action[0],
                    state.deleting
                  ]
                };
      
    }
  }
}

function SchoolCustomize__LinksEditor(Props) {
  var kind = Props.kind;
  var customizations = Props.customizations;
  var addLinkCB = Props.addLinkCB;
  var removeLinkCB = Props.removeLinkCB;
  var match = React.useReducer(reducer, initialState(kind));
  var send = match[1];
  var state = match[0];
  return React.createElement("div", {
              className: "mt-8 mx-8 pb-6"
            }, React.createElement("h5", {
                  className: "uppercase text-center border-b border-gray-400 pb-2"
                }, "Manage custom links"), React.createElement("div", {
                  className: "mt-3"
                }, React.createElement("label", {
                      className: "inline-block tracking-wide text-xs font-semibold"
                    }, "Location of Link"), React.createElement("div", {
                      className: "flex bg-white border border-t-0 rounded-t mt-2"
                    }, React.createElement("div", {
                          className: kindClasses(state.kind === /* HeaderLink */0),
                          title: "Show header links",
                          onClick: (function (param) {
                              return handleKindChange(send, /* HeaderLink */0, param);
                            })
                        }, "Header"), React.createElement("div", {
                          className: kindClasses(state.kind === /* FooterLink */1) + " border-l",
                          title: "Show footer links",
                          onClick: (function (param) {
                              return handleKindChange(send, /* FooterLink */1, param);
                            })
                        }, "Footer Sitemap"), React.createElement("div", {
                          className: kindClasses(state.kind === /* SocialLink */2) + " border-l",
                          title: "Show social media links",
                          onClick: (function (param) {
                              return handleKindChange(send, /* SocialLink */2, param);
                            })
                        }, "Social"))), React.createElement("div", {
                  className: "p-5 border border-t-0 rounded-b"
                }, React.createElement("label", {
                      className: "inline-block tracking-wide text-xs font-semibold mt-4"
                    }, linksTitle(state.kind)), showLinks(state, send, removeLinkCB, state.kind, unpackLinks(state.kind, customizations)), React.createElement(DisablingCover.make, {
                      disabled: state.adding,
                      children: null
                    }, React.createElement("div", {
                          key: "sc-links-editor__form-body",
                          className: "flex mt-3"
                        }, titleInputVisible(state) ? React.createElement("div", {
                                className: "flex-grow mr-4"
                              }, React.createElement("label", {
                                    className: "inline-block tracking-wide text-xs font-semibold",
                                    htmlFor: "link-title"
                                  }, "Title"), React.createElement("input", {
                                    className: "appearance-none block w-full bg-white border border-gray-400 rounded py-3 px-4 mt-2 leading-tight focus:outline-none focus:bg-white focus:border-gray-500",
                                    id: "link-title",
                                    maxLength: 24,
                                    placeholder: "A short title for a new link",
                                    type: "text",
                                    value: state.title,
                                    onChange: (function (param) {
                                        return handleTitleChange(send, param);
                                      })
                                  }), React.createElement(School__InputGroupError.make, {
                                    message: "can't be empty",
                                    active: state.titleInvalid
                                  })) : null, React.createElement("div", {
                              className: "flex-grow"
                            }, React.createElement("label", {
                                  className: "inline-block tracking-wide text-xs font-semibold",
                                  htmlFor: "link-full-url"
                                }, "Full URL"), React.createElement("input", {
                                  className: "appearance-none block w-full bg-white border border-gray-400 rounded py-3 px-4 mt-2 leading-tight focus:outline-none focus:bg-white focus:border-gray-500",
                                  id: "link-full-url",
                                  placeholder: "Full URL, staring with https://",
                                  type: "text",
                                  value: state.url,
                                  onChange: (function (param) {
                                      return handleUrlChange(send, param);
                                    })
                                }), React.createElement(School__InputGroupError.make, {
                                  message: "is not a valid URL",
                                  active: state.urlInvalid
                                }))), React.createElement("div", {
                          className: "flex justify-end"
                        }, React.createElement("button", {
                              key: "sc-links-editor__form-button",
                              className: "btn btn-primary btn-large mt-6",
                              disabled: addLinkDisabled(state),
                              onClick: (function (param) {
                                  return handleAddLink(state, send, addLinkCB, param);
                                })
                            }, state.adding ? "Adding new link..." : "Add a New Link")))));
}

var make$2 = SchoolCustomize__LinksEditor;

exports.str = str;
exports.handleKindChange = handleKindChange;
exports.isTitleInvalid = isTitleInvalid;
exports.handleTitleChange = handleTitleChange;
exports.handleUrlChange = handleUrlChange;
exports.DestroySchoolLinkQuery = DestroySchoolLinkQuery;
exports.handleDelete = handleDelete;
exports.deleteIconClasses = deleteIconClasses;
exports.showLinks = showLinks;
exports.titleInputVisible = titleInputVisible;
exports.kindClasses = kindClasses;
exports.addLinkText = addLinkText;
exports.addLinkDisabled = addLinkDisabled;
exports.CreateSchoolLinkQuery = CreateSchoolLinkQuery;
exports.displayNewLink = displayNewLink;
exports.CreateLinkError = CreateLinkError;
exports.CreateLinkErrorHandler = CreateLinkErrorHandler;
exports.handleAddLink = handleAddLink;
exports.linksTitle = linksTitle;
exports.unpackLinks = unpackLinks;
exports.initialState = initialState;
exports.reducer = reducer;
exports.make = make$2;
/*  Not a pure module */
