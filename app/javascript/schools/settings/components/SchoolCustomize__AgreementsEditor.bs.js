// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var $$Notification = require("../../../shared/Notification.bs.js");
var DisablingCover = require("../../../shared/components/DisablingCover.bs.js");
var GraphqlErrorHandler = require("../../../shared/utils/GraphqlErrorHandler.bs.js");
var SchoolCustomize__Customizations = require("../types/SchoolCustomize__Customizations.bs.js");
var SchoolCustomize__UpdateSchoolStringError = require("./SchoolCustomize__UpdateSchoolStringError.bs.js");

((require("./SchoolCustomize__AgreementsEditor.css")));

function str(prim) {
  return prim;
}

function kindToString(kind) {
  if (kind) {
    return "Terms of Use";
  } else {
    return "Privacy Policy";
  }
}

function kindToKey(kind) {
  if (kind) {
    return "terms_of_use";
  } else {
    return "privacy_policy";
  }
}

function handleAgreementChange(send, $$event) {
  var agreement = $$event.target.value;
  return Curry._1(send, /* UpdateAgreement */[agreement]);
}

function updateAgreementText(updating, kind) {
  if (updating) {
    return "Updating...";
  } else {
    return "Update " + (
            kind ? "Terms of Use" : "Privacy Policy"
          );
  }
}

var ppx_printed_query = "mutation UpdateSchoolStringMutation($key: String!, $value: String!)  {\nupdateSchoolString(key: $key, value: $value)  {\nerrors  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updateSchoolString");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "errors");
    tmp = {
      errors: match$1 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$1))).map((function (value) {
                var match = Js_json.decodeString(value);
                if (match !== undefined) {
                  var value$1 = match;
                  switch (value$1) {
                    case "InvalidKey" :
                        return /* InvalidKey */-37069048;
                    case "InvalidLengthValue" :
                        return /* InvalidLengthValue */718585620;
                    case "InvalidValue" :
                        return /* InvalidValue */522207514;
                    default:
                      return Js_exn.raiseError("graphql_ppx: Unknown enum variant for UpdateSchoolStringError: " + value$1);
                  }
                } else {
                  return Js_exn.raiseError("graphql_ppx: Expected enum value for UpdateSchoolStringError, got " + JSON.stringify(value));
                }
              })) : Js_exn.raiseError("graphql_ppx: Field errors on type UpdateSchoolStringPayload is missing")
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field updateSchoolString on type Mutation is missing");
  }
  return {
          updateSchoolString: tmp
        };
}

function make(key, value, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "key",
                    key
                  ],
                  /* tuple */[
                    "value",
                    value
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var key = variables.key;
  var value = variables.value;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "key",
                    key
                  ],
                  /* tuple */[
                    "value",
                    value
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(key, value, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "key",
                  key
                ],
                /* tuple */[
                  "value",
                  value
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, key, value, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "key",
                      key
                    ],
                    /* tuple */[
                      "value",
                      value
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var UpdateSchoolStringQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var UpdateSchoolStringErrorHandler = GraphqlErrorHandler.Make(SchoolCustomize__UpdateSchoolStringError);

function handleUpdateAgreement(state, send, kind, updatePrivacyPolicyCB, updateTermsOfUseCB, $$event) {
  $$event.preventDefault();
  Curry._1(send, /* BeginUpdate */0);
  Curry._2(UpdateSchoolStringErrorHandler.$$catch, (function (param) {
          return Curry._1(send, /* ErrorOccured */1);
        }), (function (eta) {
              return GraphqlQuery.sendQuery(undefined, eta);
            })(make(kind ? "terms_of_use" : "privacy_policy", state.agreement, /* () */0)).then((function (result) {
              var errors = result.updateSchoolString.errors;
              if (errors.length !== 0) {
                return Promise.reject([
                            UpdateSchoolStringErrorHandler.Errors,
                            errors
                          ]);
              } else {
                $$Notification.success("Done!", (
                      kind ? "Terms of Use" : "Privacy Policy"
                    ) + " has been updated.");
                if (kind) {
                  Curry._1(updateTermsOfUseCB, state.agreement);
                } else {
                  Curry._1(updatePrivacyPolicyCB, state.agreement);
                }
                Curry._1(send, /* DoneUpdating */2);
                return Promise.resolve(/* () */0);
              }
            })));
  return /* () */0;
}

function updateAgreementDisabled(state) {
  return !state.formDirty;
}

function initialState(kind, customizations) {
  var agreement = kind ? SchoolCustomize__Customizations.termsOfUse(customizations) : SchoolCustomize__Customizations.privacyPolicy(customizations);
  return {
          agreement: agreement !== undefined ? agreement : "",
          updating: false,
          formDirty: false
        };
}

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* BeginUpdate */0 :
          return {
                  agreement: state.agreement,
                  updating: true,
                  formDirty: state.formDirty
                };
      case /* ErrorOccured */1 :
          return {
                  agreement: state.agreement,
                  updating: false,
                  formDirty: state.formDirty
                };
      case /* DoneUpdating */2 :
          return {
                  agreement: state.agreement,
                  updating: false,
                  formDirty: false
                };
      
    }
  } else {
    return {
            agreement: action[0],
            updating: state.updating,
            formDirty: true
          };
  }
}

function SchoolCustomize__AgreementsEditor(Props) {
  var kind = Props.kind;
  var customizations = Props.customizations;
  var updatePrivacyPolicyCB = Props.updatePrivacyPolicyCB;
  var updateTermsOfUseCB = Props.updateTermsOfUseCB;
  var match = React.useReducer(reducer, initialState(kind, customizations));
  var send = match[1];
  var state = match[0];
  return React.createElement("div", {
              className: "mx-8 pt-8 flex flex-col agreements-editor__container"
            }, React.createElement("h5", {
                  className: "uppercase text-center border-b border-gray-400 pb-2"
                }, "Manage " + (
                  kind ? "Terms of Use" : "Privacy Policy"
                )), React.createElement(DisablingCover.make, {
                  disabled: state.updating,
                  containerClasses: "flex flex-col flex-1",
                  children: null
                }, React.createElement("div", {
                      key: "agreements-editor__input-group",
                      className: "mt-3 flex flex-col flex-1"
                    }, React.createElement("label", {
                          className: "inline-block tracking-wide text-xs font-semibold",
                          htmlFor: "agreements-editor__value"
                        }, "Body of Agreement ", React.createElement("i", {
                              className: "fab fa-markdown text-base"
                            })), React.createElement("textarea", {
                          className: "appearance-none block w-full bg-white border border-gray-400 rounded py-3 px-4 mt-2 leading-tight focus:outline-none focus:bg-white focus:border-gray-500 flex-1",
                          id: "agreements-editor__value",
                          maxLength: 10000,
                          placeholder: "Leave the agreement body empty to hide the footer link.",
                          value: state.agreement,
                          onChange: (function (param) {
                              return handleAgreementChange(send, param);
                            })
                        })), React.createElement("button", {
                      key: "agreements-editor__update-button",
                      className: "w-full btn btn-large btn-primary mt-4",
                      disabled: !state.formDirty,
                      onClick: (function (param) {
                          return handleUpdateAgreement(state, send, kind, updatePrivacyPolicyCB, updateTermsOfUseCB, param);
                        })
                    }, updateAgreementText(state.updating, kind))));
}

var make$1 = SchoolCustomize__AgreementsEditor;

exports.str = str;
exports.kindToString = kindToString;
exports.kindToKey = kindToKey;
exports.handleAgreementChange = handleAgreementChange;
exports.updateAgreementText = updateAgreementText;
exports.UpdateSchoolStringQuery = UpdateSchoolStringQuery;
exports.UpdateSchoolStringErrorHandler = UpdateSchoolStringErrorHandler;
exports.handleUpdateAgreement = handleUpdateAgreement;
exports.updateAgreementDisabled = updateAgreementDisabled;
exports.initialState = initialState;
exports.reducer = reducer;
exports.make = make$1;
/*  Not a pure module */
