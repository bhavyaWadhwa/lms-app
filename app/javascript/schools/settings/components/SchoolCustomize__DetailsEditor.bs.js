// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var OptionUtils = require("../../../shared/utils/OptionUtils.bs.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var DisablingCover = require("../../../shared/components/DisablingCover.bs.js");
var School__InputGroupError = require("../../shared/components/School__InputGroupError.bs.js");

function str(prim) {
  return prim;
}

function updateButtonText(saving) {
  if (saving) {
    return "Updating...";
  } else {
    return "Update";
  }
}

var ppx_printed_query = "mutation UpdateSchoolMutation($name: String!, $about: String!)  {\nupdateSchool(about: $about, name: $name)  {\nsuccess  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updateSchool");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type UpdateSchoolPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field updateSchool on type Mutation is missing");
  }
  return {
          updateSchool: tmp
        };
}

function make(name, about, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "about",
                    about
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var name = variables.name;
  var about = variables.about;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "about",
                    about
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(name, about, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "about",
                  about
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, name, about, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "name",
                      name
                    ],
                    /* tuple */[
                      "about",
                      about
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var UpdateSchoolQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function optionAbout(about) {
  if (about === "") {
    return ;
  } else {
    return about;
  }
}

function updateSchoolQuery(state, send, updateDetailsCB) {
  Curry._1(send, /* UpdateSaving */Block.__(2, [true]));
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make(state.name, state.about, /* () */0)).then((function (response) {
          if (response.updateSchool.success) {
            Curry._2(updateDetailsCB, state.name, optionAbout(state.about));
          } else {
            Curry._1(send, /* UpdateSaving */Block.__(2, [false]));
          }
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function updateButtonDisabled(state) {
  if (!state.formDirty || state.saving) {
    return true;
  } else {
    return state.name.length < 1;
  }
}

function initialState(name, about) {
  return {
          name: name,
          about: OptionUtils.$$default("", about),
          saving: false,
          formDirty: false
        };
}

function reducer(state, action) {
  switch (action.tag | 0) {
    case /* UpdateName */0 :
        return {
                name: action[0],
                about: state.about,
                saving: state.saving,
                formDirty: true
              };
    case /* UpdateAbout */1 :
        return {
                name: state.name,
                about: action[0],
                saving: state.saving,
                formDirty: true
              };
    case /* UpdateSaving */2 :
        return {
                name: state.name,
                about: state.about,
                saving: action[0],
                formDirty: state.formDirty
              };
    
  }
}

function handleInputChange(callback, $$event) {
  return Curry._1(callback, $$event.target.value);
}

function SchoolCustomize__DetailsEditor(Props) {
  var name = Props.name;
  var about = Props.about;
  var updateDetailsCB = Props.updateDetailsCB;
  var match = React.useReducer(reducer, initialState(name, about));
  var send = match[1];
  var state = match[0];
  return React.createElement("div", {
              className: "mx-8 pt-8"
            }, React.createElement("h5", {
                  className: "uppercase text-center border-b border-gray-400 pb-2"
                }, "Update Details"), React.createElement(DisablingCover.make, {
                  disabled: state.saving,
                  children: null
                }, React.createElement("div", {
                      className: "mt-3"
                    }, React.createElement("label", {
                          className: "inline-block tracking-wide text-xs font-semibold",
                          htmlFor: "details-editor__name"
                        }, "School Name"), React.createElement("input", {
                          className: "appearance-none block w-full bg-white text-gray-800 border border-gray-400 rounded py-3 px-4 mt-2 leading-tight focus:outline-none focus:bg-white focus:border-gray-500",
                          id: "details-editor__name",
                          maxLength: 50,
                          placeholder: "Type school name here",
                          type: "text",
                          value: state.name,
                          onChange: (function (param) {
                              var name = param.target.value;
                              return Curry._1(send, /* UpdateName */Block.__(0, [name]));
                            })
                        }), React.createElement(School__InputGroupError.make, {
                          message: "name should be greater than 2 characters in length",
                          active: state.name.length < 2
                        })), React.createElement("div", {
                      className: "mt-3"
                    }, React.createElement("label", {
                          className: "inline-block tracking-wide text-xs font-semibold",
                          htmlFor: "details-editor__about"
                        }, "About", React.createElement("span", {
                              className: "font-normal"
                            }, " (Maximum 500 characters)")), React.createElement("textarea", {
                          className: "appearance-none block w-full bg-white text-gray-800 border border-gray-400 rounded py-3 px-4 mt-2 leading-tight focus:outline-none focus:bg-white focus:border-gray-500",
                          id: "details-editor__about",
                          maxLength: 500,
                          placeholder: "Add more details about the school.",
                          rows: 7,
                          value: state.about,
                          onChange: (function (param) {
                              var about = param.target.value;
                              return Curry._1(send, /* UpdateAbout */Block.__(1, [about]));
                            })
                        })), React.createElement("button", {
                      key: "details-editor__update-button",
                      className: "w-full bg-indigo-600 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded focus:outline-none mt-3",
                      disabled: updateButtonDisabled(state),
                      onClick: (function (param) {
                          return updateSchoolQuery(state, send, updateDetailsCB);
                        })
                    }, state.saving ? "Updating..." : "Update")));
}

var make$1 = SchoolCustomize__DetailsEditor;

exports.str = str;
exports.updateButtonText = updateButtonText;
exports.UpdateSchoolQuery = UpdateSchoolQuery;
exports.optionAbout = optionAbout;
exports.updateSchoolQuery = updateSchoolQuery;
exports.updateButtonDisabled = updateButtonDisabled;
exports.initialState = initialState;
exports.reducer = reducer;
exports.handleInputChange = handleInputChange;
exports.make = make$1;
/* react Not a pure module */
