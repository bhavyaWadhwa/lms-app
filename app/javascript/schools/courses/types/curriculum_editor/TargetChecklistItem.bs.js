// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var ArrayUtils = require("../../../../shared/utils/ArrayUtils.bs.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

function title(t) {
  return t.title;
}

function kind(t) {
  return t.kind;
}

function optional(t) {
  return t.optional;
}

function actionStringForKind(kind) {
  if (typeof kind === "number") {
    switch (kind) {
      case /* Files */0 :
          return "Upload Files";
      case /* Link */1 :
          return "Attach a Link";
      case /* ShortText */2 :
          return "Write Short Text";
      case /* LongText */3 :
          return "Write Long Text";
      
    }
  } else {
    return "Choose from a list";
  }
}

function kindAsString(kind) {
  if (typeof kind === "number") {
    switch (kind) {
      case /* Files */0 :
          return "files";
      case /* Link */1 :
          return "link";
      case /* ShortText */2 :
          return "shortText";
      case /* LongText */3 :
          return "longText";
      
    }
  } else {
    return "multiChoice";
  }
}

function make(title, kind, optional) {
  return {
          title: title,
          kind: kind,
          optional: optional
        };
}

function updateTitle(title, t) {
  return {
          title: title,
          kind: t.kind,
          optional: t.optional
        };
}

function updateKind(kind, t) {
  return {
          title: t.title,
          kind: kind,
          optional: t.optional
        };
}

function updateOptional(optional, t) {
  return {
          title: t.title,
          kind: t.kind,
          optional: optional
        };
}

function removeItem(index, list) {
  return list.filter((function (_item, i) {
                return i !== index;
              }));
}

var moveUp = ArrayUtils.swapUp;

var moveDown = ArrayUtils.swapDown;

function copy(i, list) {
  return ArrayUtils.flatten($$Array.mapi((function (index, item) {
                    if (i === index) {
                      return /* :: */[
                              item,
                              /* :: */[
                                item,
                                /* [] */0
                              ]
                            ];
                    } else {
                      return /* :: */[
                              item,
                              /* [] */0
                            ];
                    }
                  }), list));
}

function removeMultichoiceOption(choiceIndex, t) {
  var match = t.kind;
  if (typeof match === "number") {
    return t;
  } else {
    var updatedChoices = ArrayUtils.flatten($$Array.mapi((function (i, choice) {
                if (i === choiceIndex) {
                  return /* [] */0;
                } else {
                  return /* :: */[
                          choice,
                          /* [] */0
                        ];
                }
              }), match[0]));
    return updateKind(/* MultiChoice */[updatedChoices], t);
  }
}

function addMultichoiceOption(t) {
  var match = t.kind;
  if (typeof match === "number") {
    return t;
  } else {
    var updatedChoices = $$Array.append(match[0], [""]);
    return updateKind(/* MultiChoice */[updatedChoices], t);
  }
}

function updateMultichoiceOption(choiceIndex, newOption, t) {
  var match = t.kind;
  if (typeof match === "number") {
    return t;
  } else {
    var updatedChoices = $$Array.mapi((function (i, choice) {
            if (i === choiceIndex) {
              return newOption;
            } else {
              return choice;
            }
          }), match[0]);
    return updateKind(/* MultiChoice */[updatedChoices], t);
  }
}

function isFilesKind(t) {
  var match = t.kind;
  if (typeof match === "number") {
    return match === 0;
  } else {
    return false;
  }
}

function isValidChecklistItem(t) {
  var match = t.kind;
  if (typeof match === "number") {
    return $$String.trim(t.title).length >= 1;
  } else if (ArrayUtils.isEmpty(match[0].filter((function (choice) {
                return $$String.trim(choice) === "";
              })))) {
    return $$String.trim(t.title).length >= 1;
  } else {
    return false;
  }
}

function decodeMetadata(kind, json) {
  return Json_decode.field("choices", (function (param) {
                return Json_decode.array(Json_decode.string, param);
              }), json);
}

function decode(json) {
  var otherKind = Json_decode.field("kind", Json_decode.string, json);
  var tmp;
  switch (otherKind) {
    case "files" :
        tmp = /* Files */0;
        break;
    case "link" :
        tmp = /* Link */1;
        break;
    case "longText" :
        tmp = /* LongText */3;
        break;
    case "multiChoice" :
        tmp = /* MultiChoice */[Json_decode.field("metadata", (function (param) {
                  return decodeMetadata(/* MultiChoice */288683674, param);
                }), json)];
        break;
    case "shortText" :
        tmp = /* ShortText */2;
        break;
    default:
      Rollbar.error("Unkown kind: " + (otherKind + "received in CurriculumEditor__TargetChecklistItem"));
      tmp = /* LongText */3;
  }
  return {
          title: Json_decode.field("title", Json_decode.string, json),
          kind: tmp,
          optional: Json_decode.field("optional", Json_decode.bool, json)
        };
}

function encodeMetadata(kind) {
  if (typeof kind === "number") {
    return Json_encode.object_(/* [] */0);
  } else {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "choices",
                  kind[0]
                ],
                /* [] */0
              ]);
  }
}

function encode(t) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                kindAsString(t.kind)
              ],
              /* :: */[
                /* tuple */[
                  "title",
                  t.title
                ],
                /* :: */[
                  /* tuple */[
                    "optional",
                    t.optional
                  ],
                  /* :: */[
                    /* tuple */[
                      "metadata",
                      encodeMetadata(t.kind)
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

function encodeChecklist(checklist) {
  return Json_encode.array(encode, checklist);
}

var longText = {
  title: "",
  kind: /* LongText */3,
  optional: false
};

exports.title = title;
exports.kind = kind;
exports.optional = optional;
exports.actionStringForKind = actionStringForKind;
exports.kindAsString = kindAsString;
exports.make = make;
exports.updateTitle = updateTitle;
exports.updateKind = updateKind;
exports.updateOptional = updateOptional;
exports.removeItem = removeItem;
exports.moveUp = moveUp;
exports.moveDown = moveDown;
exports.copy = copy;
exports.removeMultichoiceOption = removeMultichoiceOption;
exports.addMultichoiceOption = addMultichoiceOption;
exports.updateMultichoiceOption = updateMultichoiceOption;
exports.longText = longText;
exports.isFilesKind = isFilesKind;
exports.isValidChecklistItem = isValidChecklistItem;
exports.decodeMetadata = decodeMetadata;
exports.decode = decode;
exports.encodeMetadata = encodeMetadata;
exports.encode = encode;
exports.encodeChecklist = encodeChecklist;
/* ArrayUtils Not a pure module */
