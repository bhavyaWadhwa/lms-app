// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");

function id(t) {
  return t.id;
}

function name(t) {
  return t.name;
}

function description(t) {
  return t.description;
}

function milestone(t) {
  return t.milestone;
}

function levelId(t) {
  return t.levelId;
}

function archived(t) {
  return t.archived;
}

function decode(json) {
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          name: Json_decode.field("name", Json_decode.string, json),
          description: Caml_option.null_to_opt(Json_decode.field("description", (function (param) {
                      return Json_decode.nullable(Json_decode.string, param);
                    }), json)),
          milestone: Json_decode.field("milestone", Json_decode.bool, json),
          levelId: Json_decode.field("levelId", Json_decode.string, json),
          sortIndex: Json_decode.field("sortIndex", Json_decode.$$int, json),
          archived: Json_decode.field("archived", Json_decode.bool, json)
        };
}

function create(id, name, description, milestone, levelId, sortIndex, archived) {
  return {
          id: id,
          name: name,
          description: description,
          milestone: milestone,
          levelId: levelId,
          sortIndex: sortIndex,
          archived: archived
        };
}

function updateList(targetGroups, targetGroup) {
  var oldTargetGroups = List.filter((function (tg) {
            return tg.id !== targetGroup.id;
          }))(targetGroups);
  return List.rev(List.append(/* :: */[
                  targetGroup,
                  /* [] */0
                ], List.rev(oldTargetGroups)));
}

function sort(targetGroups) {
  return List.sort((function (x, y) {
                return x.sortIndex - y.sortIndex | 0;
              }), targetGroups);
}

function unarchive(t) {
  return {
          id: t.id,
          name: t.name,
          description: t.description,
          milestone: t.milestone,
          levelId: t.levelId,
          sortIndex: t.sortIndex,
          archived: false
        };
}

function find(id, targetGroups) {
  return List.find((function (tg) {
                return tg.id === id;
              }), targetGroups);
}

function updateSortIndex(sortedTargetGroups) {
  return List.mapi((function (sortIndex, t) {
                return create(t.id, t.name, t.description, t.milestone, t.levelId, sortIndex, t.archived);
              }), sortedTargetGroups);
}

exports.id = id;
exports.name = name;
exports.description = description;
exports.milestone = milestone;
exports.levelId = levelId;
exports.archived = archived;
exports.decode = decode;
exports.create = create;
exports.updateList = updateList;
exports.sort = sort;
exports.unarchive = unarchive;
exports.find = find;
exports.updateSortIndex = updateSortIndex;
/* No side effect */
