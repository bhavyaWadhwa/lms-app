// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../../shared/utils/GraphqlQuery.bs.js");

var ppx_printed_query = "mutation SortCurriculumResourcesMutation($resourceIds: [ID!]!, $resourceType: String!)  {\nsortCurriculumResources(resourceIds: $resourceIds, resourceType: $resourceType)  {\nsuccess  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "sortCurriculumResources");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type SortCurriculumResourcesPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field sortCurriculumResources on type Mutation is missing");
  }
  return {
          sortCurriculumResources: tmp
        };
}

function make(resourceIds, resourceType, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "resourceIds",
                    resourceIds.map((function (prim) {
                            return prim;
                          }))
                  ],
                  /* tuple */[
                    "resourceType",
                    resourceType
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var resourceIds = variables.resourceIds;
  var resourceType = variables.resourceType;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "resourceIds",
                    resourceIds.map((function (prim) {
                            return prim;
                          }))
                  ],
                  /* tuple */[
                    "resourceType",
                    resourceType
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(resourceIds, resourceType, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "resourceIds",
                  resourceIds.map((function (prim) {
                          return prim;
                        }))
                ],
                /* tuple */[
                  "resourceType",
                  resourceType
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, resourceIds, resourceType, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "resourceIds",
                      resourceIds.map((function (prim) {
                              return prim;
                            }))
                    ],
                    /* tuple */[
                      "resourceType",
                      resourceType
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var SortResourceMutation = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function resourceTypeToString(resourceType) {
  if (resourceType) {
    return "TargetGroup";
  } else {
    return "Target";
  }
}

function sort(resourceType, resourceIds) {
  GraphqlQuery.sendQuery(false, make(resourceIds, resourceType ? "TargetGroup" : "Target", /* () */0)).then((function (_response) {
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

exports.SortResourceMutation = SortResourceMutation;
exports.resourceTypeToString = resourceTypeToString;
exports.sort = sort;
/* GraphqlQuery Not a pure module */
