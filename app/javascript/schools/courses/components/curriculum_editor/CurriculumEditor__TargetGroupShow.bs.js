// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ListUtils = require("../../../../shared/utils/ListUtils.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../../shared/utils/GraphqlQuery.bs.js");
var CurriculumEditor__Target = require("../../types/curriculum_editor/CurriculumEditor__Target.bs.js");
var CurriculumEditor__TargetShow = require("./CurriculumEditor__TargetShow.bs.js");
var CurriculumEditor__TargetGroup = require("../../types/curriculum_editor/CurriculumEditor__TargetGroup.bs.js");
var CurriculumEditor__SortResourcesMutation = require("../../utils/curriculum_editor/CurriculumEditor__SortResourcesMutation.bs.js");

function str(prim) {
  return prim;
}

var ppx_printed_query = "mutation CreateTargetMutation($title: String!, $targetGroupId: String!)  {\ncreateTarget(title: $title, targetGroupId: $targetGroupId)  {\ntarget  {\nid  \ncontentBlockId  \nsampleContent  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createTarget");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "target");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      if (match$2 !== undefined) {
        tmp$1 = undefined;
      } else {
        var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
        var match$3 = Js_dict.get(value$4, "id");
        var tmp$2;
        if (match$3 !== undefined) {
          var value$5 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeString(value$5);
          tmp$2 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        } else {
          tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type CreateTarget is missing");
        }
        var match$5 = Js_dict.get(value$4, "contentBlockId");
        var tmp$3;
        if (match$5 !== undefined) {
          var value$6 = Caml_option.valFromOption(match$5);
          var match$6 = Js_json.decodeString(value$6);
          tmp$3 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        } else {
          tmp$3 = Js_exn.raiseError("graphql_ppx: Field contentBlockId on type CreateTarget is missing");
        }
        var match$7 = Js_dict.get(value$4, "sampleContent");
        var tmp$4;
        if (match$7 !== undefined) {
          var value$7 = Caml_option.valFromOption(match$7);
          var match$8 = Js_json.decodeString(value$7);
          tmp$4 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
        } else {
          tmp$4 = Js_exn.raiseError("graphql_ppx: Field sampleContent on type CreateTarget is missing");
        }
        tmp$1 = {
          id: tmp$2,
          contentBlockId: tmp$3,
          sampleContent: tmp$4
        };
      }
    } else {
      tmp$1 = undefined;
    }
    tmp = {
      target: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field createTarget on type Mutation is missing");
  }
  return {
          createTarget: tmp
        };
}

function make(title, targetGroupId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "title",
                    title
                  ],
                  /* tuple */[
                    "targetGroupId",
                    targetGroupId
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var title = variables.title;
  var targetGroupId = variables.targetGroupId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "title",
                    title
                  ],
                  /* tuple */[
                    "targetGroupId",
                    targetGroupId
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(title, targetGroupId, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "title",
                  title
                ],
                /* tuple */[
                  "targetGroupId",
                  targetGroupId
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, title, targetGroupId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "title",
                      title
                    ],
                    /* tuple */[
                      "targetGroupId",
                      targetGroupId
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var CreateTargetMutation = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function reducer(state, action) {
  if (action) {
    var targetTitle = action[0];
    return {
            targetTitle: targetTitle,
            savingNewTarget: state.savingNewTarget,
            validTargetTitle: targetTitle.length > 1
          };
  } else {
    return {
            targetTitle: state.targetTitle,
            savingNewTarget: !state.savingNewTarget,
            validTargetTitle: state.validTargetTitle
          };
  }
}

function archivedClasses(archived) {
  return "target-group__header flex flex-col items-center justify-center relative cursor-pointer px-20 pb-7 text-center rounded-lg rounded-b-none overflow-hidden w-full " + (
          archived ? "target-group__header--archived" : ""
        );
}

function updateSortIndex(targetGroups, targetGroup, up, updateTargetGroupSortIndexCB) {
  var newTargetGroups = ListUtils.swap(up, targetGroup, targetGroups);
  var targetGroupIds = $$Array.of_list(List.map(CurriculumEditor__TargetGroup.id, newTargetGroups));
  CurriculumEditor__SortResourcesMutation.sort(/* TargetGroup */1, targetGroupIds);
  return Curry._1(updateTargetGroupSortIndexCB, newTargetGroups);
}

function sortIndexHiddenClass(bool) {
  if (bool) {
    return " invisible";
  } else {
    return "";
  }
}

function CurriculumEditor__TargetGroupShow(Props) {
  var targetGroup = Props.targetGroup;
  var targetGroups = Props.targetGroups;
  var targets = Props.targets;
  var showTargetGroupEditorCB = Props.showTargetGroupEditorCB;
  var updateTargetCB = Props.updateTargetCB;
  var showArchived = Props.showArchived;
  var updateTargetSortIndexCB = Props.updateTargetSortIndexCB;
  var updateTargetGroupSortIndexCB = Props.updateTargetGroupSortIndexCB;
  var index = Props.index;
  var course = Props.course;
  var match = React.useReducer(reducer, {
        targetTitle: "",
        savingNewTarget: false,
        validTargetTitle: false
      });
  var send = match[1];
  var state = match[0];
  var milestone = CurriculumEditor__TargetGroup.milestone(targetGroup);
  var targetGroupArchived = CurriculumEditor__TargetGroup.archived(targetGroup);
  var targetsInTG = CurriculumEditor__Target.sort(List.filter((function (target) {
                return CurriculumEditor__Target.targetGroupId(target) === CurriculumEditor__TargetGroup.id(targetGroup);
              }))(targets));
  var targetsToDisplay = showArchived ? targetsInTG : List.filter((function (target) {
              return CurriculumEditor__Target.visibility(target) !== /* Archived */2;
            }))(targetsInTG);
  var handleResponseCB = function (target) {
    var targetId = target.id;
    var targetGroupId = CurriculumEditor__TargetGroup.id(targetGroup);
    var newTarget = CurriculumEditor__Target.template(targetId, targetGroupId, state.targetTitle);
    Curry._1(send, /* UpdateTargetSaving */0);
    Curry._1(send, /* UpdateTargetTitle */[""]);
    return Curry._1(updateTargetCB, newTarget);
  };
  var match$1 = CurriculumEditor__TargetGroup.description(targetGroup);
  var tmp;
  if (List.length(targetGroups) === 1) {
    tmp = null;
  } else {
    var bool = (index + 1 | 0) === List.length(targetGroups);
    tmp = React.createElement("div", {
          className: "target-group__group-reorder flex flex-col shadow rounded-l-lg absolute h-full border border-r-0 overflow-hidden text-gray-700 justify-between items-center bg-white"
        }, React.createElement("div", {
              className: "target-group__group-reorder-up flex items-center justify-center cursor-pointer w-9 h-9 p-1 text-gray-400 hover:bg-gray-200" + (
                index === 0 ? " invisible" : ""
              ),
              id: "target-group-move-up-" + CurriculumEditor__TargetGroup.id(targetGroup),
              title: "Move Up",
              onClick: (function (param) {
                  return updateSortIndex(targetGroups, targetGroup, true, updateTargetGroupSortIndexCB);
                })
            }, React.createElement("i", {
                  className: "fas fa-arrow-up text-sm"
                })), React.createElement("div", {
              className: "target-group__group-reorder-down flex items-center justify-center cursor-pointer w-9 h-9 p-1 text-gray-400 hover:bg-gray-200" + (
                bool ? " invisible" : ""
              ),
              id: "target-group-move-down-" + CurriculumEditor__TargetGroup.id(targetGroup),
              title: "Move Down",
              onClick: (function (param) {
                  return updateSortIndex(targetGroups, targetGroup, false, updateTargetGroupSortIndexCB);
                })
            }, React.createElement("i", {
                  className: "fas fa-arrow-down text-sm"
                })));
  }
  return React.createElement("div", {
              className: "target-group__box relative mt-12 rounded-lg border border-b-0 border-gray-300 shadow-md"
            }, React.createElement("div", {
                  className: "w-full target-group__header-container rounded-lg rounded-b-none relative bg-white hover:bg-gray-100 hover:text-primary-500"
                }, React.createElement("div", {
                      className: archivedClasses(CurriculumEditor__TargetGroup.archived(targetGroup)),
                      id: "target_group",
                      onClick: (function (_event) {
                          return Curry._1(showTargetGroupEditorCB, targetGroup);
                        })
                    }, milestone ? React.createElement("div", {
                            className: "inline-block px-3 py-2 bg-orange-400 font-bold text-xs rounded-b-lg leading-tight text-white uppercase"
                          }, "Modules") : null, React.createElement("div", {
                          className: "target-group__title pt-6"
                        }, React.createElement("h4", undefined, CurriculumEditor__TargetGroup.name(targetGroup))), React.createElement("div", {
                          className: "target-group__description"
                        }, React.createElement("p", {
                              className: "pt-px text-sm"
                            }, match$1 !== undefined ? match$1 : ""))), tmp), $$Array.of_list(List.mapi((function (index, target) {
                        return React.createElement(CurriculumEditor__TargetShow.make, {
                                    target: target,
                                    targets: targetsToDisplay,
                                    updateTargetSortIndexCB: updateTargetSortIndexCB,
                                    index: index,
                                    course: course,
                                    key: CurriculumEditor__Target.id(target)
                                  });
                      }), targetsToDisplay)), targetGroupArchived ? null : React.createElement("div", {
                    className: "target-group__target-create relative bg-gray-100 flex items-center border border-dashed border-gray-400 text-gray-700 hover:text-gray-900 active:text-gray-900 focus:text-gray-900 hover:shadow-lg hover:border-gray-500 rounded-lg rounded-t-none overflow-hidden"
                  }, React.createElement("label", {
                        className: "absolute flex items-center h-full cursor-pointer pl-4",
                        htmlFor: "create-target-input" + CurriculumEditor__TargetGroup.id(targetGroup)
                      }, React.createElement("i", {
                            className: "fas fa-plus-circle text-2xl"
                          })), React.createElement("input", {
                        className: "target-create__input text-xs text-left bg-gray-100 pr-5 pl-12 py-6 rounded-b appearance-none block w-full text-sm text-gray-900 font-semibold leading-tight hover:bg-gray-100 focus:outline-none focus:bg-white focus:border-gray-500",
                        id: "create-target-input" + CurriculumEditor__TargetGroup.id(targetGroup),
                        title: "Create target",
                        placeholder: "Create a target",
                        value: state.targetTitle,
                        onChange: (function ($$event) {
                            return Curry._1(send, /* UpdateTargetTitle */[$$event.target.value]);
                          })
                      }), state.validTargetTitle ? React.createElement("button", {
                          className: "flex items-center whitespace-no-wrap text-sm font-semibold py-2 px-4 mr-4 rounded btn-primary appearance-none focus:outline-none text-center",
                          disabled: state.savingNewTarget,
                          onClick: (function (_e) {
                              var title = state.targetTitle;
                              var targetGroupId = CurriculumEditor__TargetGroup.id(targetGroup);
                              Curry._1(send, /* UpdateTargetSaving */0);
                              (function (eta) {
                                      return GraphqlQuery.sendQuery(undefined, eta);
                                    })(make(title, targetGroupId, /* () */0)).then((function (response) {
                                      var match = response.createTarget.target;
                                      if (match !== undefined) {
                                        handleResponseCB(Caml_option.valFromOption(match));
                                      }
                                      return Promise.resolve(/* () */0);
                                    }));
                              return /* () */0;
                            })
                        }, "Create") : null));
}

var make$1 = CurriculumEditor__TargetGroupShow;

exports.str = str;
exports.CreateTargetMutation = CreateTargetMutation;
exports.reducer = reducer;
exports.archivedClasses = archivedClasses;
exports.updateSortIndex = updateSortIndex;
exports.sortIndexHiddenClass = sortIndexHiddenClass;
exports.make = make$1;
/* react Not a pure module */
