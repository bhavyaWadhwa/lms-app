// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var OptionUtils = require("../../../../shared/utils/OptionUtils.bs.js");
var WindowUtils = require("../../../../shared/utils/WindowUtils.bs.js");
var ContentBlock = require("../../../../shared/types/ContentBlock.bs.js");
var GraphqlQuery = require("../../../../shared/utils/GraphqlQuery.bs.js");
var DisablingCover = require("../../../../shared/components/DisablingCover.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var TargetContentView = require("../../../../shared/components/TargetContentView.bs.js");
var CurriculumEditor__FileBlockEditor = require("./CurriculumEditor__FileBlockEditor.bs.js");
var CurriculumEditor__ImageBlockEditor = require("./CurriculumEditor__ImageBlockEditor.bs.js");
var CurriculumEditor__MarkdownBlockEditor = require("./CurriculumEditor__MarkdownBlockEditor.bs.js");

var InvalidBlockTypeForUpdate = Caml_exceptions.create("CurriculumEditor__ContentBlockEditor.InvalidBlockTypeForUpdate");

function str(prim) {
  return prim;
}

function computeInitialState(contentBlock) {
  return {
          dirty: false,
          saving: undefined,
          contentBlock: contentBlock
        };
}

function reducer(state, action) {
  if (typeof action === "number") {
    if (action === /* FinishSaving */0) {
      return {
              dirty: false,
              saving: undefined,
              contentBlock: state.contentBlock
            };
    } else {
      return {
              dirty: state.dirty,
              saving: undefined,
              contentBlock: state.contentBlock
            };
    }
  } else if (action.tag) {
    return {
            dirty: action[1],
            saving: state.saving,
            contentBlock: action[0]
          };
  } else {
    return {
            dirty: state.dirty,
            saving: action[0],
            contentBlock: state.contentBlock
          };
  }
}

var ppx_printed_query = "mutation DeleteContentBlockMutation($id: ID!)  {\ndeleteContentBlock(id: $id)  {\nsuccess  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "deleteContentBlock");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type DeleteContentBlockPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field deleteContentBlock on type Mutation is missing");
  }
  return {
          deleteContentBlock: tmp
        };
}

function make(id, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(id, param) {
  return Js_dict.fromArray([/* tuple */[
                  "id",
                  id
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, id, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "id",
                      id
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var DeleteContentBlockMutation = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var ppx_printed_query$1 = "mutation MoveContentBlockMutation($id: ID!, $direction: MoveDirection!)  {\nmoveContentBlock(id: $id, direction: $direction)  {\nsuccess  \n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "moveContentBlock");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type MoveContentBlockPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field moveContentBlock on type Mutation is missing");
  }
  return {
          moveContentBlock: tmp
        };
}

function json_of_MoveDirection(value) {
  if (value >= 759637122) {
    return "Down";
  } else {
    return "Up";
  }
}

function make$1(id, direction, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "direction",
                    json_of_MoveDirection(direction)
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var id = variables.id;
  var direction = variables.direction;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "direction",
                    json_of_MoveDirection(direction)
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeVariables$1(id, direction, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "direction",
                  json_of_MoveDirection(direction)
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$1(graphql_ppx_use_json_variables_fn, id, direction, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "id",
                      id
                    ],
                    /* tuple */[
                      "direction",
                      json_of_MoveDirection(direction)
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$1 = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002$1
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var MoveContentBlockMutation = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  json_of_MoveDirection: json_of_MoveDirection,
  make: make$1,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

var ppx_printed_query$2 = "mutation UpdateFileBlockMutation($id: ID!, $title: String!)  {\nupdateFileBlock(id: $id, title: $title)  {\ncontentBlock  {\n..." + ContentBlock.Fragments.AllFields.name + "   \n}\n\n}\n\n}\n" + ContentBlock.Fragments.AllFields.query;

function parse$2(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updateFileBlock");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "contentBlock");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      tmp$1 = match$2 !== undefined ? undefined : Caml_option.some(Curry._1(ContentBlock.Fragments.AllFields.parse, value$3));
    } else {
      tmp$1 = undefined;
    }
    tmp = {
      contentBlock: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field updateFileBlock on type Mutation is missing");
  }
  return {
          updateFileBlock: tmp
        };
}

function make$2(id, title, param) {
  return {
          query: ppx_printed_query$2,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "title",
                    title
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$2
        };
}

function makeWithVariables$2(variables) {
  var id = variables.id;
  var title = variables.title;
  return {
          query: ppx_printed_query$2,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "title",
                    title
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$2
        };
}

function makeVariables$2(id, title, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "title",
                  title
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$2(graphql_ppx_use_json_variables_fn, id, title, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "id",
                      id
                    ],
                    /* tuple */[
                      "title",
                      title
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$2 = /* tuple */[
  parse$2,
  ppx_printed_query$2,
  definition_002$2
];

function ret_type$2(f) {
  return { };
}

var MT_Ret$2 = { };

var UpdateFileBlockMutation = {
  ppx_printed_query: ppx_printed_query$2,
  query: ppx_printed_query$2,
  parse: parse$2,
  make: make$2,
  makeWithVariables: makeWithVariables$2,
  makeVariables: makeVariables$2,
  definition: definition$2,
  ret_type: ret_type$2,
  MT_Ret: MT_Ret$2
};

var ppx_printed_query$3 = "mutation UpdateMarkdownBlockMutation($id: ID!, $markdown: String!)  {\nupdateMarkdownBlock(id: $id, markdown: $markdown)  {\ncontentBlock  {\n..." + ContentBlock.Fragments.AllFields.name + "   \n}\n\n}\n\n}\n" + ContentBlock.Fragments.AllFields.query;

function parse$3(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updateMarkdownBlock");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "contentBlock");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      tmp$1 = match$2 !== undefined ? undefined : Caml_option.some(Curry._1(ContentBlock.Fragments.AllFields.parse, value$3));
    } else {
      tmp$1 = undefined;
    }
    tmp = {
      contentBlock: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field updateMarkdownBlock on type Mutation is missing");
  }
  return {
          updateMarkdownBlock: tmp
        };
}

function make$3(id, markdown, param) {
  return {
          query: ppx_printed_query$3,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "markdown",
                    markdown
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$3
        };
}

function makeWithVariables$3(variables) {
  var id = variables.id;
  var markdown = variables.markdown;
  return {
          query: ppx_printed_query$3,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "markdown",
                    markdown
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$3
        };
}

function makeVariables$3(id, markdown, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "markdown",
                  markdown
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$3(graphql_ppx_use_json_variables_fn, id, markdown, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "id",
                      id
                    ],
                    /* tuple */[
                      "markdown",
                      markdown
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$3 = /* tuple */[
  parse$3,
  ppx_printed_query$3,
  definition_002$3
];

function ret_type$3(f) {
  return { };
}

var MT_Ret$3 = { };

var UpdateMarkdownBlockMutation = {
  ppx_printed_query: ppx_printed_query$3,
  query: ppx_printed_query$3,
  parse: parse$3,
  make: make$3,
  makeWithVariables: makeWithVariables$3,
  makeVariables: makeVariables$3,
  definition: definition$3,
  ret_type: ret_type$3,
  MT_Ret: MT_Ret$3
};

var ppx_printed_query$4 = "mutation UpdateImageBlockMutation($id: ID!, $caption: String!)  {\nupdateImageBlock(id: $id, caption: $caption)  {\ncontentBlock  {\n..." + ContentBlock.Fragments.AllFields.name + "   \n}\n\n}\n\n}\n" + ContentBlock.Fragments.AllFields.query;

function parse$4(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updateImageBlock");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "contentBlock");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      tmp$1 = match$2 !== undefined ? undefined : Caml_option.some(Curry._1(ContentBlock.Fragments.AllFields.parse, value$3));
    } else {
      tmp$1 = undefined;
    }
    tmp = {
      contentBlock: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field updateImageBlock on type Mutation is missing");
  }
  return {
          updateImageBlock: tmp
        };
}

function make$4(id, caption, param) {
  return {
          query: ppx_printed_query$4,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "caption",
                    caption
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$4
        };
}

function makeWithVariables$4(variables) {
  var id = variables.id;
  var caption = variables.caption;
  return {
          query: ppx_printed_query$4,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "caption",
                    caption
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$4
        };
}

function makeVariables$4(id, caption, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "caption",
                  caption
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$4(graphql_ppx_use_json_variables_fn, id, caption, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "id",
                      id
                    ],
                    /* tuple */[
                      "caption",
                      caption
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$4 = /* tuple */[
  parse$4,
  ppx_printed_query$4,
  definition_002$4
];

function ret_type$4(f) {
  return { };
}

var MT_Ret$4 = { };

var UpdateImageBlockMutation = {
  ppx_printed_query: ppx_printed_query$4,
  query: ppx_printed_query$4,
  parse: parse$4,
  make: make$4,
  makeWithVariables: makeWithVariables$4,
  makeVariables: makeVariables$4,
  definition: definition$4,
  ret_type: ret_type$4,
  MT_Ret: MT_Ret$4
};

function controlIcon(icon, title, color, handler) {
  var buttonClasses = color >= 793051007 ? "hover:bg-gray-200" : "bg-green-600 hover:bg-green-700 text-white rounded-b";
  if (handler === undefined) {
    return null;
  } else {
    var tmp = {
      className: "p-2 focus:outline-none " + buttonClasses,
      title: title,
      disabled: handler === undefined
    };
    if (handler !== undefined) {
      tmp.onClick = Caml_option.valFromOption(handler);
    }
    return React.createElement("button", tmp, React.createElement("i", {
                    className: "fas fa-fw " + icon
                  }));
  }
}

function onMove(contentBlock, cb, direction, _event) {
  ((function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make$1(ContentBlock.id(contentBlock), direction, /* () */0)));
  return Curry._1(cb, contentBlock);
}

function onDelete(contentBlock, removeContentBlockCB, send, _event) {
  return WindowUtils.confirm(undefined, "Are you sure you want to delete this block?", (function (param) {
                Curry._1(send, /* StartSaving */Block.__(0, ["Deleting..."]));
                var id = ContentBlock.id(contentBlock);
                (function (eta) {
                          return GraphqlQuery.sendQuery(undefined, eta);
                        })(make(id, /* () */0)).then((function (result) {
                          if (result.deleteContentBlock.success) {
                            Curry._1(removeContentBlockCB, id);
                          } else {
                            Curry._1(send, /* FinishSaving */0);
                          }
                          return Promise.resolve(/* () */0);
                        })).catch((function (_error) {
                        Curry._1(send, /* FinishSaving */0);
                        return Promise.resolve(/* () */0);
                      }));
                return /* () */0;
              }));
}

function onUndo(originalContentBlock, setDirtyCB, send, $$event) {
  $$event.preventDefault();
  return WindowUtils.confirm(undefined, "Are you sure you want to undo your changes to this block?", (function (param) {
                Curry._1(setDirtyCB, false);
                return Curry._1(send, /* UpdateContentBlock */Block.__(1, [
                              originalContentBlock,
                              false
                            ]));
              }));
}

function handleUpdateResult(updateContentBlockCB, setDirtyCB, send, contentBlock) {
  if (contentBlock !== undefined) {
    Curry._1(updateContentBlockCB, ContentBlock.makeFromJs(Caml_option.valFromOption(contentBlock)));
    Curry._1(send, /* FinishSaving */0);
    Curry._1(setDirtyCB, false);
  } else {
    Curry._1(send, /* FailSaving */1);
  }
  return Promise.resolve(/* () */0);
}

function updateContentBlockBlock(mutation, contentBlockExtractor, updateContentBlockCB, setDirtyCB, send) {
  Curry._1(send, /* StartSaving */Block.__(0, ["Updating..."]));
  (function (eta) {
            return GraphqlQuery.sendQuery(undefined, eta);
          })(mutation).then((function (result) {
            return handleUpdateResult(updateContentBlockCB, setDirtyCB, send, Curry._1(contentBlockExtractor, result));
          })).catch((function (_error) {
          Curry._1(send, /* FinishSaving */0);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function onSave(contentBlock, updateContentBlockCB, setDirtyCB, send, $$event) {
  $$event.preventDefault();
  var id = ContentBlock.id(contentBlock);
  var match = ContentBlock.blockType(contentBlock);
  switch (match.tag | 0) {
    case /* Markdown */0 :
        var mutation = make$3(id, match[0], /* () */0);
        var extractor = function (result) {
          return result.updateMarkdownBlock.contentBlock;
        };
        return updateContentBlockBlock(mutation, extractor, updateContentBlockCB, setDirtyCB, send);
    case /* File */1 :
        var mutation$1 = make$2(id, match[1], /* () */0);
        var extractor$1 = function (result) {
          return result.updateFileBlock.contentBlock;
        };
        return updateContentBlockBlock(mutation$1, extractor$1, updateContentBlockCB, setDirtyCB, send);
    case /* Image */2 :
        var mutation$2 = make$4(id, match[1], /* () */0);
        var extractor$2 = function (result) {
          return result.updateImageBlock.contentBlock;
        };
        return updateContentBlockBlock(mutation$2, extractor$2, updateContentBlockCB, setDirtyCB, send);
    case /* Embed */3 :
        throw InvalidBlockTypeForUpdate;
    
  }
}

function updateContentBlockCB(originalContentBlock, setDirtyCB, state, send, newContentBlock) {
  var dirty = Caml_obj.caml_notequal(newContentBlock, originalContentBlock);
  if (state.dirty !== dirty) {
    Curry._1(setDirtyCB, dirty);
  }
  return Curry._1(send, /* UpdateContentBlock */Block.__(1, [
                newContentBlock,
                dirty
              ]));
}

function innerEditor(originalContentBlock, contentBlock, setDirtyCB, state, send) {
  var updateContentBlockCB$1 = function (param) {
    return updateContentBlockCB(originalContentBlock, setDirtyCB, state, send, param);
  };
  var match = ContentBlock.blockType(contentBlock);
  switch (match.tag | 0) {
    case /* Markdown */0 :
        return React.createElement(CurriculumEditor__MarkdownBlockEditor.make, {
                    markdown: match[0],
                    contentBlock: contentBlock,
                    updateContentBlockCB: updateContentBlockCB$1
                  });
    case /* File */1 :
        return React.createElement(CurriculumEditor__FileBlockEditor.make, {
                    url: match[0],
                    title: match[1],
                    filename: match[2],
                    contentBlock: contentBlock,
                    updateContentBlockCB: updateContentBlockCB$1
                  });
    case /* Image */2 :
        return React.createElement(CurriculumEditor__ImageBlockEditor.make, {
                    url: match[0],
                    caption: match[1],
                    contentBlock: contentBlock,
                    updateContentBlockCB: updateContentBlockCB$1
                  });
    case /* Embed */3 :
        return TargetContentView.embedContentBlock("", match[1]);
    
  }
}

function CurriculumEditor__ContentBlockEditor(Props) {
  var contentBlock = Props.contentBlock;
  var setDirtyCB = Props.setDirtyCB;
  var removeContentBlockCB = Props.removeContentBlockCB;
  var moveContentBlockUpCB = Props.moveContentBlockUpCB;
  var moveContentBlockDownCB = Props.moveContentBlockDownCB;
  var updateContentBlockCB = Props.updateContentBlockCB;
  var match = React.useReducer(reducer, contentBlock, computeInitialState);
  var send = match[1];
  var state = match[0];
  var tmp = {
    disabled: state.saving !== undefined,
    children: React.createElement("div", {
          "aria-label": "Editor for content block " + ContentBlock.id(contentBlock),
          className: "flex items-start"
        }, React.createElement("div", {
              className: "flex-grow self-stretch min-w-0"
            }, innerEditor(contentBlock, state.contentBlock, setDirtyCB, state, send)), React.createElement("div", {
              className: "pl-2 flex-shrink-0 border-transparent bg-gray-100 border rounded flex flex-col text-xs -mr-10 sticky top-0"
            }, controlIcon("fa-arrow-up", "Move Up", /* Grey */793051007, OptionUtils.map((function (cb) {
                        return (function (param) {
                            return onMove(contentBlock, cb, /* Up */19067, param);
                          });
                      }), moveContentBlockUpCB)), controlIcon("fa-arrow-down", "Move Down", /* Grey */793051007, OptionUtils.map((function (cb) {
                        return (function (param) {
                            return onMove(contentBlock, cb, /* Down */759637122, param);
                          });
                      }), moveContentBlockDownCB)), controlIcon("fa-trash-alt", "Delete", /* Grey */793051007, OptionUtils.map((function (cb) {
                        return (function (param) {
                            return onDelete(contentBlock, cb, send, param);
                          });
                      }), removeContentBlockCB)), controlIcon("fa-undo-alt", "Undo Changes", /* Grey */793051007, OptionUtils.map((function (_cb) {
                        return (function (param) {
                            return onUndo(contentBlock, setDirtyCB, send, param);
                          });
                      }), updateContentBlockCB)), controlIcon("fa-check", "Save Changes", /* Green */756711075, OptionUtils.map((function (cb) {
                        var partial_arg = state.contentBlock;
                        return (function (param) {
                            return onSave(partial_arg, cb, setDirtyCB, send, param);
                          });
                      }), updateContentBlockCB))))
  };
  if (state.saving !== undefined) {
    tmp.message = Caml_option.valFromOption(state.saving);
  }
  return React.createElement(DisablingCover.make, tmp);
}

var make$5 = CurriculumEditor__ContentBlockEditor;

exports.InvalidBlockTypeForUpdate = InvalidBlockTypeForUpdate;
exports.str = str;
exports.computeInitialState = computeInitialState;
exports.reducer = reducer;
exports.DeleteContentBlockMutation = DeleteContentBlockMutation;
exports.MoveContentBlockMutation = MoveContentBlockMutation;
exports.UpdateFileBlockMutation = UpdateFileBlockMutation;
exports.UpdateMarkdownBlockMutation = UpdateMarkdownBlockMutation;
exports.UpdateImageBlockMutation = UpdateImageBlockMutation;
exports.controlIcon = controlIcon;
exports.onMove = onMove;
exports.onDelete = onDelete;
exports.onUndo = onUndo;
exports.handleUpdateResult = handleUpdateResult;
exports.updateContentBlockBlock = updateContentBlockBlock;
exports.onSave = onSave;
exports.updateContentBlockCB = updateContentBlockCB;
exports.innerEditor = innerEditor;
exports.make = make$5;
/* react Not a pure module */
