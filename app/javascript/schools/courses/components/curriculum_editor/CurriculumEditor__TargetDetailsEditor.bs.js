// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Icon = require("../../../../shared/Icon.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var PfIcon = require("../../../../packages/pf-icon/src/PfIcon.bs.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var HelpIcon = require("../../../../shared/components/HelpIcon.bs.js");
var UrlUtils = require("../../../../shared/utils/UrlUtils.bs.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ListUtils = require("../../../../shared/utils/ListUtils.bs.js");
var ArrayUtils = require("../../../../shared/utils/ArrayUtils.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../../shared/utils/GraphqlQuery.bs.js");
var DisablingCover = require("../../../../shared/components/DisablingCover.bs.js");
var SkeletonLoading = require("../../../../shared/components/SkeletonLoading.bs.js");
var MultiselectInline = require("../../../../packages/multiselect-inline/src/components/MultiselectInline.bs.js");
var TargetChecklistItem = require("../../types/curriculum_editor/TargetChecklistItem.bs.js");
var School__InputGroupError = require("../../../shared/components/School__InputGroupError.bs.js");
var CurriculumEditor__Target = require("../../types/curriculum_editor/CurriculumEditor__Target.bs.js");
var CurriculumEditor__TargetGroup = require("../../types/curriculum_editor/CurriculumEditor__TargetGroup.bs.js");
var CurriculumEditor__QuizQuestion = require("../../types/curriculum_editor/CurriculumEditor__QuizQuestion.bs.js");
var CurriculumEditor__TargetDetails = require("../../types/curriculum_editor/CurriculumEditor__TargetDetails.bs.js");
var CurriculumEditor__EvaluationCriteria = require("../../types/curriculum_editor/CurriculumEditor__EvaluationCriteria.bs.js");
var CurriculumEditor__TargetQuizQuestion = require("./CurriculumEditor__TargetQuizQuestion.bs.js");
var TargetCompleteLinkIconSvg = require("./images/target-complete-link-icon.svg");
var TargetCompleteMarkIconSvg = require("./images/target-complete-mark-icon.svg");
var TargetCompleteQuizIconSvg = require("./images/target-complete-quiz-icon.svg");
var CurriculumEditor__TargetChecklistItemEditor = require("./CurriculumEditor__TargetChecklistItemEditor.bs.js");

var markIcon = TargetCompleteMarkIconSvg.default;

var linkIcon = TargetCompleteLinkIconSvg.default;

var quizIcon = TargetCompleteQuizIconSvg.default;

function str(prim) {
  return prim;
}

var ppx_printed_query = "query TargetDetailsQuery($targetId: ID!)  {\ntargetDetails(targetId: $targetId)  {\ntitle  \ntargetGroupId  \nevaluationCriteria  \nprerequisiteTargets  \nquiz  {\nid  \nquestion  \nanswerOptions  {\nid  \nanswer  \nhint  \ncorrectAnswer  \n}\n\n}\n\ncompletionInstructions  \nvisibility  \nlinkToComplete  \nrole  \nchecklist  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "targetDetails");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "title");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeString(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field title on type TargetDetails is missing");
    }
    var match$3 = Js_dict.get(value$2, "targetGroupId");
    var tmp$2;
    if (match$3 !== undefined) {
      var value$4 = Caml_option.valFromOption(match$3);
      var match$4 = Js_json.decodeString(value$4);
      tmp$2 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
    } else {
      tmp$2 = Js_exn.raiseError("graphql_ppx: Field targetGroupId on type TargetDetails is missing");
    }
    var match$5 = Js_dict.get(value$2, "evaluationCriteria");
    var match$6 = Js_dict.get(value$2, "prerequisiteTargets");
    var match$7 = Js_dict.get(value$2, "quiz");
    var match$8 = Js_dict.get(value$2, "completionInstructions");
    var tmp$3;
    if (match$8 !== undefined) {
      var value$5 = Caml_option.valFromOption(match$8);
      var match$9 = Js_json.decodeNull(value$5);
      if (match$9 !== undefined) {
        tmp$3 = undefined;
      } else {
        var match$10 = Js_json.decodeString(value$5);
        tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
      }
    } else {
      tmp$3 = undefined;
    }
    var match$11 = Js_dict.get(value$2, "visibility");
    var tmp$4;
    if (match$11 !== undefined) {
      var value$6 = Caml_option.valFromOption(match$11);
      var match$12 = Js_json.decodeString(value$6);
      tmp$4 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
    } else {
      tmp$4 = Js_exn.raiseError("graphql_ppx: Field visibility on type TargetDetails is missing");
    }
    var match$13 = Js_dict.get(value$2, "linkToComplete");
    var tmp$5;
    if (match$13 !== undefined) {
      var value$7 = Caml_option.valFromOption(match$13);
      var match$14 = Js_json.decodeNull(value$7);
      if (match$14 !== undefined) {
        tmp$5 = undefined;
      } else {
        var match$15 = Js_json.decodeString(value$7);
        tmp$5 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
      }
    } else {
      tmp$5 = undefined;
    }
    var match$16 = Js_dict.get(value$2, "role");
    var tmp$6;
    if (match$16 !== undefined) {
      var value$8 = Caml_option.valFromOption(match$16);
      var match$17 = Js_json.decodeString(value$8);
      tmp$6 = match$17 !== undefined ? match$17 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
    } else {
      tmp$6 = Js_exn.raiseError("graphql_ppx: Field role on type TargetDetails is missing");
    }
    var match$18 = Js_dict.get(value$2, "checklist");
    tmp = {
      title: tmp$1,
      targetGroupId: tmp$2,
      evaluationCriteria: match$5 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$5))).map((function (value) {
                var match = Js_json.decodeString(value);
                if (match !== undefined) {
                  return match;
                } else {
                  return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                }
              })) : Js_exn.raiseError("graphql_ppx: Field evaluationCriteria on type TargetDetails is missing"),
      prerequisiteTargets: match$6 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$6))).map((function (value) {
                var match = Js_json.decodeString(value);
                if (match !== undefined) {
                  return match;
                } else {
                  return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                }
              })) : Js_exn.raiseError("graphql_ppx: Field prerequisiteTargets on type TargetDetails is missing"),
      quiz: match$7 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$7))).map((function (value) {
                var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                var match = Js_dict.get(value$1, "id");
                var tmp;
                if (match !== undefined) {
                  var value$2 = Caml_option.valFromOption(match);
                  var match$1 = Js_json.decodeString(value$2);
                  tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                } else {
                  tmp = Js_exn.raiseError("graphql_ppx: Field id on type TargetQuiz is missing");
                }
                var match$2 = Js_dict.get(value$1, "question");
                var tmp$1;
                if (match$2 !== undefined) {
                  var value$3 = Caml_option.valFromOption(match$2);
                  var match$3 = Js_json.decodeString(value$3);
                  tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                } else {
                  tmp$1 = Js_exn.raiseError("graphql_ppx: Field question on type TargetQuiz is missing");
                }
                var match$4 = Js_dict.get(value$1, "answerOptions");
                return {
                        id: tmp,
                        question: tmp$1,
                        answerOptions: match$4 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$4))).map((function (value) {
                                  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                                  var match = Js_dict.get(value$1, "id");
                                  var tmp;
                                  if (match !== undefined) {
                                    var value$2 = Caml_option.valFromOption(match);
                                    var match$1 = Js_json.decodeString(value$2);
                                    tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                                  } else {
                                    tmp = Js_exn.raiseError("graphql_ppx: Field id on type TargetQuizAnswer is missing");
                                  }
                                  var match$2 = Js_dict.get(value$1, "answer");
                                  var tmp$1;
                                  if (match$2 !== undefined) {
                                    var value$3 = Caml_option.valFromOption(match$2);
                                    var match$3 = Js_json.decodeString(value$3);
                                    tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                                  } else {
                                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field answer on type TargetQuizAnswer is missing");
                                  }
                                  var match$4 = Js_dict.get(value$1, "hint");
                                  var tmp$2;
                                  if (match$4 !== undefined) {
                                    var value$4 = Caml_option.valFromOption(match$4);
                                    var match$5 = Js_json.decodeNull(value$4);
                                    if (match$5 !== undefined) {
                                      tmp$2 = undefined;
                                    } else {
                                      var match$6 = Js_json.decodeString(value$4);
                                      tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                                    }
                                  } else {
                                    tmp$2 = undefined;
                                  }
                                  var match$7 = Js_dict.get(value$1, "correctAnswer");
                                  var tmp$3;
                                  if (match$7 !== undefined) {
                                    var value$5 = Caml_option.valFromOption(match$7);
                                    var match$8 = Js_json.decodeBoolean(value$5);
                                    tmp$3 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$5));
                                  } else {
                                    tmp$3 = Js_exn.raiseError("graphql_ppx: Field correctAnswer on type TargetQuizAnswer is missing");
                                  }
                                  return {
                                          id: tmp,
                                          answer: tmp$1,
                                          hint: tmp$2,
                                          correctAnswer: tmp$3
                                        };
                                })) : Js_exn.raiseError("graphql_ppx: Field answerOptions on type TargetQuiz is missing")
                      };
              })) : Js_exn.raiseError("graphql_ppx: Field quiz on type TargetDetails is missing"),
      completionInstructions: tmp$3,
      visibility: tmp$4,
      linkToComplete: tmp$5,
      role: tmp$6,
      checklist: match$18 !== undefined ? Caml_option.valFromOption(match$18) : Js_exn.raiseError("graphql_ppx: Field checklist on type TargetDetails is missing")
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field targetDetails on type Query is missing");
  }
  return {
          targetDetails: tmp
        };
}

function make(targetId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "targetId",
                    targetId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var targetId = variables.targetId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "targetId",
                    targetId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(targetId, param) {
  return Js_dict.fromArray([/* tuple */[
                  "targetId",
                  targetId
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, targetId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "targetId",
                      targetId
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var TargetDetailsQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function loadTargetDetails(targetId, send) {
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make(targetId, /* () */0)).then((function (result) {
          var targetDetails = CurriculumEditor__TargetDetails.makeFromJs(result.targetDetails);
          Curry._1(send, /* SaveTargetDetails */Block.__(0, [targetDetails]));
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

var defaultChecklist = [TargetChecklistItem.make("Describe your submission", /* LongText */3, false)];

function computeMethodOfCompletion(targetDetails) {
  var hasQuiz = ArrayUtils.isNotEmpty(CurriculumEditor__TargetDetails.quiz(targetDetails));
  var hasEvaluationCriteria = ArrayUtils.isNotEmpty(targetDetails.evaluationCriteria);
  var match = targetDetails.linkToComplete;
  var hasLinkToComplete = match !== undefined;
  if (hasEvaluationCriteria) {
    return /* Evaluated */0;
  } else if (hasQuiz) {
    return /* TakeQuiz */2;
  } else if (hasLinkToComplete) {
    return /* VisitLink */1;
  } else {
    return /* MarkAsComplete */3;
  }
}

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* AddQuizQuestion */0 :
          var quiz = $$Array.append(state.quiz, [CurriculumEditor__QuizQuestion.empty(Date.now().toString())]);
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: state.checklist,
                  completionInstructions: state.completionInstructions
                };
      case /* AddNewChecklistItem */1 :
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: $$Array.append(state.checklist, [TargetChecklistItem.longText]),
                  completionInstructions: state.completionInstructions
                };
      case /* UpdateSaving */2 :
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: state.dirty,
                  saving: !state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: state.checklist,
                  completionInstructions: state.completionInstructions
                };
      case /* ResetEditor */3 :
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: false,
                  saving: false,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: state.checklist,
                  completionInstructions: state.completionInstructions
                };
      
    }
  } else {
    switch (action.tag | 0) {
      case /* SaveTargetDetails */0 :
          var targetDetails = action[0];
          var methodOfCompletion = computeMethodOfCompletion(targetDetails);
          var checklist = ArrayUtils.isNotEmpty(targetDetails.checklist) ? targetDetails.checklist : defaultChecklist;
          var quiz$1 = ArrayUtils.isNotEmpty(targetDetails.quiz) ? targetDetails.quiz : [CurriculumEditor__QuizQuestion.empty("0")];
          var match = targetDetails.linkToComplete;
          var match$1 = targetDetails.completionInstructions;
          return {
                  title: targetDetails.title,
                  targetGroupId: targetDetails.targetGroupId,
                  role: targetDetails.role,
                  evaluationCriteria: targetDetails.evaluationCriteria,
                  prerequisiteTargets: targetDetails.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: methodOfCompletion,
                  quiz: quiz$1,
                  linkToComplete: match !== undefined ? match : "",
                  dirty: state.dirty,
                  saving: state.saving,
                  loading: false,
                  visibility: targetDetails.visibility,
                  checklist: checklist,
                  completionInstructions: match$1 !== undefined ? match$1 : ""
                };
      case /* UpdateTitle */1 :
          return {
                  title: action[0],
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: state.checklist,
                  completionInstructions: state.completionInstructions
                };
      case /* UpdatePrerequisiteTargets */2 :
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: action[0],
                  prerequisiteSearchInput: "",
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: state.checklist,
                  completionInstructions: state.completionInstructions
                };
      case /* UpdateMethodOfCompletion */3 :
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: action[0],
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: state.checklist,
                  completionInstructions: state.completionInstructions
                };
      case /* UpdateEvaluationCriteria */4 :
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: action[0],
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: "",
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: state.checklist,
                  completionInstructions: state.completionInstructions
                };
      case /* UpdatePrerequisiteSearchInput */5 :
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: action[0],
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: state.dirty,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: state.checklist,
                  completionInstructions: state.completionInstructions
                };
      case /* UpdateEvaluationCriteriaSearchInput */6 :
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: action[0],
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: state.dirty,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: state.checklist,
                  completionInstructions: state.completionInstructions
                };
      case /* UpdateLinkToComplete */7 :
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: action[0],
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: state.checklist,
                  completionInstructions: state.completionInstructions
                };
      case /* UpdateCompletionInstructions */8 :
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: state.checklist,
                  completionInstructions: action[0]
                };
      case /* UpdateTargetRole */9 :
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: action[0],
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: state.checklist,
                  completionInstructions: state.completionInstructions
                };
      case /* UpdateQuizQuestion */10 :
          var quizQuestion = action[1];
          var id = action[0];
          var quiz$2 = $$Array.map((function (q) {
                  if (CurriculumEditor__QuizQuestion.id(q) === id) {
                    return quizQuestion;
                  } else {
                    return q;
                  }
                }), state.quiz);
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: quiz$2,
                  linkToComplete: state.linkToComplete,
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: state.checklist,
                  completionInstructions: state.completionInstructions
                };
      case /* RemoveQuizQuestion */11 :
          var id$1 = action[0];
          var quiz$3 = state.quiz.filter((function (q) {
                  return CurriculumEditor__QuizQuestion.id(q) !== id$1;
                }));
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: quiz$3,
                  linkToComplete: state.linkToComplete,
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: state.checklist,
                  completionInstructions: state.completionInstructions
                };
      case /* UpdateVisibility */12 :
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: action[0],
                  checklist: state.checklist,
                  completionInstructions: state.completionInstructions
                };
      case /* UpdateChecklistItem */13 :
          var newItem = action[1];
          var indexToChange = action[0];
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: $$Array.mapi((function (index, checklistItem) {
                          if (index === indexToChange) {
                            return newItem;
                          } else {
                            return checklistItem;
                          }
                        }), state.checklist),
                  completionInstructions: state.completionInstructions
                };
      case /* RemoveChecklistItem */14 :
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: TargetChecklistItem.removeItem(action[0], state.checklist),
                  completionInstructions: state.completionInstructions
                };
      case /* MoveChecklistItemUp */15 :
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: TargetChecklistItem.moveUp(action[0], state.checklist),
                  completionInstructions: state.completionInstructions
                };
      case /* MoveChecklistItemDown */16 :
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: TargetChecklistItem.moveDown(action[0], state.checklist),
                  completionInstructions: state.completionInstructions
                };
      case /* CopyChecklistItem */17 :
          return {
                  title: state.title,
                  targetGroupId: state.targetGroupId,
                  role: state.role,
                  evaluationCriteria: state.evaluationCriteria,
                  prerequisiteTargets: state.prerequisiteTargets,
                  prerequisiteSearchInput: state.prerequisiteSearchInput,
                  evaluationCriteriaSearchInput: state.evaluationCriteriaSearchInput,
                  methodOfCompletion: state.methodOfCompletion,
                  quiz: state.quiz,
                  linkToComplete: state.linkToComplete,
                  dirty: true,
                  saving: state.saving,
                  loading: state.loading,
                  visibility: state.visibility,
                  checklist: TargetChecklistItem.copy(action[0], state.checklist),
                  completionInstructions: state.completionInstructions
                };
      
    }
  }
}

function updateTitle(send, $$event) {
  var title = $$event.target.value;
  return Curry._1(send, /* UpdateTitle */Block.__(1, [title]));
}

function eligiblePrerequisiteTargets(targetId, targets, targetGroups) {
  var targetGroupId = CurriculumEditor__Target.targetGroupId(ListUtils.unsafeFind((function (target) {
              return targetId === CurriculumEditor__Target.id(target);
            }), "Unable to find target with ID: " + targetId, targets));
  var targetGroup = ArrayUtils.unsafeFind((function (tg) {
          return CurriculumEditor__TargetGroup.id(tg) === targetGroupId;
        }), "Cannot find target group with ID: " + targetGroupId, $$Array.of_list(targetGroups));
  var levelId = CurriculumEditor__TargetGroup.levelId(targetGroup);
  var targetGroupsInSameLevel = List.map(CurriculumEditor__TargetGroup.id, List.filter((function (tg) {
                return CurriculumEditor__TargetGroup.levelId(tg) === levelId;
              }))(targetGroups));
  return $$Array.of_list(List.filter((function (target) {
                      return CurriculumEditor__Target.id(target) !== targetId;
                    }))(List.filter((function (target) {
                          return List.mem(CurriculumEditor__Target.targetGroupId(target), targetGroupsInSameLevel);
                        }))(List.filter((function (target) {
                              return !CurriculumEditor__Target.archived(target);
                            }))(targets))));
}

function setPrerequisiteSearch(send, value) {
  return Curry._1(send, /* UpdatePrerequisiteSearchInput */Block.__(5, [value]));
}

function selectPrerequisiteTarget(send, state, target) {
  var updatedPrerequisites = state.prerequisiteTargets.concat([CurriculumEditor__Target.id(target)]);
  return Curry._1(send, /* UpdatePrerequisiteTargets */Block.__(2, [updatedPrerequisites]));
}

function deSelectPrerequisiteTarget(send, state, target) {
  var updatedPrerequisites = state.prerequisiteTargets.filter((function (targetId) {
          return targetId !== CurriculumEditor__Target.id(target);
        }));
  return Curry._1(send, /* UpdatePrerequisiteTargets */Block.__(2, [updatedPrerequisites]));
}

var value = CurriculumEditor__Target.title;

var SelectablePrerequisiteTargets = {
  value: value,
  searchString: value
};

var MultiSelectForPrerequisiteTargets = MultiselectInline.Make(SelectablePrerequisiteTargets);

function prerequisiteTargetEditor(send, eligiblePrerequisiteTargets, state) {
  var selected = eligiblePrerequisiteTargets.filter((function (target) {
          return $$Array.mem(CurriculumEditor__Target.id(target), state.prerequisiteTargets);
        }));
  var unselected = eligiblePrerequisiteTargets.filter((function (target) {
          return !$$Array.mem(CurriculumEditor__Target.id(target), state.prerequisiteTargets);
        }));
  if (ArrayUtils.isNotEmpty(eligiblePrerequisiteTargets)) {
    return React.createElement("div", {
                className: "mb-6"
              }, React.createElement("label", {
                    className: "block tracking-wide text-sm font-semibold mb-2",
                    htmlFor: "prerequisite_targets"
                  }, React.createElement("span", {
                        className: "mr-2"
                      }, React.createElement("i", {
                            className: "fas fa-list text-base"
                          })), "Are there any prerequisite targets?"), React.createElement("div", {
                    className: "mb-6 ml-6",
                    id: "prerequisite_targets"
                  }, React.createElement(MultiSelectForPrerequisiteTargets.make, {
                        placeholder: "Search targets",
                        onChange: (function (param) {
                            return Curry._1(send, /* UpdatePrerequisiteSearchInput */Block.__(5, [param]));
                          }),
                        value: state.prerequisiteSearchInput,
                        unselected: unselected,
                        selected: selected,
                        onSelect: (function (param) {
                            return selectPrerequisiteTarget(send, state, param);
                          }),
                        onDeselect: (function (param) {
                            return deSelectPrerequisiteTarget(send, state, param);
                          }),
                        emptySelectionMessage: "No targets selected",
                        allItemsSelectedMessage: "You have selected all targets!"
                      })));
  } else {
    return null;
  }
}

function booleanButtonClasses(bool) {
  return "toggle-button__button" + (
          bool ? " toggle-button__button--active" : ""
        );
}

function targetRoleClasses(selected) {
  return "w-1/2 target-editor__completion-button relative flex border text-sm font-semibold focus:outline-none rounded px-5 py-4 md:px-8 md:py-5 items-center cursor-pointer text-left " + (
          selected ? "target-editor__completion-button--selected bg-gray-200 text-primary-500 border-primary-500" : "border-gray-400 hover:bg-gray-200 bg-white"
        );
}

function targetEvaluated(methodOfCompletion) {
  return methodOfCompletion === 0;
}

function validNumberOfEvaluationCriteria(state) {
  return ArrayUtils.isNotEmpty(state.evaluationCriteria);
}

function setEvaluationCriteriaSearch(send, value) {
  return Curry._1(send, /* UpdateEvaluationCriteriaSearchInput */Block.__(6, [value]));
}

function selectEvaluationCriterion(send, state, evaluationCriterion) {
  var updatedEvaluationCriteria = state.evaluationCriteria.concat([CurriculumEditor__EvaluationCriteria.id(evaluationCriterion)]);
  return Curry._1(send, /* UpdateEvaluationCriteria */Block.__(4, [updatedEvaluationCriteria]));
}

function deSelectEvaluationCriterion(send, state, evaluationCriterion) {
  var updatedEvaluationCriteria = state.evaluationCriteria.filter((function (ecId) {
          return ecId !== CurriculumEditor__EvaluationCriteria.id(evaluationCriterion);
        }));
  return Curry._1(send, /* UpdateEvaluationCriteria */Block.__(4, [updatedEvaluationCriteria]));
}

var value$1 = CurriculumEditor__EvaluationCriteria.name;

function make$1(evaluationCriterion) {
  return evaluationCriterion;
}

var SelectableEvaluationCriteria = {
  value: value$1,
  searchString: value$1,
  make: make$1
};

var MultiSelectForEvaluationCriteria = MultiselectInline.Make(SelectableEvaluationCriteria);

function evaluationCriteriaEditor(state, evaluationCriteria, send) {
  var selected = $$Array.map((function (ec) {
          return ec;
        }), evaluationCriteria.filter((function (ec) {
              return $$Array.mem(CurriculumEditor__EvaluationCriteria.id(ec), state.evaluationCriteria);
            })));
  var unselected = $$Array.map((function (ec) {
          return ec;
        }), evaluationCriteria.filter((function (ec) {
              return !$$Array.mem(CurriculumEditor__EvaluationCriteria.id(ec), state.evaluationCriteria);
            })));
  return React.createElement("div", {
              className: "mb-6",
              id: "evaluation_criteria"
            }, React.createElement("label", {
                  className: "block tracking-wide text-sm font-semibold mr-6 mb-2",
                  htmlFor: "evaluation_criteria"
                }, React.createElement("span", {
                      className: "mr-2"
                    }, React.createElement("i", {
                          className: "fas fa-list text-base"
                        })), "Choose evaluation criteria from your list"), React.createElement("div", {
                  className: "ml-6"
                }, ArrayUtils.isNotEmpty(state.evaluationCriteria) ? null : React.createElement("div", {
                        className: "drawer-right-form__error-msg mb-2"
                      }, "Atleast one has to be selected"), React.createElement(MultiSelectForEvaluationCriteria.make, {
                      placeholder: "Search evaluation criteria",
                      onChange: (function (param) {
                          return Curry._1(send, /* UpdateEvaluationCriteriaSearchInput */Block.__(6, [param]));
                        }),
                      value: state.evaluationCriteriaSearchInput,
                      unselected: unselected,
                      selected: selected,
                      onSelect: (function (param) {
                          return selectEvaluationCriterion(send, state, param);
                        }),
                      onDeselect: (function (param) {
                          return deSelectEvaluationCriterion(send, state, param);
                        }),
                      emptySelectionMessage: "No criteria selected",
                      allItemsSelectedMessage: "You have selected all evaluation criteria!"
                    })));
}

function updateLinkToComplete(send, $$event) {
  return Curry._1(send, /* UpdateLinkToComplete */Block.__(7, [$$event.target.value]));
}

function updateCompletionInstructions(send, $$event) {
  return Curry._1(send, /* UpdateCompletionInstructions */Block.__(8, [$$event.target.value]));
}

function updateMethodOfCompletion(methodOfCompletion, send, $$event) {
  $$event.preventDefault();
  return Curry._1(send, /* UpdateMethodOfCompletion */Block.__(3, [methodOfCompletion]));
}

function updateTargetRole(role, send, $$event) {
  $$event.preventDefault();
  return Curry._1(send, /* UpdateTargetRole */Block.__(9, [role]));
}

function updateVisibility(visibility, send, $$event) {
  $$event.preventDefault();
  return Curry._1(send, /* UpdateVisibility */Block.__(12, [visibility]));
}

function linkEditor(state, send) {
  return React.createElement("div", {
              className: "mb-6"
            }, React.createElement("label", {
                  className: "inline-block tracking-wide text-sm font-semibold",
                  htmlFor: "link_to_complete"
                }, React.createElement("span", {
                      className: "mr-2"
                    }, React.createElement("i", {
                          className: "fas fa-list text-base"
                        })), "Link to complete"), React.createElement("div", {
                  className: "ml-6"
                }, React.createElement("input", {
                      className: "appearance-none block text-sm w-full bg-white border border-gray-400 rounded px-4 py-2 my-2 leading-relaxed focus:outline-none focus:bg-white focus:border-gray-500",
                      id: "link_to_complete",
                      placeholder: "Paste link to complete",
                      type: "text",
                      value: state.linkToComplete,
                      onChange: (function (param) {
                          return updateLinkToComplete(send, param);
                        })
                    }), UrlUtils.isInvalid(false, state.linkToComplete) ? React.createElement(School__InputGroupError.make, {
                        message: "Enter a valid link",
                        active: true
                      }) : null));
}

function methodOfCompletionButtonClasses(value) {
  if (value) {
    return "target-editor__completion-button relative flex flex-col items-center bg-white border border-gray-400 hover:bg-gray-200 text-sm font-semibold focus:outline-none rounded p-4 target-editor__completion-button--selected bg-gray-200 text-primary-500 border-primary-500";
  } else {
    return "target-editor__completion-button relative flex flex-col items-center bg-white border border-gray-400 hover:bg-gray-200 text-sm font-semibold focus:outline-none rounded p-4 opacity-75 text-gray-900";
  }
}

function methodOfCompletionSelection(polyMethodOfCompletion) {
  if (polyMethodOfCompletion !== 253468248) {
    if (polyMethodOfCompletion >= 733679580) {
      return /* TakeQuiz */2;
    } else {
      return /* VisitLink */1;
    }
  } else {
    return /* MarkAsComplete */3;
  }
}

function methodOfCompletionButton(methodOfCompletion, state, send, index) {
  var buttonString = methodOfCompletion !== 253468248 ? (
      methodOfCompletion >= 733679580 ? "Take a quiz to complete the target." : "Visit a link to complete the target."
    ) : "Simply mark the target as completed.";
  var match = state.methodOfCompletion;
  var selected;
  switch (match) {
    case /* Evaluated */0 :
        selected = false;
        break;
    case /* VisitLink */1 :
        selected = methodOfCompletion === -110174395;
        break;
    case /* TakeQuiz */2 :
        selected = methodOfCompletion === 733679580;
        break;
    case /* MarkAsComplete */3 :
        selected = methodOfCompletion === 253468248;
        break;
    
  }
  var icon = methodOfCompletion !== 253468248 ? (
      methodOfCompletion >= 733679580 ? quizIcon : linkIcon
    ) : markIcon;
  var partial_arg = methodOfCompletionSelection(methodOfCompletion);
  return React.createElement("div", {
              key: String(index),
              className: "w-1/3 px-2"
            }, React.createElement("button", {
                  className: methodOfCompletionButtonClasses(selected),
                  onClick: (function (param) {
                      return updateMethodOfCompletion(partial_arg, send, param);
                    })
                }, React.createElement("div", {
                      className: "mb-1"
                    }, React.createElement("img", {
                          className: "w-12 h-12",
                          src: icon
                        })), buttonString));
}

function methodOfCompletionSelector(state, send) {
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "mb-6"
                }, React.createElement("label", {
                      className: "block tracking-wide text-sm font-semibold mr-6 mb-3",
                      htmlFor: "method_of_completion"
                    }, React.createElement("span", {
                          className: "mr-2"
                        }, React.createElement("i", {
                              className: "fas fa-list text-base"
                            })), "How do you want the user to complete the target?"), React.createElement("div", {
                      className: "flex -mx-2 pl-6",
                      id: "method_of_completion"
                    }, $$Array.mapi((function (index, methodOfCompletion) {
                            return methodOfCompletionButton(methodOfCompletion, state, send, index);
                          }), [
                          /* MarkAsComplete */253468248,
                          /* VisitLink */-110174395,
                          /* TakeQuiz */733679580
                        ]))));
}

function isValidQuiz(quiz) {
  return ArrayUtils.isEmpty(quiz.filter((function (quizQuestion) {
                    return CurriculumEditor__QuizQuestion.isValidQuizQuestion(quizQuestion) !== true;
                  })));
}

function isValidChecklist(checklist) {
  return ArrayUtils.isEmpty(checklist.filter((function (checklistItem) {
                    return TargetChecklistItem.isValidChecklistItem(checklistItem) !== true;
                  })));
}

function addQuizQuestion(send, $$event) {
  $$event.preventDefault();
  return Curry._1(send, /* AddQuizQuestion */0);
}

function updateQuizQuestionCB(send, id, quizQuestion) {
  return Curry._1(send, /* UpdateQuizQuestion */Block.__(10, [
                id,
                quizQuestion
              ]));
}

function removeQuizQuestionCB(send, id) {
  return Curry._1(send, /* RemoveQuizQuestion */Block.__(11, [id]));
}

function questionCanBeRemoved(state) {
  return state.quiz.length > 1;
}

function quizEditor(state, send) {
  return React.createElement("div", undefined, React.createElement("label", {
                  className: "block tracking-wide text-sm font-semibold mr-6 mb-3",
                  htmlFor: "Quiz question 1"
                }, React.createElement("span", {
                      className: "mr-2"
                    }, React.createElement("i", {
                          className: "fas fa-list text-base"
                        })), "Prepare the quiz now."), React.createElement("div", {
                  className: "ml-6"
                }, isValidQuiz(state.quiz) ? null : React.createElement(School__InputGroupError.make, {
                        message: "All questions must be filled in, and all questions should have at least two answers.",
                        active: true
                      }), $$Array.mapi((function (index, quizQuestion) {
                        return React.createElement(CurriculumEditor__TargetQuizQuestion.make, {
                                    questionNumber: String(index + 1 | 0),
                                    quizQuestion: quizQuestion,
                                    updateQuizQuestionCB: (function (param, param$1) {
                                        return Curry._1(send, /* UpdateQuizQuestion */Block.__(10, [
                                                      param,
                                                      param$1
                                                    ]));
                                      }),
                                    removeQuizQuestionCB: (function (param) {
                                        return Curry._1(send, /* RemoveQuizQuestion */Block.__(11, [param]));
                                      }),
                                    questionCanBeRemoved: questionCanBeRemoved(state),
                                    key: CurriculumEditor__QuizQuestion.id(quizQuestion)
                                  });
                      }), state.quiz), React.createElement("a", {
                      className: "flex items-center bg-gray-200 border border-dashed border-primary-400 hover:bg-white hover:text-primary-500 hover:shadow-md rounded-lg p-3 cursor-pointer my-5",
                      onClick: (function (param) {
                          return addQuizQuestion(send, param);
                        })
                    }, React.createElement("i", {
                          className: "fas fa-plus-circle text-lg"
                        }), React.createElement("h5", {
                          className: "font-semibold ml-2"
                        }, "Add another Question"))));
}

function doRequiredStepsHaveUniqueTitles(checklist) {
  var requiredSteps = checklist.filter((function (item) {
          return !TargetChecklistItem.optional(item);
        }));
  return ArrayUtils.distinct($$Array.map($$String.trim, $$Array.map(TargetChecklistItem.title, requiredSteps))).length === requiredSteps.length;
}

function isValidTitle(title) {
  return $$String.trim(title).length !== 0;
}

function isValidMethodOfCompletion(state) {
  var match = state.methodOfCompletion;
  switch (match) {
    case /* Evaluated */0 :
        if (ArrayUtils.isNotEmpty(state.evaluationCriteria)) {
          return isValidChecklist(state.checklist);
        } else {
          return false;
        }
    case /* VisitLink */1 :
        return !UrlUtils.isInvalid(false, state.linkToComplete);
    case /* TakeQuiz */2 :
        return isValidQuiz(state.quiz);
    case /* MarkAsComplete */3 :
        return true;
    
  }
}

function saveDisabled(hasValidTitle, hasValidMethodOfCompletion, requiredStepsHaveUniqueTitles, dirty, saving) {
  if (!requiredStepsHaveUniqueTitles || !hasValidTitle || !hasValidMethodOfCompletion || !dirty) {
    return true;
  } else {
    return saving;
  }
}

var ppx_printed_query$1 = "mutation UpdateTargetMutation($id: ID!, $targetGroupId: ID!, $title: String!, $role: String!, $evaluationCriteria: [ID!]!, $prerequisiteTargets: [ID!]!, $quiz: [TargetQuizInput!]!, $completionInstructions: String, $linkToComplete: String, $visibility: String!, $checklist: JSON!)  {\nupdateTarget(id: $id, targetGroupId: $targetGroupId, title: $title, role: $role, evaluationCriteria: $evaluationCriteria, prerequisiteTargets: $prerequisiteTargets, quiz: $quiz, completionInstructions: $completionInstructions, linkToComplete: $linkToComplete, visibility: $visibility, checklist: $checklist)  {\nsuccess  \n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updateTarget");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type UpdateTargetPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field updateTarget on type Mutation is missing");
  }
  return {
          updateTarget: tmp
        };
}

function json_of_TargetQuizAnswerInput(value) {
  return Js_dict.fromArray([
                /* tuple */[
                  "answer",
                  value.answer
                ],
                /* tuple */[
                  "correctAnswer",
                  value.correctAnswer
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function json_of_TargetQuizInput(value) {
  var v = value.answerOptions;
  return Js_dict.fromArray([
                /* tuple */[
                  "question",
                  value.question
                ],
                /* tuple */[
                  "answerOptions",
                  v.map(json_of_TargetQuizAnswerInput)
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function make$2(id, targetGroupId, title, role, evaluationCriteria, prerequisiteTargets, quiz, completionInstructions, linkToComplete, visibility, checklist, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "targetGroupId",
                    targetGroupId
                  ],
                  /* tuple */[
                    "title",
                    title
                  ],
                  /* tuple */[
                    "role",
                    role
                  ],
                  /* tuple */[
                    "evaluationCriteria",
                    evaluationCriteria.map((function (prim) {
                            return prim;
                          }))
                  ],
                  /* tuple */[
                    "prerequisiteTargets",
                    prerequisiteTargets.map((function (prim) {
                            return prim;
                          }))
                  ],
                  /* tuple */[
                    "quiz",
                    quiz.map(json_of_TargetQuizInput)
                  ],
                  /* tuple */[
                    "completionInstructions",
                    completionInstructions !== undefined ? completionInstructions : null
                  ],
                  /* tuple */[
                    "linkToComplete",
                    linkToComplete !== undefined ? linkToComplete : null
                  ],
                  /* tuple */[
                    "visibility",
                    visibility
                  ],
                  /* tuple */[
                    "checklist",
                    checklist
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var id = variables.id;
  var targetGroupId = variables.targetGroupId;
  var title = variables.title;
  var role = variables.role;
  var evaluationCriteria = variables.evaluationCriteria;
  var prerequisiteTargets = variables.prerequisiteTargets;
  var quiz = variables.quiz;
  var completionInstructions = variables.completionInstructions;
  var linkToComplete = variables.linkToComplete;
  var visibility = variables.visibility;
  var checklist = variables.checklist;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "targetGroupId",
                    targetGroupId
                  ],
                  /* tuple */[
                    "title",
                    title
                  ],
                  /* tuple */[
                    "role",
                    role
                  ],
                  /* tuple */[
                    "evaluationCriteria",
                    evaluationCriteria.map((function (prim) {
                            return prim;
                          }))
                  ],
                  /* tuple */[
                    "prerequisiteTargets",
                    prerequisiteTargets.map((function (prim) {
                            return prim;
                          }))
                  ],
                  /* tuple */[
                    "quiz",
                    quiz.map(json_of_TargetQuizInput)
                  ],
                  /* tuple */[
                    "completionInstructions",
                    completionInstructions !== undefined ? completionInstructions : null
                  ],
                  /* tuple */[
                    "linkToComplete",
                    linkToComplete !== undefined ? linkToComplete : null
                  ],
                  /* tuple */[
                    "visibility",
                    visibility
                  ],
                  /* tuple */[
                    "checklist",
                    checklist
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeVariables$1(id, targetGroupId, title, role, evaluationCriteria, prerequisiteTargets, quiz, completionInstructions, linkToComplete, visibility, checklist, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "targetGroupId",
                  targetGroupId
                ],
                /* tuple */[
                  "title",
                  title
                ],
                /* tuple */[
                  "role",
                  role
                ],
                /* tuple */[
                  "evaluationCriteria",
                  evaluationCriteria.map((function (prim) {
                          return prim;
                        }))
                ],
                /* tuple */[
                  "prerequisiteTargets",
                  prerequisiteTargets.map((function (prim) {
                          return prim;
                        }))
                ],
                /* tuple */[
                  "quiz",
                  quiz.map(json_of_TargetQuizInput)
                ],
                /* tuple */[
                  "completionInstructions",
                  completionInstructions !== undefined ? completionInstructions : null
                ],
                /* tuple */[
                  "linkToComplete",
                  linkToComplete !== undefined ? linkToComplete : null
                ],
                /* tuple */[
                  "visibility",
                  visibility
                ],
                /* tuple */[
                  "checklist",
                  checklist
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$1(graphql_ppx_use_json_variables_fn, id, targetGroupId, title, role, evaluationCriteria, prerequisiteTargets, quiz, completionInstructions, linkToComplete, visibility, checklist, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "id",
                      id
                    ],
                    /* tuple */[
                      "targetGroupId",
                      targetGroupId
                    ],
                    /* tuple */[
                      "title",
                      title
                    ],
                    /* tuple */[
                      "role",
                      role
                    ],
                    /* tuple */[
                      "evaluationCriteria",
                      evaluationCriteria.map((function (prim) {
                              return prim;
                            }))
                    ],
                    /* tuple */[
                      "prerequisiteTargets",
                      prerequisiteTargets.map((function (prim) {
                              return prim;
                            }))
                    ],
                    /* tuple */[
                      "quiz",
                      quiz.map(json_of_TargetQuizInput)
                    ],
                    /* tuple */[
                      "completionInstructions",
                      completionInstructions !== undefined ? completionInstructions : null
                    ],
                    /* tuple */[
                      "linkToComplete",
                      linkToComplete !== undefined ? linkToComplete : null
                    ],
                    /* tuple */[
                      "visibility",
                      visibility
                    ],
                    /* tuple */[
                      "checklist",
                      checklist
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$1 = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002$1
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var UpdateTargetQuery = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  json_of_TargetQuizAnswerInput: json_of_TargetQuizAnswerInput,
  json_of_TargetQuizInput: json_of_TargetQuizInput,
  make: make$2,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

function updateTarget(target, state, send, updateTargetCB, $$event) {
  $$event.preventDefault();
  Curry._1(send, /* UpdateSaving */2);
  var id = CurriculumEditor__Target.id(target);
  var sortIndex = CurriculumEditor__Target.sortIndex(target);
  var role = CurriculumEditor__TargetDetails.roleAsString(state.role);
  var visibilityAsString = CurriculumEditor__TargetDetails.visibilityAsString(state.visibility);
  var quizAsJs = CurriculumEditor__QuizQuestion.quizAsJsObject(state.quiz.filter(CurriculumEditor__QuizQuestion.isValidQuizQuestion));
  var match = state.methodOfCompletion;
  var match$1;
  switch (match) {
    case /* Evaluated */0 :
        match$1 = /* tuple */[
          [],
          state.evaluationCriteria,
          "",
          state.checklist
        ];
        break;
    case /* VisitLink */1 :
        match$1 = /* tuple */[
          [],
          [],
          state.linkToComplete,
          []
        ];
        break;
    case /* TakeQuiz */2 :
        match$1 = /* tuple */[
          quizAsJs,
          [],
          "",
          []
        ];
        break;
    case /* MarkAsComplete */3 :
        match$1 = /* tuple */[
          [],
          [],
          "",
          []
        ];
        break;
    
  }
  var match$2 = state.visibility;
  var newTarget = CurriculumEditor__Target.create(id, state.targetGroupId, state.title, sortIndex, match$2);
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make$2(id, state.targetGroupId, state.title, role, match$1[1], state.prerequisiteTargets, match$1[0], state.completionInstructions, match$1[2], visibilityAsString, TargetChecklistItem.encodeChecklist(match$1[3]), /* () */0)).then((function (result) {
          if (result.updateTarget.success) {
            Curry._1(send, /* ResetEditor */3);
            Curry._1(updateTargetCB, newTarget);
          } else {
            Curry._1(send, /* UpdateSaving */2);
          }
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function CurriculumEditor__TargetDetailsEditor(Props) {
  var target = Props.target;
  var targets = Props.targets;
  var targetGroups = Props.targetGroups;
  var evaluationCriteria = Props.evaluationCriteria;
  var updateTargetCB = Props.updateTargetCB;
  var setDirtyCB = Props.setDirtyCB;
  var match = React.useReducer(reducer, {
        title: "",
        targetGroupId: "",
        role: /* Student */0,
        evaluationCriteria: [],
        prerequisiteTargets: [],
        prerequisiteSearchInput: "",
        evaluationCriteriaSearchInput: "",
        methodOfCompletion: /* Evaluated */0,
        quiz: [],
        linkToComplete: "",
        dirty: false,
        saving: false,
        loading: true,
        visibility: /* Draft */0,
        checklist: [],
        completionInstructions: ""
      });
  var send = match[1];
  var state = match[0];
  var targetId = CurriculumEditor__Target.id(target);
  React.useEffect((function () {
          loadTargetDetails(targetId, send);
          return ;
        }), [targetId]);
  React.useEffect((function () {
          Curry._1(setDirtyCB, state.dirty);
          return ;
        }), [state.dirty]);
  var requiredStepsHaveUniqueTitles = doRequiredStepsHaveUniqueTitles(state.checklist);
  var hasValidTitle = isValidTitle(state.title);
  var hasValidMethodOfCompletion = isValidMethodOfCompletion(state);
  var tmp;
  if (state.loading) {
    tmp = React.createElement("div", {
          className: "max-w-3xl mx-auto px-3"
        }, SkeletonLoading.multiple(2, SkeletonLoading.contents(/* () */0)));
  } else {
    var match$1 = state.methodOfCompletion;
    var tmp$1;
    if (match$1 !== 0) {
      tmp$1 = null;
    } else {
      var allowFileKind = ArrayUtils.isEmpty(state.checklist.filter(TargetChecklistItem.isFilesKind));
      tmp$1 = React.createElement("div", {
            className: "mb-6"
          }, React.createElement("label", {
                className: "tracking-wide text-sm font-semibold",
                htmlFor: "target_checklist"
              }, React.createElement("span", {
                    className: "mr-2"
                  }, React.createElement("i", {
                        className: "fas fa-list text-base"
                      })), "What steps should the student take to complete this target?"), React.createElement(HelpIcon.make, {
                className: "ml-1",
                link: "https://docs.pupilfirst.com/#/curriculum_editor?id=defining-steps-to-complete-a-target",
                children: "These are the steps that a student must complete to submit work on a target. This information will be shown to the coach for review."
              }), React.createElement("div", {
                className: "ml-6 mb-6"
              }, $$Array.mapi((function (index, checklistItem) {
                      var moveChecklistItemUpCB = index > 0 ? (function (param) {
                            return Curry._1(send, /* MoveChecklistItemUp */Block.__(15, [index]));
                          }) : undefined;
                      var moveChecklistItemDownCB = index !== (state.checklist.length - 1 | 0) ? (function (param) {
                            return Curry._1(send, /* MoveChecklistItemDown */Block.__(16, [index]));
                          }) : undefined;
                      var tmp = {
                        checklist: state.checklist,
                        checklistItem: checklistItem,
                        index: index,
                        updateChecklistItemCB: (function (newChecklistItem) {
                            return Curry._1(send, /* UpdateChecklistItem */Block.__(13, [
                                          index,
                                          newChecklistItem
                                        ]));
                          }),
                        removeChecklistItemCB: (function (param) {
                            return Curry._1(send, /* RemoveChecklistItem */Block.__(14, [index]));
                          }),
                        copyChecklistItemCB: (function (param) {
                            return Curry._1(send, /* CopyChecklistItem */Block.__(17, [index]));
                          }),
                        allowFileKind: allowFileKind,
                        key: String(index)
                      };
                      if (moveChecklistItemUpCB !== undefined) {
                        tmp.moveChecklistItemUpCB = Caml_option.valFromOption(moveChecklistItemUpCB);
                      }
                      if (moveChecklistItemDownCB !== undefined) {
                        tmp.moveChecklistItemDownCB = Caml_option.valFromOption(moveChecklistItemDownCB);
                      }
                      return React.createElement(CurriculumEditor__TargetChecklistItemEditor.make, tmp);
                    }), state.checklist), ArrayUtils.isEmpty(state.checklist) ? React.createElement("div", {
                      className: "border border-orange-500 bg-orange-100 text-orange-800 px-2 py-1 rounded my-2 text-sm text-center"
                    }, React.createElement("i", {
                          className: "fas fa-info-circle mr-2"
                        }), "This target has no steps. Students will be able to submit target without any action!") : null, state.checklist.length >= 15 ? React.createElement("div", {
                      className: "border border-orange-500 bg-orange-100 text-orange-800 px-2 py-1 rounded my-2 text-sm text-center"
                    }, React.createElement("i", {
                          className: "fas fa-info-circle mr-2"
                        }), "Maximum allowed checklist items is 15!") : null, React.createElement("button", {
                    className: "flex justify-center items-center w-full rounded-lg border border-dashed border-primary-500 mt-2 p-2 text-sm text-primary-500 focus:outline-none hover:shadow-lg",
                    disabled: state.checklist.length >= 15,
                    onClick: (function (param) {
                        return Curry._1(send, /* AddNewChecklistItem */1);
                      })
                  }, React.createElement(PfIcon.make, {
                        className: "fas fa-plus-circle text-lg"
                      }), React.createElement("span", {
                        className: "font-semibold ml-2"
                      }, "Add a Step"))));
    }
    var match$2 = state.methodOfCompletion;
    var tmp$2;
    switch (match$2) {
      case /* Evaluated */0 :
          tmp$2 = evaluationCriteriaEditor(state, $$Array.of_list(evaluationCriteria), send);
          break;
      case /* VisitLink */1 :
          tmp$2 = linkEditor(state, send);
          break;
      case /* TakeQuiz */2 :
          tmp$2 = quizEditor(state, send);
          break;
      case /* MarkAsComplete */3 :
          tmp$2 = null;
          break;
      
    }
    var match$3 = state.role;
    var match$4 = state.role;
    tmp = React.createElement(DisablingCover.make, {
          disabled: state.saving,
          message: "Saving...",
          children: React.createElement("div", {
                className: "mt-2"
              }, React.createElement("div", {
                    className: "max-w-3xl mx-auto px-3"
                  }, React.createElement("div", {
                        className: "mb-6"
                      }, React.createElement("label", {
                            className: "flex items-center inline-block tracking-wide text-sm font-semibold mb-2",
                            htmlFor: "title"
                          }, React.createElement("span", {
                                className: "mr-2"
                              }, React.createElement("i", {
                                    className: "fas fa-list text-base"
                                  })), "Title"), React.createElement("div", {
                            className: "ml-6"
                          }, React.createElement("input", {
                                className: "appearance-none block text-sm w-full bg-white border border-gray-400 rounded px-4 py-2 my-2 leading-relaxed focus:outline-none focus:bg-white focus:border-gray-500",
                                id: "title",
                                placeholder: "Type target title here",
                                type: "text",
                                value: state.title,
                                onChange: (function (param) {
                                    return updateTitle(send, param);
                                  })
                              }), React.createElement(School__InputGroupError.make, {
                                message: "Enter a valid title",
                                active: !hasValidTitle
                              }))), prerequisiteTargetEditor(send, eligiblePrerequisiteTargets(targetId, targets, targetGroups), state), React.createElement("div", {
                        className: "flex items-center mb-6"
                      }, React.createElement("label", {
                            className: "block tracking-wide text-sm font-semibold mr-6",
                            htmlFor: "evaluated"
                          }, React.createElement("span", {
                                className: "mr-2"
                              }, React.createElement("i", {
                                    className: "fas fa-list text-base"
                                  })), "Will a coach review submissions on this target?"), React.createElement("div", {
                            className: "flex toggle-button__group flex-shrink-0 rounded-lg overflow-hidden",
                            id: "evaluated"
                          }, React.createElement("button", {
                                className: booleanButtonClasses(state.methodOfCompletion === 0),
                                onClick: (function (param) {
                                    return updateMethodOfCompletion(/* Evaluated */0, send, param);
                                  })
                              }, "Yes"), React.createElement("button", {
                                className: booleanButtonClasses(state.methodOfCompletion !== 0),
                                onClick: (function (param) {
                                    return updateMethodOfCompletion(/* MarkAsComplete */3, send, param);
                                  })
                              }, "No"))), tmp$1, state.methodOfCompletion === 0 ? null : methodOfCompletionSelector(state, send), tmp$2, React.createElement("div", {
                        className: "mb-6"
                      }, React.createElement("label", {
                            className: "inline-block tracking-wide text-sm font-semibold",
                            htmlFor: "role"
                          }, React.createElement("span", {
                                className: "mr-2"
                              }, React.createElement("i", {
                                    className: "fas fa-list text-base"
                                  })), "How should teams tackle this target?"), React.createElement(HelpIcon.make, {
                            className: "ml-1",
                            link: "https://docs.pupilfirst.com/#/curriculum_editor?id=setting-the-method-of-completion",
                            children: "Should students in a team submit work on a target individually, or together?"
                          }), React.createElement("div", {
                            className: "flex mt-4 ml-6",
                            id: "role"
                          }, React.createElement("button", {
                                className: "mr-4 " + targetRoleClasses(match$3 ? false : true),
                                onClick: (function (param) {
                                    return updateTargetRole(/* Student */0, send, param);
                                  })
                              }, React.createElement("span", {
                                    className: "mr-4"
                                  }, React.createElement(Icon.make, {
                                        className: "if i-users-check-light text-3xl"
                                      })), React.createElement("span", {
                                    className: "text-sm"
                                  }, "All users must submit individually.")), React.createElement("button", {
                                className: targetRoleClasses(match$4 ? true : false),
                                onClick: (function (param) {
                                    return updateTargetRole(/* Team */1, send, param);
                                  })
                              }, React.createElement("span", {
                                    className: "mr-4"
                                  }, React.createElement(Icon.make, {
                                        className: "if i-user-check-light text-2xl"
                                      })), React.createElement("span", {
                                    className: "text-sm"
                                  }, "Only one user in a team", React.createElement("br", undefined), " needs to submit.")))), React.createElement("div", {
                        className: "mb-6"
                      }, React.createElement("label", {
                            className: "tracking-wide text-sm font-semibold",
                            htmlFor: "completion-instructions"
                          }, React.createElement("span", {
                                className: "mr-2"
                              }, React.createElement("i", {
                                    className: "fas fa-list text-base"
                                  })), "Do you have any completion instructions for the user?", React.createElement("span", {
                                className: "ml-1 text-xs font-normal"
                              }, "(optional)")), React.createElement(HelpIcon.make, {
                            className: "ml-1",
                            link: "https://docs.pupilfirst.com/#/curriculum_editor?id=setting-the-method-of-completion",
                            children: "Use this to remind the student about something important. These instructions will be displayed close to where students complete the target."
                          }), React.createElement("div", {
                            className: "ml-6"
                          }, React.createElement("input", {
                                className: "appearance-none block text-sm w-full bg-white border border-gray-400 rounded px-4 py-2 my-2 leading-relaxed focus:outline-none focus:bg-white focus:border-gray-500",
                                id: "completion-instructions",
                                maxLength: 255,
                                type: "text",
                                value: state.completionInstructions,
                                onChange: (function (param) {
                                    return updateCompletionInstructions(send, param);
                                  })
                              })))), React.createElement("div", {
                    className: "bg-white border-t sticky bottom-0 py-5"
                  }, React.createElement("div", {
                        className: "flex max-w-3xl mx-auto px-3 justify-between items-center"
                      }, React.createElement("div", {
                            className: "flex items-center flex-shrink-0"
                          }, React.createElement("label", {
                                className: "block tracking-wide text-sm font-semibold mr-3",
                                htmlFor: "archived"
                              }, React.createElement("span", {
                                    className: "mr-2"
                                  }, React.createElement("i", {
                                        className: "fas fa-list text-base"
                                      })), "Target Visibility"), React.createElement("div", {
                                className: "flex toggle-button__group flex-shrink-0 rounded-lg overflow-hidden",
                                id: "visibility"
                              }, $$Array.mapi((function (index, visibility) {
                                      var match = state.visibility;
                                      var tmp;
                                      switch (match) {
                                        case /* Draft */0 :
                                            tmp = visibility === 0;
                                            break;
                                        case /* Live */1 :
                                            tmp = visibility === 1;
                                            break;
                                        case /* Archived */2 :
                                            tmp = visibility >= 2;
                                            break;
                                        
                                      }
                                      var tmp$1;
                                      switch (visibility) {
                                        case /* Draft */0 :
                                            tmp$1 = "Draft";
                                            break;
                                        case /* Live */1 :
                                            tmp$1 = "Live";
                                            break;
                                        case /* Archived */2 :
                                            tmp$1 = "Archived";
                                            break;
                                        
                                      }
                                      return React.createElement("button", {
                                                  key: String(index),
                                                  className: booleanButtonClasses(tmp),
                                                  onClick: (function (param) {
                                                      return updateVisibility(visibility, send, param);
                                                    })
                                                }, tmp$1);
                                    }), [
                                    /* Live */1,
                                    /* Archived */2,
                                    /* Draft */0
                                  ]))), React.createElement("div", {
                            className: "w-auto"
                          }, React.createElement("button", {
                                key: "target-actions-step",
                                className: "btn btn-primary w-full text-white font-bold py-3 px-6 shadow rounded focus:outline-none",
                                disabled: saveDisabled(hasValidTitle, hasValidMethodOfCompletion, requiredStepsHaveUniqueTitles, state.dirty, state.saving),
                                onClick: (function (param) {
                                    return updateTarget(target, state, send, updateTargetCB, param);
                                  })
                              }, "Update Target")))))
        });
  }
  return React.createElement("div", {
              className: "pt-6",
              id: "target-properties"
            }, tmp);
}

var make$3 = CurriculumEditor__TargetDetailsEditor;

exports.markIcon = markIcon;
exports.linkIcon = linkIcon;
exports.quizIcon = quizIcon;
exports.str = str;
exports.TargetDetailsQuery = TargetDetailsQuery;
exports.loadTargetDetails = loadTargetDetails;
exports.defaultChecklist = defaultChecklist;
exports.computeMethodOfCompletion = computeMethodOfCompletion;
exports.reducer = reducer;
exports.updateTitle = updateTitle;
exports.eligiblePrerequisiteTargets = eligiblePrerequisiteTargets;
exports.setPrerequisiteSearch = setPrerequisiteSearch;
exports.selectPrerequisiteTarget = selectPrerequisiteTarget;
exports.deSelectPrerequisiteTarget = deSelectPrerequisiteTarget;
exports.SelectablePrerequisiteTargets = SelectablePrerequisiteTargets;
exports.MultiSelectForPrerequisiteTargets = MultiSelectForPrerequisiteTargets;
exports.prerequisiteTargetEditor = prerequisiteTargetEditor;
exports.booleanButtonClasses = booleanButtonClasses;
exports.targetRoleClasses = targetRoleClasses;
exports.targetEvaluated = targetEvaluated;
exports.validNumberOfEvaluationCriteria = validNumberOfEvaluationCriteria;
exports.setEvaluationCriteriaSearch = setEvaluationCriteriaSearch;
exports.selectEvaluationCriterion = selectEvaluationCriterion;
exports.deSelectEvaluationCriterion = deSelectEvaluationCriterion;
exports.SelectableEvaluationCriteria = SelectableEvaluationCriteria;
exports.MultiSelectForEvaluationCriteria = MultiSelectForEvaluationCriteria;
exports.evaluationCriteriaEditor = evaluationCriteriaEditor;
exports.updateLinkToComplete = updateLinkToComplete;
exports.updateCompletionInstructions = updateCompletionInstructions;
exports.updateMethodOfCompletion = updateMethodOfCompletion;
exports.updateTargetRole = updateTargetRole;
exports.updateVisibility = updateVisibility;
exports.linkEditor = linkEditor;
exports.methodOfCompletionButtonClasses = methodOfCompletionButtonClasses;
exports.methodOfCompletionSelection = methodOfCompletionSelection;
exports.methodOfCompletionButton = methodOfCompletionButton;
exports.methodOfCompletionSelector = methodOfCompletionSelector;
exports.isValidQuiz = isValidQuiz;
exports.isValidChecklist = isValidChecklist;
exports.addQuizQuestion = addQuizQuestion;
exports.updateQuizQuestionCB = updateQuizQuestionCB;
exports.removeQuizQuestionCB = removeQuizQuestionCB;
exports.questionCanBeRemoved = questionCanBeRemoved;
exports.quizEditor = quizEditor;
exports.doRequiredStepsHaveUniqueTitles = doRequiredStepsHaveUniqueTitles;
exports.isValidTitle = isValidTitle;
exports.isValidMethodOfCompletion = isValidMethodOfCompletion;
exports.saveDisabled = saveDisabled;
exports.UpdateTargetQuery = UpdateTargetQuery;
exports.updateTarget = updateTarget;
exports.make = make$3;
/* markIcon Not a pure module */
