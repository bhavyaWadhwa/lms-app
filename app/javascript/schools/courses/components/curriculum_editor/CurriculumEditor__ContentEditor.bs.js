// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FaIcon = require("../../../../shared/components/FaIcon.bs.js");
var DateFns = require("../../../../shared/utils/DateFns.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ContentBlock = require("../../../../shared/types/ContentBlock.bs.js");
var GraphqlQuery = require("../../../../shared/utils/GraphqlQuery.bs.js");
var Belt_SetString = require("bs-platform/lib/js/belt_SetString.js");
var SkeletonLoading = require("../../../../shared/components/SkeletonLoading.bs.js");
var CurriculumEditor__Target = require("../../types/curriculum_editor/CurriculumEditor__Target.bs.js");
var CurriculumEditor__Version = require("../../types/curriculum_editor/CurriculumEditor__Version.bs.js");
var CurriculumEditor__ContentBlockEditor = require("./CurriculumEditor__ContentBlockEditor.bs.js");
var CurriculumEditor__ContentBlockCreator = require("./CurriculumEditor__ContentBlockCreator.bs.js");

function str(prim) {
  return prim;
}

function reducer(state, action) {
  switch (action.tag | 0) {
    case /* LoadContent */0 :
        return {
                loading: false,
                contentBlocks: action[0],
                versions: action[1],
                dirtyContentBlockIds: null
              };
    case /* AddContentBlock */1 :
        var newContentBlock = action[0];
        var newBlockSortIndex = ContentBlock.sortIndex(newContentBlock);
        return {
                loading: state.loading,
                contentBlocks: $$Array.append([newContentBlock], $$Array.map((function (contentBlock) {
                            var sortIndex = ContentBlock.sortIndex(contentBlock);
                            if (sortIndex < newBlockSortIndex) {
                              return contentBlock;
                            } else {
                              return ContentBlock.incrementSortIndex(contentBlock);
                            }
                          }), state.contentBlocks)),
                versions: state.versions,
                dirtyContentBlockIds: state.dirtyContentBlockIds
              };
    case /* UpdateContentBlock */2 :
        var updatedContentBlock = action[0];
        return {
                loading: state.loading,
                contentBlocks: $$Array.map((function (contentBlock) {
                        if (ContentBlock.id(contentBlock) === ContentBlock.id(updatedContentBlock)) {
                          return updatedContentBlock;
                        } else {
                          return contentBlock;
                        }
                      }), state.contentBlocks),
                versions: state.versions,
                dirtyContentBlockIds: Belt_SetString.remove(state.dirtyContentBlockIds, ContentBlock.id(updatedContentBlock))
              };
    case /* RemoveContentBlock */3 :
        var contentBlockId = action[0];
        return {
                loading: state.loading,
                contentBlocks: state.contentBlocks.filter((function (contentBlock) {
                        return ContentBlock.id(contentBlock) !== contentBlockId;
                      })),
                versions: state.versions,
                dirtyContentBlockIds: state.dirtyContentBlockIds
              };
    case /* MoveContentBlockUp */4 :
        return {
                loading: state.loading,
                contentBlocks: ContentBlock.moveUp(action[0], state.contentBlocks),
                versions: state.versions,
                dirtyContentBlockIds: state.dirtyContentBlockIds
              };
    case /* MoveContentBlockDown */5 :
        return {
                loading: state.loading,
                contentBlocks: ContentBlock.moveDown(action[0], state.contentBlocks),
                versions: state.versions,
                dirtyContentBlockIds: state.dirtyContentBlockIds
              };
    case /* SetDirty */6 :
        var operation = action[1] ? Belt_SetString.add : Belt_SetString.remove;
        return {
                loading: state.loading,
                contentBlocks: state.contentBlocks,
                versions: state.versions,
                dirtyContentBlockIds: Curry._2(operation, state.dirtyContentBlockIds, action[0])
              };
    
  }
}

function loadContentBlocks(targetId, send) {
  GraphqlQuery.sendQuery(true, ContentBlock.Query.make(targetId, undefined, /* () */0)).then((function (result) {
          var contentBlocks = result.contentBlocks.map(ContentBlock.makeFromJs);
          var versions = CurriculumEditor__Version.makeArrayFromJs(result.targetVersions);
          Curry._1(send, /* LoadContent */Block.__(0, [
                  contentBlocks,
                  versions
                ]));
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function addContentBlock(send, contentBlock) {
  return Curry._1(send, /* AddContentBlock */Block.__(1, [contentBlock]));
}

function removeContentBlock(send, contentBlockId) {
  return Curry._1(send, /* RemoveContentBlock */Block.__(3, [contentBlockId]));
}

function moveContentBlockUp(send, contentBlock) {
  return Curry._1(send, /* MoveContentBlockUp */Block.__(4, [contentBlock]));
}

function moveContentBlockDown(send, contentBlock) {
  return Curry._1(send, /* MoveContentBlockDown */Block.__(5, [contentBlock]));
}

function setDirty(contentBlockId, send, dirty) {
  return Curry._1(send, /* SetDirty */Block.__(6, [
                contentBlockId,
                dirty
              ]));
}

function updateContentBlock(send, contentBlock) {
  return Curry._1(send, /* UpdateContentBlock */Block.__(2, [contentBlock]));
}

function editor(target, state, send) {
  var versions = state.versions;
  var currentVersion = versions.length !== 0 ? DateFns.format(CurriculumEditor__Version.updatedAt(versions[0]), "MMM d, yyyy HH:mm") : React.createElement("span", {
          className: "italic"
        }, "Not Versioned");
  var sortedContentBlocks = ContentBlock.sort(state.contentBlocks);
  var numberOfContentBlocks = state.contentBlocks.length;
  var removeContentBlockCB = numberOfContentBlocks > 1 ? (function (param) {
        return Curry._1(send, /* RemoveContentBlock */Block.__(3, [param]));
      }) : undefined;
  var match = CurriculumEditor__Target.visibility(target);
  return React.createElement("div", {
              className: "mt-2"
            }, React.createElement("div", {
                  className: "flex justify-between items-end"
                }, match !== 1 ? null : React.createElement("a", {
                        className: "py-2 px-3 font-semibold rounded-lg text-sm focus:outline-none bg-primary-100 text-primary-500",
                        href: "/targets/" + CurriculumEditor__Target.id(target),
                        target: "_blank"
                      }, React.createElement(FaIcon.make, {
                            classes: "fas fa-external-link-alt"
                          }), React.createElement("span", {
                            className: "ml-2"
                          }, "View as User")), React.createElement("div", {
                      className: "w-2/6 text-right"
                    }, React.createElement("label", {
                          className: "text-xs block text-gray-600"
                        }, "Last Updated"), React.createElement("span", {
                          className: "text-sm font-semibold"
                        }, currentVersion))), $$Array.mapi((function (index, contentBlock) {
                    var moveContentBlockUpCB = index === 0 ? undefined : (function (param) {
                          return Curry._1(send, /* MoveContentBlockUp */Block.__(4, [param]));
                        });
                    var moveContentBlockDownCB = (index + 1 | 0) === numberOfContentBlocks ? undefined : (function (param) {
                          return Curry._1(send, /* MoveContentBlockDown */Block.__(5, [param]));
                        });
                    var isDirty = Belt_SetString.has(state.dirtyContentBlockIds, ContentBlock.id(contentBlock));
                    var updateContentBlockCB = isDirty ? (function (param) {
                          return Curry._1(send, /* UpdateContentBlock */Block.__(2, [param]));
                        }) : undefined;
                    var partial_arg = ContentBlock.id(contentBlock);
                    var tmp = {
                      contentBlock: contentBlock,
                      setDirtyCB: (function (param) {
                          return Curry._1(send, /* SetDirty */Block.__(6, [
                                        partial_arg,
                                        param
                                      ]));
                        })
                    };
                    if (removeContentBlockCB !== undefined) {
                      tmp.removeContentBlockCB = Caml_option.valFromOption(removeContentBlockCB);
                    }
                    if (moveContentBlockUpCB !== undefined) {
                      tmp.moveContentBlockUpCB = Caml_option.valFromOption(moveContentBlockUpCB);
                    }
                    if (moveContentBlockDownCB !== undefined) {
                      tmp.moveContentBlockDownCB = Caml_option.valFromOption(moveContentBlockDownCB);
                    }
                    if (updateContentBlockCB !== undefined) {
                      tmp.updateContentBlockCB = Caml_option.valFromOption(updateContentBlockCB);
                    }
                    return React.createElement("div", {
                                key: ContentBlock.id(contentBlock)
                              }, React.createElement(CurriculumEditor__ContentBlockCreator.make, {
                                    target: target,
                                    aboveContentBlock: contentBlock,
                                    addContentBlockCB: (function (param) {
                                        return Curry._1(send, /* AddContentBlock */Block.__(1, [param]));
                                      })
                                  }), React.createElement(CurriculumEditor__ContentBlockEditor.make, tmp));
                  }), sortedContentBlocks), React.createElement(CurriculumEditor__ContentBlockCreator.make, {
                  target: target,
                  addContentBlockCB: (function (param) {
                      return Curry._1(send, /* AddContentBlock */Block.__(1, [param]));
                    })
                }));
}

function CurriculumEditor__ContentEditor(Props) {
  var target = Props.target;
  var setDirtyCB = Props.setDirtyCB;
  var match = React.useReducer(reducer, {
        loading: true,
        contentBlocks: [],
        versions: [],
        dirtyContentBlockIds: null
      });
  var send = match[1];
  var state = match[0];
  React.useEffect((function () {
          loadContentBlocks(CurriculumEditor__Target.id(target), send);
          return ;
        }), ([]));
  React.useEffect((function () {
          var dirty = !Belt_SetString.isEmpty(state.dirtyContentBlockIds);
          Curry._1(setDirtyCB, dirty);
          return ;
        }), [state.dirtyContentBlockIds]);
  return React.createElement("div", {
              className: "max-w-3xl py-6 px-3 mx-auto"
            }, state.loading ? SkeletonLoading.multiple(2, SkeletonLoading.contents(/* () */0)) : editor(target, state, send));
}

var make = CurriculumEditor__ContentEditor;

exports.str = str;
exports.reducer = reducer;
exports.loadContentBlocks = loadContentBlocks;
exports.addContentBlock = addContentBlock;
exports.removeContentBlock = removeContentBlock;
exports.moveContentBlockUp = moveContentBlockUp;
exports.moveContentBlockDown = moveContentBlockDown;
exports.setDirty = setDirty;
exports.updateContentBlock = updateContentBlock;
exports.editor = editor;
exports.make = make;
/* react Not a pure module */
