// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Api = require("../../../../shared/Api.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var $$Notification = require("../../../../shared/Notification.bs.js");
var CurriculumEditor__TargetGroup = require("../../types/curriculum_editor/CurriculumEditor__TargetGroup.bs.js");

function str(prim) {
  return prim;
}

function reducer(state, action) {
  if (typeof action === "number") {
    return {
            name: state.name,
            description: state.description,
            milestone: state.milestone,
            hasNameError: state.hasNameError,
            dirty: state.dirty,
            isArchived: state.isArchived,
            saving: !state.saving
          };
  } else {
    switch (action.tag | 0) {
      case /* UpdateName */0 :
          return {
                  name: action[0],
                  description: state.description,
                  milestone: state.milestone,
                  hasNameError: action[1],
                  dirty: true,
                  isArchived: state.isArchived,
                  saving: state.saving
                };
      case /* UpdateDescription */1 :
          return {
                  name: state.name,
                  description: action[0],
                  milestone: state.milestone,
                  hasNameError: state.hasNameError,
                  dirty: true,
                  isArchived: state.isArchived,
                  saving: state.saving
                };
      case /* UpdateMilestone */2 :
          return {
                  name: state.name,
                  description: state.description,
                  milestone: action[0],
                  hasNameError: state.hasNameError,
                  dirty: true,
                  isArchived: state.isArchived,
                  saving: state.saving
                };
      case /* UpdateIsArchived */3 :
          return {
                  name: state.name,
                  description: state.description,
                  milestone: state.milestone,
                  hasNameError: state.hasNameError,
                  dirty: true,
                  isArchived: action[0],
                  saving: state.saving
                };
      
    }
  }
}

function updateName(send, name) {
  var hasError = name.length < 2;
  return Curry._1(send, /* UpdateName */Block.__(0, [
                name,
                hasError
              ]));
}

function saveDisabled(state) {
  if (state.hasNameError || !state.dirty) {
    return true;
  } else {
    return state.saving;
  }
}

function setPayload(authenticityToken, state) {
  var payload = { };
  var milestone = state.milestone === true ? "true" : "false";
  payload["authenticity_token"] = authenticityToken;
  payload["archived"] = state.isArchived;
  payload["name"] = state.name;
  payload["description"] = state.description;
  payload["milestone"] = milestone;
  return payload;
}

function booleanButtonClasses(selected) {
  return "toggle-button__button" + (
          selected ? " toggle-button__button--active" : ""
        );
}

function formClasses(value) {
  if (value) {
    return "drawer-right-form w-full opacity-50";
  } else {
    return "drawer-right-form w-full";
  }
}

function computeInitialState(targetGroup) {
  if (targetGroup !== undefined) {
    var targetGroup$1 = targetGroup;
    var match = CurriculumEditor__TargetGroup.description(targetGroup$1);
    return {
            name: CurriculumEditor__TargetGroup.name(targetGroup$1),
            description: match !== undefined ? match : "",
            milestone: CurriculumEditor__TargetGroup.milestone(targetGroup$1),
            hasNameError: false,
            dirty: false,
            isArchived: CurriculumEditor__TargetGroup.archived(targetGroup$1),
            saving: false
          };
  } else {
    return {
            name: "",
            description: "",
            milestone: true,
            hasNameError: false,
            dirty: false,
            isArchived: false,
            saving: false
          };
  }
}

function CurriculumEditor__TargetGroupEditor(Props) {
  var targetGroup = Props.targetGroup;
  var currentLevelId = Props.currentLevelId;
  var authenticityToken = Props.authenticityToken;
  var updateTargetGroupsCB = Props.updateTargetGroupsCB;
  var hideEditorActionCB = Props.hideEditorActionCB;
  var match = React.useReducer(reducer, targetGroup, computeInitialState);
  var send = match[1];
  var state = match[0];
  var handleErrorCB = function (param) {
    return Curry._1(send, /* UpdateSaving */0);
  };
  var handleResponseCB = function (json) {
    var id = Json_decode.field("id", Json_decode.string, json);
    var sortIndex = Json_decode.field("sortIndex", Json_decode.$$int, json);
    var newTargetGroup = CurriculumEditor__TargetGroup.create(id, state.name, state.description, state.milestone, currentLevelId, sortIndex, state.isArchived);
    if (targetGroup !== undefined) {
      $$Notification.success("Success", "Target Group updated successfully");
    } else {
      $$Notification.success("Success", "Target Group created successfully");
    }
    return Curry._1(updateTargetGroupsCB, newTargetGroup);
  };
  var tmp;
  if (targetGroup !== undefined) {
    var id = CurriculumEditor__TargetGroup.id(targetGroup);
    tmp = React.createElement("div", {
          className: "w-auto"
        }, React.createElement("button", {
              className: "btn btn-primary btn-large",
              disabled: saveDisabled(state),
              onClick: (function (_e) {
                  var targetGroupId = id;
                  Curry._1(send, /* UpdateSaving */0);
                  var payload = setPayload(authenticityToken, state);
                  var url = "/school/target_groups/" + targetGroupId;
                  return Api.update(url, payload, handleResponseCB, handleErrorCB);
                })
            }, "Update Module"));
  } else {
    tmp = React.createElement("div", {
          className: "w-full"
        }, React.createElement("button", {
              className: "w-full btn btn-primary btn-large",
              disabled: saveDisabled(state),
              onClick: (function (_e) {
                  Curry._1(send, /* UpdateSaving */0);
                  var payload = setPayload(authenticityToken, state);
                  var url = "/school/levels/" + (currentLevelId + "/target_groups");
                  return Api.create(url, payload, handleResponseCB, handleErrorCB);
                })
            }, "Create Module"));
  }
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "blanket"
                }), React.createElement("div", {
                  className: "drawer-right"
                }, React.createElement("div", {
                      className: "drawer-right__close absolute"
                    }, React.createElement("button", {
                          className: "flex items-center justify-center bg-white text-gray-600 font-bold py-3 px-5 rounded-l-full rounded-r-none hover:text-gray-600 focus:outline-none mt-4",
                          title: "close",
                          onClick: (function (param) {
                              return Curry._1(hideEditorActionCB, /* () */0);
                            })
                        }, React.createElement("i", {
                              className: "fas fa-times text-xl"
                            }))), React.createElement("div", {
                      className: state.saving ? "drawer-right-form w-full opacity-50" : "drawer-right-form w-full"
                    }, React.createElement("div", {
                          className: "w-full"
                        }, React.createElement("div", {
                              className: "mx-auto bg-white"
                            }, React.createElement("div", {
                                  className: "max-w-2xl pt-6 px-6 mx-auto"
                                }, React.createElement("h5", {
                                      className: "uppercase text-center border-b border-gray-400 pb-2"
                                    }, "Module Details"), React.createElement("div", {
                                      className: "mt-5"
                                    }, React.createElement("label", {
                                          className: "inline-block tracking-wide text-xs font-semibold",
                                          htmlFor: "name"
                                        }, "Title"), React.createElement("span", undefined, "*"), React.createElement("input", {
                                          className: "appearance-none block w-full bg-white border border-gray-400 rounded py-3 px-4 mt-2 leading-tight focus:outline-none focus:bg-white focus:border-gray-500",
                                          id: "name",
                                          placeholder: "Type module name here",
                                          type: "text",
                                          value: state.name,
                                          onChange: (function ($$event) {
                                              return updateName(send, $$event.target.value);
                                            })
                                        }), state.hasNameError ? React.createElement("div", {
                                            className: "drawer-right-form__error-msg"
                                          }, React.createElement("span", {
                                                className: "mr-2"
                                              }, React.createElement("i", {
                                                    className: "fas fa-exclamation-triangle"
                                                  })), React.createElement("span", undefined, "not a valid Title")) : null), React.createElement("div", {
                                      className: "mt-5"
                                    }, React.createElement("label", {
                                          className: "block tracking-wide text-xs font-semibold",
                                          htmlFor: "description"
                                        }, " Description"), React.createElement("textarea", {
                                          className: "appearance-none block w-full bg-white border border-gray-400 rounded py-3 px-4 mt-2 leading-tight focus:outline-none focus:bg-white focus:border-gray-500",
                                          id: "description",
                                          cols: 33,
                                          placeholder: "Type module description",
                                          rows: 5,
                                          value: state.description,
                                          onChange: (function ($$event) {
                                              return Curry._1(send, /* UpdateDescription */Block.__(1, [$$event.target.value]));
                                            })
                                        })), React.createElement("div", {
                                      className: "mt-5"
                                    }, React.createElement("div", {
                                          className: "flex items-center flex-shrink-0"
                                        }, React.createElement("label", {
                                              className: "block tracking-wide text-xs font-semibold mr-3"
                                            }, "Is this a Milestone Modules?"), React.createElement("div", {
                                              className: "milestone flex-shrink-0 rounded-lg overflow-hidden border border-gray-400"
                                            }, React.createElement("button", {
                                                  className: booleanButtonClasses(state.milestone === true),
                                                  onClick: (function (_event) {
                                                      _event.preventDefault();
                                                      return Curry._1(send, /* UpdateMilestone */Block.__(2, [true]));
                                                    })
                                                }, "Yes"), React.createElement("button", {
                                                  className: booleanButtonClasses(state.milestone === false),
                                                  onClick: (function (_event) {
                                                      _event.preventDefault();
                                                      return Curry._1(send, /* UpdateMilestone */Block.__(2, [false]));
                                                    })
                                                }, "No"))))), React.createElement("div", {
                                  className: "border-t bg-gray-100 mt-5"
                                }, React.createElement("div", {
                                      className: "max-w-2xl p-6 mx-auto flex w-full justify-between items-center"
                                    }, targetGroup !== undefined ? React.createElement("div", {
                                            className: "flex items-center mr-2"
                                          }, React.createElement("label", {
                                                className: "block tracking-wide text-xs font-semibold mr-6"
                                              }, "Is this Module archived?"), React.createElement("div", {
                                                className: "toggle-button__group archived inline-flex flex-shrink-0 rounded-lg overflow-hidden"
                                              }, React.createElement("button", {
                                                    className: booleanButtonClasses(state.isArchived === true),
                                                    onClick: (function (_event) {
                                                        _event.preventDefault();
                                                        return Curry._1(send, /* UpdateIsArchived */Block.__(3, [true]));
                                                      })
                                                  }, "Yes"), React.createElement("button", {
                                                    className: booleanButtonClasses(state.isArchived === false),
                                                    onClick: (function (_event) {
                                                        _event.preventDefault();
                                                        return Curry._1(send, /* UpdateIsArchived */Block.__(3, [false]));
                                                      })
                                                  }, "No"))) : null, tmp)))))));
}

var make = CurriculumEditor__TargetGroupEditor;

exports.str = str;
exports.reducer = reducer;
exports.updateName = updateName;
exports.saveDisabled = saveDisabled;
exports.setPayload = setPayload;
exports.booleanButtonClasses = booleanButtonClasses;
exports.formClasses = formClasses;
exports.computeInitialState = computeInitialState;
exports.make = make;
/* Api Not a pure module */
