// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Api = require("../../../../shared/Api.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var $$String = require("bs-platform/lib/js/string.js");
var DateFns = require("../../../../shared/utils/DateFns.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var DomUtils = require("../../../../shared/utils/DomUtils.bs.js");
var HelpIcon = require("../../../../shared/components/HelpIcon.bs.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var DatePicker = require("../../../../shared/components/DatePicker.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var WindowUtils = require("../../../../shared/utils/WindowUtils.bs.js");
var GraphqlQuery = require("../../../../shared/utils/GraphqlQuery.bs.js");
var $$Notification = require("../../../../shared/Notification.bs.js");
var DisablingCover = require("../../../../shared/components/DisablingCover.bs.js");
var AuthenticityToken = require("../../../../shared/utils/AuthenticityToken.bs.js");
var CurriculumEditor__Level = require("../../types/curriculum_editor/CurriculumEditor__Level.bs.js");
var CurriculumEditor__Course = require("../../types/curriculum_editor/CurriculumEditor__Course.bs.js");
var SchoolAdmin__EditorDrawer = require("../../../components/SchoolAdmin__EditorDrawer.bs.js");

((require("./CurriculumEditor__LevelEditor.css")));

function str(prim) {
  return prim;
}

function reducer(state, action) {
  if (typeof action === "number") {
    if (action === /* BeginSaving */0) {
      return {
              name: state.name,
              unlockOn: state.unlockOn,
              hasNameError: state.hasNameError,
              dirty: state.dirty,
              saving: true,
              tab: state.tab,
              mergeIntoLevelId: state.mergeIntoLevelId
            };
    } else {
      return {
              name: state.name,
              unlockOn: state.unlockOn,
              hasNameError: state.hasNameError,
              dirty: state.dirty,
              saving: false,
              tab: state.tab,
              mergeIntoLevelId: state.mergeIntoLevelId
            };
    }
  } else {
    switch (action.tag | 0) {
      case /* UpdateName */0 :
          return {
                  name: action[0],
                  unlockOn: state.unlockOn,
                  hasNameError: action[1],
                  dirty: true,
                  saving: state.saving,
                  tab: state.tab,
                  mergeIntoLevelId: state.mergeIntoLevelId
                };
      case /* UpdateUnlockOn */1 :
          return {
                  name: state.name,
                  unlockOn: action[0],
                  hasNameError: state.hasNameError,
                  dirty: true,
                  saving: state.saving,
                  tab: state.tab,
                  mergeIntoLevelId: state.mergeIntoLevelId
                };
      case /* UpdateTab */2 :
          return {
                  name: state.name,
                  unlockOn: state.unlockOn,
                  hasNameError: state.hasNameError,
                  dirty: state.dirty,
                  saving: state.saving,
                  tab: action[0],
                  mergeIntoLevelId: state.mergeIntoLevelId
                };
      case /* SelectLevelToMergeInto */3 :
          return {
                  name: state.name,
                  unlockOn: state.unlockOn,
                  hasNameError: state.hasNameError,
                  dirty: state.dirty,
                  saving: state.saving,
                  tab: state.tab,
                  mergeIntoLevelId: action[0]
                };
      
    }
  }
}

function updateName(send, name) {
  var hasError = $$String.trim(name).length < 2;
  return Curry._1(send, /* UpdateName */Block.__(0, [
                name,
                hasError
              ]));
}

function saveDisabled(state) {
  if (state.hasNameError || !state.dirty) {
    return true;
  } else {
    return state.saving;
  }
}

function setPayload(authenticityToken, state) {
  var payload = { };
  payload["authenticity_token"] = authenticityToken;
  payload["name"] = state.name;
  payload["unlock_on"] = Belt_Option.mapWithDefault(state.unlockOn, "", DateFns.encodeISO);
  return payload;
}

function formClasses(value) {
  if (value) {
    return "drawer-right-form w-full opacity-50";
  } else {
    return "drawer-right-form w-full";
  }
}

function computeInitialState(level) {
  var match;
  if (level !== undefined) {
    var level$1 = level;
    match = /* tuple */[
      CurriculumEditor__Level.name(level$1),
      CurriculumEditor__Level.unlockOn(level$1)
    ];
  } else {
    match = /* tuple */[
      "",
      undefined
    ];
  }
  return {
          name: match[0],
          unlockOn: match[1],
          hasNameError: false,
          dirty: false,
          saving: false,
          tab: /* Details */0,
          mergeIntoLevelId: "0"
        };
}

function drawerTitle(level) {
  if (level !== undefined) {
    return "Edit Level " + String(CurriculumEditor__Level.number(level));
  } else {
    return "Create New Level";
  }
}

function handleResponseCB(level, updateLevelsCB, state, json) {
  var id = Json_decode.field("id", Json_decode.string, json);
  var number = Json_decode.field("number", Json_decode.$$int, json);
  var newLevel = CurriculumEditor__Level.create(id, state.name, number, state.unlockOn);
  if (level !== undefined) {
    $$Notification.success("Success", "Level updated successfully");
  } else {
    $$Notification.success("Success", "Level created successfully");
  }
  return Curry._1(updateLevelsCB, newLevel);
}

function createLevel(course, updateLevelsCB, state, send) {
  Curry._1(send, /* BeginSaving */0);
  var handleErrorCB = function (param) {
    return Curry._1(send, /* FailSaving */1);
  };
  var url = "/school/courses/" + (CurriculumEditor__Course.id(course) + "/levels");
  return Api.create(url, setPayload(AuthenticityToken.fromHead(/* () */0), state), (function (param) {
                return handleResponseCB(undefined, updateLevelsCB, state, param);
              }), handleErrorCB);
}

function updateLevel(level, updateLevelsCB, state, send) {
  Curry._1(send, /* BeginSaving */0);
  var handleErrorCB = function (param) {
    return Curry._1(send, /* FailSaving */1);
  };
  var url = "/school/levels/" + CurriculumEditor__Level.id(level);
  var partial_arg = level;
  return Api.update(url, setPayload(AuthenticityToken.fromHead(/* () */0), state), (function (param) {
                return handleResponseCB(partial_arg, updateLevelsCB, state, param);
              }), handleErrorCB);
}

function detailsForm(level, course, updateLevelsCB, state, send) {
  var match = state.tab;
  var visibiltyClass = match ? "hidden" : undefined;
  var tmp = { };
  if (visibiltyClass !== undefined) {
    tmp.className = Caml_option.valFromOption(visibiltyClass);
  }
  var tmp$1 = {
    onChange: (function (date) {
        return Curry._1(send, /* UpdateUnlockOn */Block.__(1, [date]));
      }),
    id: "unlock-on-input"
  };
  if (state.unlockOn !== undefined) {
    tmp$1.selected = Caml_option.valFromOption(state.unlockOn);
  }
  var tmp$2;
  if (level !== undefined) {
    var level$1 = level;
    tmp$2 = React.createElement("button", {
          className: "w-full btn btn-large btn-primary",
          disabled: saveDisabled(state),
          onClick: (function (_event) {
              return updateLevel(level$1, updateLevelsCB, state, send);
            })
        }, "Update Level");
  } else {
    tmp$2 = React.createElement("button", {
          className: "w-full btn btn-large btn-primary",
          disabled: saveDisabled(state),
          onClick: (function (_event) {
              return createLevel(course, updateLevelsCB, state, send);
            })
        }, "Create New Level");
  }
  return React.createElement("div", tmp, React.createElement("div", {
                  className: "mt-5"
                }, React.createElement("label", {
                      className: "inline-block tracking-wide text-xs font-semibold",
                      htmlFor: "name"
                    }, "Level Name"), React.createElement("input", {
                      className: "appearance-none block w-full bg-white border border-gray-400 rounded py-3 px-4 mt-2 leading-tight focus:outline-none focus:bg-white focus:border-gray-500",
                      id: "name",
                      placeholder: "Type level name here",
                      type: "text",
                      value: state.name,
                      onChange: (function ($$event) {
                          return updateName(send, $$event.target.value);
                        })
                    }), state.hasNameError ? React.createElement("div", {
                        className: "drawer-right-form__error-msg"
                      }, "not a valid name") : null), React.createElement("div", {
                  className: "mt-5"
                }, React.createElement("label", {
                      className: "tracking-wide text-xs font-semibold",
                      htmlFor: "unlock-on-input"
                    }, "Unlock level on"), React.createElement("span", {
                      className: "text-xs"
                    }, " (optional)"), React.createElement(DatePicker.make, tmp$1)), React.createElement("div", {
                  className: "flex mt-5"
                }, tmp$2));
}

function handleSelectLevelForDeletion(send, $$event) {
  var target = $$event.target;
  return Curry._1(send, /* SelectLevelToMergeInto */Block.__(3, [target.value]));
}

var ppx_printed_query = "mutation MergeLevelsQuery($deleteLevelId: ID!, $mergeIntoLevelId: ID!)  {\nmergeLevels(deleteLevelId: $deleteLevelId, mergeIntoLevelId: $mergeIntoLevelId)  {\nsuccess  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "mergeLevels");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type MergeLevelsPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field mergeLevels on type Mutation is missing");
  }
  return {
          mergeLevels: tmp
        };
}

function make(deleteLevelId, mergeIntoLevelId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "deleteLevelId",
                    deleteLevelId
                  ],
                  /* tuple */[
                    "mergeIntoLevelId",
                    mergeIntoLevelId
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var deleteLevelId = variables.deleteLevelId;
  var mergeIntoLevelId = variables.mergeIntoLevelId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "deleteLevelId",
                    deleteLevelId
                  ],
                  /* tuple */[
                    "mergeIntoLevelId",
                    mergeIntoLevelId
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(deleteLevelId, mergeIntoLevelId, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "deleteLevelId",
                  deleteLevelId
                ],
                /* tuple */[
                  "mergeIntoLevelId",
                  mergeIntoLevelId
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, deleteLevelId, mergeIntoLevelId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "deleteLevelId",
                      deleteLevelId
                    ],
                    /* tuple */[
                      "mergeIntoLevelId",
                      mergeIntoLevelId
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var MergeLevelsQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function deleteSelectedLevel(state, send, level, _event) {
  return WindowUtils.confirm(undefined, "Are you sure? This action cannot be undone.", (function (param) {
                Curry._1(send, /* BeginSaving */0);
                (function (eta) {
                          return GraphqlQuery.sendQuery(undefined, eta);
                        })(make(CurriculumEditor__Level.id(level), state.mergeIntoLevelId, /* () */0)).then((function (result) {
                          if (result.mergeLevels.success) {
                            DomUtils.reload(/* () */0);
                          } else {
                            Curry._1(send, /* FailSaving */1);
                          }
                          return Promise.resolve(/* () */0);
                        })).catch((function (error) {
                        console.log(error);
                        $$Notification.error("Oops!", "Something went wrong when we tried to merge & delete this level. Please reload this page before trying again.");
                        return Promise.resolve(/* () */0);
                      }));
                return /* () */0;
              }));
}

function actionsForm(level, levels, state, send) {
  var match = state.tab;
  var visibiltyClass = match ? undefined : "hidden";
  var otherLevels = levels.filter((function (l) {
          if (CurriculumEditor__Level.id(level) !== CurriculumEditor__Level.id(l)) {
            return CurriculumEditor__Level.number(l) !== 0;
          } else {
            return false;
          }
        }));
  var tmp = { };
  if (visibiltyClass !== undefined) {
    tmp.className = Caml_option.valFromOption(visibiltyClass);
  }
  return React.createElement("div", tmp, React.createElement("div", {
                  className: "mt-5"
                }, React.createElement("label", {
                      className: "inline-block tracking-wide text-xs font-semibold",
                      htmlFor: "delete-and-merge-level"
                    }, "Delete & Merge Into"), React.createElement(HelpIcon.make, {
                      className: "ml-1 text-sm",
                      children: "Pick another level to merge this level into. This action will shift all targets and students in level."
                    }), React.createElement("select", {
                      className: "cursor-pointer appearance-none block w-full bg-white border border-gray-400 rounded py-3 px-4 mt-2 leading-tight focus:outline-none focus:bg-white focus:border-gray-500",
                      id: "delete-and-merge-level",
                      value: state.mergeIntoLevelId,
                      onChange: (function (param) {
                          return handleSelectLevelForDeletion(send, param);
                        })
                    }, React.createElement("option", {
                          key: "0",
                          value: "0"
                        }, "Select a different level"), $$Array.map((function (level) {
                            return React.createElement("option", {
                                        key: CurriculumEditor__Level.id(level),
                                        value: CurriculumEditor__Level.id(level)
                                      }, "L" + (String(CurriculumEditor__Level.number(level)) + (": " + CurriculumEditor__Level.name(level))));
                          }), otherLevels)), React.createElement("button", {
                      className: "btn btn-primary mt-2",
                      disabled: state.mergeIntoLevelId === "0",
                      onClick: (function (param) {
                          return deleteSelectedLevel(state, send, level, param);
                        })
                    }, "Merge and Delete")));
}

function tab(tab$1, state, send) {
  var defaultClasses = "level-editor__tab cursor-pointer";
  var match = tab$1 ? /* tuple */[
      "Actions",
      "fa-cogs"
    ] : /* tuple */[
      "Details",
      "fa-list-alt"
    ];
  var selected = tab$1 === state.tab;
  var classes = selected ? "level-editor__tab cursor-pointer level-editor__tab--selected" : defaultClasses;
  return React.createElement("button", {
              className: classes,
              onClick: (function (_e) {
                  return Curry._1(send, /* UpdateTab */Block.__(2, [tab$1]));
                })
            }, React.createElement("i", {
                  className: "fas " + match[1]
                }), React.createElement("span", {
                  className: "ml-2"
                }, match[0]));
}

function CurriculumEditor__LevelEditor(Props) {
  var level = Props.level;
  var levels = Props.levels;
  var course = Props.course;
  var hideEditorActionCB = Props.hideEditorActionCB;
  var updateLevelsCB = Props.updateLevelsCB;
  var match = React.useReducer(reducer, level, computeInitialState);
  var send = match[1];
  var state = match[0];
  return React.createElement(SchoolAdmin__EditorDrawer.make, {
              closeDrawerCB: hideEditorActionCB,
              children: React.createElement(DisablingCover.make, {
                    disabled: state.saving,
                    children: null
                  }, React.createElement("div", {
                        className: "bg-gray-200 pt-6"
                      }, React.createElement("div", {
                            className: "max-w-2xl px-6 mx-auto"
                          }, React.createElement("h3", undefined, drawerTitle(level))), level !== undefined ? React.createElement("div", {
                              className: "flex w-full max-w-2xl mx-auto px-6 text-sm -mb-px mt-2"
                            }, tab(/* Details */0, state, send), tab(/* Actions */1, state, send)) : React.createElement("div", {
                              className: "h-4"
                            })), React.createElement("div", {
                        className: "bg-white"
                      }, React.createElement("div", {
                            className: "border-t border-gray-400"
                          }, React.createElement("div", {
                                className: "max-w-2xl mx-auto px-6"
                              }, detailsForm(level, course, updateLevelsCB, state, send), level !== undefined ? actionsForm(level, levels, state, send) : null))))
            });
}

var make$1 = CurriculumEditor__LevelEditor;

exports.str = str;
exports.reducer = reducer;
exports.updateName = updateName;
exports.saveDisabled = saveDisabled;
exports.setPayload = setPayload;
exports.formClasses = formClasses;
exports.computeInitialState = computeInitialState;
exports.drawerTitle = drawerTitle;
exports.handleResponseCB = handleResponseCB;
exports.createLevel = createLevel;
exports.updateLevel = updateLevel;
exports.detailsForm = detailsForm;
exports.handleSelectLevelForDeletion = handleSelectLevelForDeletion;
exports.MergeLevelsQuery = MergeLevelsQuery;
exports.deleteSelectedLevel = deleteSelectedLevel;
exports.actionsForm = actionsForm;
exports.tab = tab;
exports.make = make$1;
/*  Not a pure module */
