// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var PfIcon = require("../../../../packages/pf-icon/src/PfIcon.bs.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Dropdown = require("../../../../shared/components/Dropdown.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var OptionUtils = require("../../../../shared/utils/OptionUtils.bs.js");
var TargetChecklistItem = require("../../types/curriculum_editor/TargetChecklistItem.bs.js");
var School__InputGroupError = require("../../../shared/components/School__InputGroupError.bs.js");

function str(prim) {
  return prim;
}

function updateTitle(checklistItem, updateChecklistItemCB, $$event) {
  var title = $$event.target.value;
  return Curry._1(updateChecklistItemCB, TargetChecklistItem.updateTitle(title, checklistItem));
}

function updateKind(checklistItem, updateChecklistItemCB, kind) {
  return Curry._1(updateChecklistItemCB, TargetChecklistItem.updateKind(kind, checklistItem));
}

function updateOptional(checklistItem, updateChecklistItemCB, $$event) {
  var optional = $$event.target.checked;
  return Curry._1(updateChecklistItemCB, TargetChecklistItem.updateOptional(optional, checklistItem));
}

function buttonColorClasses(color) {
  return "border-" + (color + ("-500 bg-" + (color + ("-100 text-" + (color + "-800")))));
}

function iconColorClasses(color) {
  return "bg-" + (color + "-500 ");
}

function selectedButtonIcon(kind) {
  if (typeof kind === "number") {
    switch (kind) {
      case /* Files */0 :
          return "i-file-regular";
      case /* Link */1 :
          return "i-link-regular";
      case /* ShortText */2 :
          return "i-short-text-regular";
      case /* LongText */3 :
          return "i-long-text-regular";
      
    }
  } else {
    return "i-check-circle-alt-regular";
  }
}

function checklistDropdown(checklistItem, allowFileKind, updateChecklistItemCB) {
  var selectedKind = TargetChecklistItem.kind(checklistItem);
  var selectedButtonColor;
  if (typeof selectedKind === "number") {
    switch (selectedKind) {
      case /* Files */0 :
          selectedButtonColor = "pink";
          break;
      case /* Link */1 :
          selectedButtonColor = "indigo";
          break;
      case /* ShortText */2 :
          selectedButtonColor = "orange";
          break;
      case /* LongText */3 :
          selectedButtonColor = "blue";
          break;
      
    }
  } else {
    selectedButtonColor = "teal";
  }
  var selected = React.createElement("button", {
        className: "border focus:outline-none appearance-none flex items-center rounded " + buttonColorClasses(selectedButtonColor)
      }, React.createElement("div", {
            className: "flex"
          }, React.createElement("span", {
                className: "flex items-center justify-center rounded text-white p-1 m-1 " + iconColorClasses(selectedButtonColor)
              }, React.createElement(PfIcon.make, {
                    className: "if if-fw " + selectedButtonIcon(selectedKind)
                  })), React.createElement("span", {
                className: "inline-flex items-center px-1 py-1 font-semibold text-xs"
              }, TargetChecklistItem.actionStringForKind(selectedKind))), React.createElement("span", {
            className: "px-2 py-1 flex items-center"
          }, React.createElement("i", {
                className: "fas fa-caret-down text-xs"
              })));
  var defaultKindTypes = [
    /* LongText */3,
    /* ShortText */2,
    /* Link */1,
    /* MultiChoice */[[
        "Yes",
        "No"
      ]]
  ];
  var allowedKindTypes = allowFileKind ? $$Array.append([/* Files */0], defaultKindTypes) : defaultKindTypes;
  var contents = $$Array.mapi((function (index, kind) {
          return React.createElement("button", {
                      key: String(index),
                      className: "w-full px-2 py-1 focus:outline-none appearance-none text-left",
                      onClick: (function (param) {
                          return Curry._1(updateChecklistItemCB, TargetChecklistItem.updateKind(kind, checklistItem));
                        })
                    }, React.createElement(PfIcon.make, {
                          className: "mr-2 if if-fw " + selectedButtonIcon(kind)
                        }), TargetChecklistItem.actionStringForKind(kind));
        }), allowedKindTypes.filter((function (kind) {
              return Caml_obj.caml_notequal(kind, selectedKind);
            })));
  return React.createElement(Dropdown.make, {
              selected: selected,
              contents: contents
            });
}

function removeMultichoiceOption(choiceIndex, checklistItem, updateChecklistItemCB) {
  return Curry._1(updateChecklistItemCB, TargetChecklistItem.removeMultichoiceOption(choiceIndex, checklistItem));
}

function addMultichoiceOption(checklistItem, updateChecklistItemCB) {
  return Curry._1(updateChecklistItemCB, TargetChecklistItem.addMultichoiceOption(checklistItem));
}

function updateChoiceText(choiceIndex, checklistItem, updateChecklistItemCB, $$event) {
  var choice = $$event.target.value;
  return Curry._1(updateChecklistItemCB, TargetChecklistItem.updateMultichoiceOption(choiceIndex, choice, checklistItem));
}

function multiChoiceEditor(choices, checklistItem, removeMultichoiceOption, updateChecklistItemCB) {
  var showRemoveIcon = choices.length > 2;
  return React.createElement("div", {
              className: "ml-3 mt-3"
            }, React.createElement("div", {
                  className: "text-xs font-semibold mb-2"
                }, "Choices:"), $$Array.mapi((function (index, choice) {
                    return React.createElement("div", {
                                key: String(index)
                              }, React.createElement("div", {
                                    className: "flex items-center text-sm rounded mt-2"
                                  }, React.createElement("span", {
                                        className: "text-gray-400"
                                      }, React.createElement("i", {
                                            className: "far fa-circle text-base"
                                          })), React.createElement("div", {
                                        className: "flex flex-1 py-2 px-3 ml-3 justify-between items-center focus:outline-none bg-white focus:bg-white focus:border-primary-300 border border-gray-400 rounded"
                                      }, React.createElement("input", {
                                            className: "flex-1 appearance-none bg-transparent border-none leading-snug focus:outline-none",
                                            name: "multichoice-input-" + String(index + 1 | 0),
                                            type: "text",
                                            value: choice,
                                            onChange: (function (param) {
                                                return updateChoiceText(index, checklistItem, updateChecklistItemCB, param);
                                              })
                                          }), React.createElement("button", {
                                            title: "Remove Choice " + String(index + 1 | 0),
                                            onClick: (function (param) {
                                                return Curry._3(removeMultichoiceOption, index, checklistItem, updateChecklistItemCB);
                                              })
                                          }, showRemoveIcon ? React.createElement(PfIcon.make, {
                                                  className: "if i-times-regular if-fw"
                                                }) : null))), React.createElement("div", {
                                    className: "ml-6"
                                  }, React.createElement(School__InputGroupError.make, {
                                        message: "Not a valid choice",
                                        active: $$String.trim(choice) === ""
                                      })));
                  }), choices), React.createElement("button", {
                  className: "flex mt-2 ml-7 p-2 text-sm appearance-none bg-white border rounded items-center justify-between outline-none border-gray-400 hover:border-gray-100 hover:shadow-lg focus:outline-none",
                  onClick: (function (param) {
                      return Curry._1(updateChecklistItemCB, TargetChecklistItem.addMultichoiceOption(checklistItem));
                    })
                }, React.createElement(PfIcon.make, {
                      className: "fas fa-plus-circle if-fw"
                    }), React.createElement("span", {
                      className: "font-semibold ml-2"
                    }, "Add a choice")));
}

function controlIcon(icon, title, handler) {
  if (handler === undefined) {
    return null;
  } else {
    var tmp = {
      className: "px-2 py-1 focus:outline-none text-sm text-gray-700 hover:bg-gray-300 hover:text-gray-900 overflow-hidden",
      title: title,
      disabled: handler === undefined
    };
    if (handler !== undefined) {
      tmp.onClick = Caml_option.valFromOption(handler);
    }
    return React.createElement("button", tmp, React.createElement("i", {
                    className: "fas fa-fw " + icon
                  }));
  }
}

var filesNotice = React.createElement("div", {
      className: "mt-2 text-sm"
    }, React.createElement("strong", undefined, "Note:"), React.createElement("span", {
          className: "ml-1"
        }, "Students can submit up to 3 files, limited to 5 MB each."));

function isRequiredStepTitleDuplicated(checklist, item) {
  var trimmedTitle = $$String.trim(TargetChecklistItem.title(item));
  if (trimmedTitle === "") {
    return false;
  } else {
    return checklist.filter((function (item) {
                    return !TargetChecklistItem.optional(item);
                  })).filter((function (checklistItem) {
                  return $$String.trim(TargetChecklistItem.title(checklistItem)) === trimmedTitle;
                })).length > 1;
  }
}

function CurriculumEditor__TargetChecklistItemEditor(Props) {
  var checklist = Props.checklist;
  var checklistItem = Props.checklistItem;
  var index = Props.index;
  var updateChecklistItemCB = Props.updateChecklistItemCB;
  var removeChecklistItemCB = Props.removeChecklistItemCB;
  var moveChecklistItemUpCB = Props.moveChecklistItemUpCB;
  var moveChecklistItemDownCB = Props.moveChecklistItemDownCB;
  var copyChecklistItemCB = Props.copyChecklistItemCB;
  var allowFileKind = Props.allowFileKind;
  var match = TargetChecklistItem.kind(checklistItem);
  return React.createElement("div", {
              key: String(index),
              "aria-label": "Editor for checklist item " + String(index + 1 | 0),
              className: "flex items-start py-2 relative"
            }, React.createElement("div", {
                  className: "w-full bg-gray-100 border rounded-lg p-5 mr-1"
                }, React.createElement("div", {
                      className: "flex justify-between items-center"
                    }, React.createElement("div", undefined, checklistDropdown(checklistItem, allowFileKind, updateChecklistItemCB)), React.createElement("div", {
                          className: "items-center"
                        }, React.createElement("input", {
                              className: "leading-tight",
                              id: String(index),
                              checked: TargetChecklistItem.optional(checklistItem),
                              type: "checkbox",
                              onChange: (function (param) {
                                  return updateOptional(checklistItem, updateChecklistItemCB, param);
                                })
                            }), React.createElement("label", {
                              className: "text-xs text-gray-600 ml-2",
                              htmlFor: String(index)
                            }, "Optional"))), React.createElement("div", {
                      className: "flex items-center text-sm bg-white border border-gray-400 rounded py-2 px-3 mt-2 focus:outline-none focus:bg-white focus:border-primary-300"
                    }, React.createElement("input", {
                          className: "flex-grow appearance-none bg-transparent border-none leading-relaxed focus:outline-none",
                          name: "checklist-item-" + (String(index + 1 | 0) + "-title"),
                          placeholder: "Describe this step",
                          type: "text",
                          value: TargetChecklistItem.title(checklistItem),
                          onChange: (function (param) {
                              return updateTitle(checklistItem, updateChecklistItemCB, param);
                            })
                        })), React.createElement("div", undefined, React.createElement(School__InputGroupError.make, {
                          message: "Step cannot be empty",
                          active: $$String.trim(TargetChecklistItem.title(checklistItem)) === ""
                        }), React.createElement(School__InputGroupError.make, {
                          message: "Not a unique step; required steps must be unique",
                          active: isRequiredStepTitleDuplicated(checklist, checklistItem)
                        })), typeof match === "number" ? (
                    match !== 0 ? null : filesNotice
                  ) : multiChoiceEditor(match[0], checklistItem, removeMultichoiceOption, updateChecklistItemCB)), React.createElement("div", {
                  "aria-label": "Controls for checklist item " + String(index + 1 | 0),
                  className: "-mr-10 flex-shrink-0 border bg-gray-100 border rounded-lg flex flex-col text-xs sticky top-0"
                }, controlIcon("fa-arrow-up", "Move Up", OptionUtils.map((function (cb, param) {
                            return Curry._1(cb, /* () */0);
                          }), moveChecklistItemUpCB)), controlIcon("fa-arrow-down", "Move Down", OptionUtils.map((function (cb, param) {
                            return Curry._1(cb, /* () */0);
                          }), moveChecklistItemDownCB)), controlIcon("fa-copy", "Copy", (function (param) {
                        return Curry._1(copyChecklistItemCB, /* () */0);
                      })), controlIcon("fa-trash-alt", "Delete", (function (param) {
                        return Curry._1(removeChecklistItemCB, /* () */0);
                      }))));
}

var make = CurriculumEditor__TargetChecklistItemEditor;

exports.str = str;
exports.updateTitle = updateTitle;
exports.updateKind = updateKind;
exports.updateOptional = updateOptional;
exports.buttonColorClasses = buttonColorClasses;
exports.iconColorClasses = iconColorClasses;
exports.selectedButtonIcon = selectedButtonIcon;
exports.checklistDropdown = checklistDropdown;
exports.removeMultichoiceOption = removeMultichoiceOption;
exports.addMultichoiceOption = addMultichoiceOption;
exports.updateChoiceText = updateChoiceText;
exports.multiChoiceEditor = multiChoiceEditor;
exports.controlIcon = controlIcon;
exports.filesNotice = filesNotice;
exports.isRequiredStepTitleDuplicated = isRequiredStepTitleDuplicated;
exports.make = make;
/* filesNotice Not a pure module */
