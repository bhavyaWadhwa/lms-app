// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Dropdown = require("../../../../shared/components/Dropdown.bs.js");
var HelpIcon = require("../../../../shared/components/HelpIcon.bs.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var OptionUtils = require("../../../../shared/utils/OptionUtils.bs.js");
var ContentBlock = require("../../../../shared/types/ContentBlock.bs.js");
var GraphqlQuery = require("../../../../shared/utils/GraphqlQuery.bs.js");
var SkeletonLoading = require("../../../../shared/components/SkeletonLoading.bs.js");
var TargetContentView = require("../../../../shared/components/TargetContentView.bs.js");
var CurriculumEditor__Version = require("../../types/curriculum_editor/CurriculumEditor__Version.bs.js");

function str(prim) {
  return prim;
}

function reducer(_state, action) {
  if (action) {
    return /* Loaded */[
            action[0],
            action[2],
            action[1]
          ];
  } else {
    return /* Loading */0;
  }
}

var ppx_printed_query = "mutation CreateTargetVersionMutation($targetVersionId: ID!)  {\ncreateTargetVersion(targetVersionId: $targetVersionId)  {\nsuccess  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createTargetVersion");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type CreateTargetVersionPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field createTargetVersion on type Mutation is missing");
  }
  return {
          createTargetVersion: tmp
        };
}

function make(targetVersionId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "targetVersionId",
                    targetVersionId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var targetVersionId = variables.targetVersionId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "targetVersionId",
                    targetVersionId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(targetVersionId, param) {
  return Js_dict.fromArray([/* tuple */[
                  "targetVersionId",
                  targetVersionId
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, targetVersionId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "targetVersionId",
                      targetVersionId
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var CreateTargetVersionMutation = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function loadContentBlocks(targetId, send, version) {
  var targetVersionId = OptionUtils.map(CurriculumEditor__Version.id, version);
  Curry._1(send, /* SetLoading */0);
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(ContentBlock.Query.make(targetId, targetVersionId, /* () */0)).then((function (result) {
          var contentBlocks = result.contentBlocks.map(ContentBlock.makeFromJs);
          var versions = CurriculumEditor__Version.makeArrayFromJs(result.targetVersions);
          var selectedVersion = version !== undefined ? version : Caml_array.caml_array_get(versions, 0);
          Curry._1(send, /* LoadContent */[
                contentBlocks,
                versions,
                selectedVersion
              ]);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function createTargetVersion(targetId, targetVersion, send) {
  var targetVersionId = CurriculumEditor__Version.id(targetVersion);
  Curry._1(send, /* SetLoading */0);
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make(targetVersionId, /* () */0)).then((function (_result) {
          loadContentBlocks(targetId, send, undefined);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function versionText(version) {
  return React.createElement("div", undefined, React.createElement("span", {
                  className: "font-semibold text-lg"
                }, "#" + (String(CurriculumEditor__Version.number(version)) + " ")), React.createElement("span", {
                  className: "text-xs"
                }, CurriculumEditor__Version.versionAt(version)));
}

function showDropdown(versions, selectedVersion, loadContentBlocksCB) {
  var contents = $$Array.map((function (version) {
          var id = CurriculumEditor__Version.id(version);
          return React.createElement("button", {
                      key: id,
                      className: "whitespace-no-wrap px-3 py-2 cursor-pointer hover:bg-gray-100 hover:text-primary-500 w-full text-left",
                      id: id,
                      title: "Select version " + id,
                      onClick: (function (param) {
                          return Curry._1(loadContentBlocksCB, version);
                        })
                    }, versionText(version));
        }), versions.filter((function (version) {
              return Caml_obj.caml_notequal(version, selectedVersion);
            })));
  var selected = React.createElement("button", {
        className: "text-sm appearance-none bg-white inline-flex items-center justify-between focus:outline-none hover:bg-gray-100 hover:shadow-lg px-3 h-full",
        title: "Select version " + CurriculumEditor__Version.id(selectedVersion)
      }, React.createElement("span", undefined, versionText(selectedVersion)), React.createElement("span", {
            className: "border-l border-gray-400 ml-2 pl-2"
          }, React.createElement("i", {
                className: "fas fa-chevron-down text-sm"
              })));
  if (versions.length === 1) {
    return React.createElement("div", {
                className: "text-sm appearance-none bg-white px-3"
              }, React.createElement("span", {
                    className: "font-semibold text-lg"
                  }, "#1 "), CurriculumEditor__Version.versionAt(selectedVersion));
  } else {
    return React.createElement(Dropdown.make, {
                selected: selected,
                contents: contents,
                right: true,
                className: "h-full"
              });
  }
}

function showContentBlocks(contentBlocks, versions, selectedVersion, loadContentBlocksCB, targetId, send) {
  return React.createElement("div", undefined, React.createElement("div", undefined, React.createElement("label", {
                      className: "text-xs inline-block text-gray-600 mb-1"
                    }, versions.length > 1 ? "Versions" : "Version"), React.createElement(HelpIcon.make, {
                      className: "ml-1",
                      link: "https://docs.pupilfirst.com/#/curriculum_editor?id=target-content-versions",
                      children: "Use the versions feature to preserve the existing state of a target's content, to browse earlier stored versions, and to restore them, if required."
                    })), React.createElement("div", {
                  className: "flex"
                }, React.createElement("div", {
                      className: "border border-gray-400 flex items-center"
                    }, showDropdown(versions, selectedVersion, loadContentBlocksCB)), React.createElement("div", {
                      className: "ml-2"
                    }, React.createElement("button", {
                          className: "btn btn-primary-ghost",
                          onClick: (function (param) {
                              return createTargetVersion(targetId, selectedVersion, send);
                            })
                        }, CurriculumEditor__Version.isLatestTargetVersion(versions, selectedVersion) ? "Save this version" : "Restore this version"))), React.createElement(TargetContentView.make, {
                  contentBlocks: contentBlocks
                }));
}

function CurriculumEditor__VersionsEditor(Props) {
  var targetId = Props.targetId;
  var match = React.useReducer(reducer, /* Loading */0);
  var send = match[1];
  var state = match[0];
  var loadContentBlocksCB = function (param) {
    return loadContentBlocks(targetId, send, param);
  };
  React.useEffect((function () {
          loadContentBlocks(targetId, send, undefined);
          return ;
        }), ([]));
  return React.createElement("div", {
              className: "max-w-3xl py-6 px-3 mx-auto"
            }, state ? showContentBlocks(state[0], state[2], state[1], loadContentBlocksCB, targetId, send) : SkeletonLoading.multiple(2, SkeletonLoading.contents(/* () */0)));
}

var make$1 = CurriculumEditor__VersionsEditor;

exports.str = str;
exports.reducer = reducer;
exports.CreateTargetVersionMutation = CreateTargetVersionMutation;
exports.loadContentBlocks = loadContentBlocks;
exports.createTargetVersion = createTargetVersion;
exports.versionText = versionText;
exports.showDropdown = showDropdown;
exports.showContentBlocks = showContentBlocks;
exports.make = make$1;
/* react Not a pure module */
