// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Api = require("../../../shared/Api.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Avatar = require("../../../shared/Avatar.bs.js");
var $$String = require("bs-platform/lib/js/string.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var $$Notification = require("../../../shared/Notification.bs.js");
var Belt_SortArray = require("bs-platform/lib/js/belt_SortArray.js");
var DisablingCover = require("../../../shared/components/DisablingCover.bs.js");
var CourseCoaches__InfoForm = require("./course_coaches/CourseCoaches__InfoForm.bs.js");
var SchoolAdmin__EditorDrawer = require("../../components/SchoolAdmin__EditorDrawer.bs.js");
var CourseCoaches__CourseCoach = require("../types/course_coaches/CourseCoaches__CourseCoach.bs.js");
var CourseCoaches__EnrollmentForm = require("./course_coaches/CourseCoaches__EnrollmentForm.bs.js");

function str(prim) {
  return prim;
}

function reducer(state, action) {
  if (typeof action === "number") {
    return {
            courseCoaches: state.courseCoaches,
            formVisible: state.formVisible,
            saving: !state.saving
          };
  } else {
    switch (action.tag | 0) {
      case /* UpdateFormVisible */0 :
          return {
                  courseCoaches: state.courseCoaches,
                  formVisible: action[0],
                  saving: state.saving
                };
      case /* AddCourseCoaches */1 :
          return {
                  courseCoaches: $$Array.append(action[0], state.courseCoaches),
                  formVisible: state.formVisible,
                  saving: state.saving
                };
      case /* RemoveCoach */2 :
          var coachId = action[0];
          return {
                  courseCoaches: state.courseCoaches.filter((function (courseCoach) {
                          return CourseCoaches__CourseCoach.id(courseCoach) !== coachId;
                        })),
                  formVisible: state.formVisible,
                  saving: state.saving
                };
      
    }
  }
}

function handleErrorCB(send, param) {
  Curry._1(send, /* UpdateSaving */0);
  return $$Notification.error("Coach enrollment could not be deleted", "Please try again");
}

function handleResponseCB(send, json) {
  Curry._1(send, /* UpdateSaving */0);
  var coachId = Json_decode.field("coach_id", Json_decode.string, json);
  Curry._1(send, /* RemoveCoach */Block.__(2, [coachId]));
  return $$Notification.success("Success", "Coach enrollment deleted successfully");
}

function removeCoach(send, courseId, authenticityToken, coach, $$event) {
  $$event.preventDefault();
  if (window.confirm("Are you sure you want to remove " + (CourseCoaches__CourseCoach.name(coach) + " from this course?"))) {
    Curry._1(send, /* UpdateSaving */0);
    var url = "/school/courses/" + (courseId + "/delete_coach_enrollment");
    var payload = { };
    payload["authenticity_token"] = authenticityToken;
    payload["coach_id"] = CourseCoaches__CourseCoach.id(coach);
    return Api.create(url, payload, (function (param) {
                  return handleResponseCB(send, param);
                }), (function (param) {
                  return handleErrorCB(send, param);
                }));
  } else {
    return /* () */0;
  }
}

function CourseCoaches__Root(Props) {
  var courseCoaches = Props.courseCoaches;
  var schoolCoaches = Props.schoolCoaches;
  var courseId = Props.courseId;
  var authenticityToken = Props.authenticityToken;
  var match = React.useReducer(reducer, {
        courseCoaches: courseCoaches,
        formVisible: /* None */0,
        saving: false
      });
  var send = match[1];
  var state = match[0];
  var updateCoachesCB = function (courseCoaches) {
    Curry._1(send, /* AddCourseCoaches */Block.__(1, [courseCoaches]));
    return Curry._1(send, /* UpdateFormVisible */Block.__(0, [/* None */0]));
  };
  var match$1 = state.formVisible;
  return React.createElement(DisablingCover.make, {
              disabled: state.saving,
              containerClasses: "w-full",
              children: React.createElement("div", {
                    key: "School admin coaches course index",
                    className: "flex flex-1 h-full overflow-y-scroll bg-gray-100"
                  }, typeof match$1 === "number" ? (
                      match$1 !== 0 ? React.createElement(SchoolAdmin__EditorDrawer.make, {
                              closeDrawerCB: (function (param) {
                                  return Curry._1(send, /* UpdateFormVisible */Block.__(0, [/* None */0]));
                                }),
                              children: React.createElement(CourseCoaches__EnrollmentForm.make, {
                                    schoolCoaches: schoolCoaches,
                                    courseCoaches: state.courseCoaches,
                                    courseId: courseId,
                                    updateCoachesCB: updateCoachesCB
                                  })
                            }) : null
                    ) : React.createElement(SchoolAdmin__EditorDrawer.make, {
                          closeDrawerCB: (function (param) {
                              return Curry._1(send, /* UpdateFormVisible */Block.__(0, [/* None */0]));
                            }),
                          children: React.createElement(CourseCoaches__InfoForm.make, {
                                courseId: courseId,
                                coach: match$1[0]
                              })
                        }), React.createElement("div", {
                        className: "flex-1 flex flex-col"
                      }, schoolCoaches.length === state.courseCoaches.length || ArrayUtils.isEmpty(schoolCoaches) ? null : React.createElement("div", {
                              className: "flex px-6 py-2 items-center justify-between"
                            }, React.createElement("button", {
                                  className: "max-w-2xl w-full flex mx-auto items-center justify-center relative bg-white text-primary-500 hove:bg-gray-100 hover:text-primary-600 hover:shadow-lg focus:outline-none border-2 border-gray-400 border-dashed hover:border-primary-300 p-6 rounded-lg mt-8 cursor-pointer",
                                  onClick: (function (_event) {
                                      _event.preventDefault();
                                      return Curry._1(send, /* UpdateFormVisible */Block.__(0, [/* CoachEnrollmentForm */1]));
                                    })
                                }, React.createElement("i", {
                                      className: "fas fa-user-plus text-lg"
                                    }), React.createElement("h5", {
                                      className: "font-semibold ml-2"
                                    }, "Assign Coaches to Course"))), ArrayUtils.isEmpty(state.courseCoaches) ? React.createElement("div", {
                              className: "flex justify-center bg-gray-100 border rounded p-3 italic mx-auto max-w-2xl w-full mt-8"
                            }, "The course has no coaches assigned!") : null, React.createElement("div", {
                            className: "px-6 pb-4 mt-5 flex flex-1"
                          }, React.createElement("div", {
                                className: "max-w-2xl w-full mx-auto relative"
                              }, React.createElement("div", {
                                    "aria-label": "List of course coaches",
                                    className: "flex mt-4 -mx-3 flex-wrap"
                                  }, $$Array.map((function (coach) {
                                          var match = CourseCoaches__CourseCoach.avatarUrl(coach);
                                          return React.createElement("div", {
                                                      key: CourseCoaches__CourseCoach.id(coach),
                                                      className: "flex w-1/2 flex-shrink-0 mb-5 px-3"
                                                    }, React.createElement("div", {
                                                          className: "shadow bg-whzite cursor-pointer rounded-lg flex w-full border border-transparent overflow-hidden hover:border-primary-400 hover:bg-gray-100",
                                                          id: CourseCoaches__CourseCoach.name(coach)
                                                        }, React.createElement("div", {
                                                              className: "flex flex-1 justify-between"
                                                            }, React.createElement("div", {
                                                                  "aria-label": "coach-card-" + CourseCoaches__CourseCoach.id(coach),
                                                                  className: "flex flex-1 py-4 px-4 items-center",
                                                                  onClick: (function (param) {
                                                                      return Curry._1(send, /* UpdateFormVisible */Block.__(0, [/* CoachInfoForm */[coach]]));
                                                                    })
                                                                }, React.createElement("span", {
                                                                      className: "mr-4 flex-shrink-0"
                                                                    }, match !== undefined ? React.createElement("img", {
                                                                            className: "w-10 h-10 rounded-full object-cover",
                                                                            src: match
                                                                          }) : React.createElement(Avatar.make, {
                                                                            name: CourseCoaches__CourseCoach.name(coach),
                                                                            className: "w-10 h-10 rounded-full"
                                                                          })), React.createElement("div", {
                                                                      className: "text-sm"
                                                                    }, React.createElement("p", {
                                                                          className: "text-black font-semibold mt-1"
                                                                        }, CourseCoaches__CourseCoach.name(coach)), React.createElement("p", {
                                                                          className: "text-gray-600 font-semibold text-xs mt-px"
                                                                        }, CourseCoaches__CourseCoach.title(coach)))), React.createElement("div", {
                                                                  "aria-label": "Delete " + CourseCoaches__CourseCoach.name(coach),
                                                                  className: "w-10 text-sm course-faculty__list-item-remove text-gray-700 hover:text-gray-900 cursor-pointer flex items-center justify-center hover:bg-gray-200",
                                                                  onClick: (function (param) {
                                                                      return removeCoach(send, courseId, authenticityToken, coach, param);
                                                                    })
                                                                }, React.createElement("i", {
                                                                      className: "fas fa-trash-alt"
                                                                    })))));
                                        }), Belt_SortArray.stableSortBy(state.courseCoaches, (function (a, b) {
                                              return $$String.compare(CourseCoaches__CourseCoach.name(a), CourseCoaches__CourseCoach.name(b));
                                            }))))))))
            });
}

var make = CourseCoaches__Root;

exports.str = str;
exports.reducer = reducer;
exports.handleErrorCB = handleErrorCB;
exports.handleResponseCB = handleResponseCB;
exports.removeCoach = removeCoach;
exports.make = make;
/* Api Not a pure module */
