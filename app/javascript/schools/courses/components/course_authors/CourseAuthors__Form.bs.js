// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var EmailUtils = require("../../../../shared/utils/EmailUtils.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../../shared/utils/GraphqlQuery.bs.js");
var DisablingCover = require("../../../../shared/components/DisablingCover.bs.js");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.js");
var CourseAuthors__Author = require("../../types/course_authors/CourseAuthors__Author.bs.js");
var School__InputGroupError = require("../../../shared/components/School__InputGroupError.bs.js");

function str(prim) {
  return prim;
}

var ppx_printed_query = "mutation CreateCourseAuthorMutation($courseId: ID!, $name: String!, $email: String!)  {\ncreateCourseAuthor(courseId: $courseId, name: $name, email: $email)  {\ncourseAuthor  {\nid  \navatarUrl  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createCourseAuthor");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "courseAuthor");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      if (match$2 !== undefined) {
        tmp$1 = undefined;
      } else {
        var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
        var match$3 = Js_dict.get(value$4, "id");
        var tmp$2;
        if (match$3 !== undefined) {
          var value$5 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeString(value$5);
          tmp$2 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        } else {
          tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type UserProxy is missing");
        }
        var match$5 = Js_dict.get(value$4, "avatarUrl");
        var tmp$3;
        if (match$5 !== undefined) {
          var value$6 = Caml_option.valFromOption(match$5);
          var match$6 = Js_json.decodeNull(value$6);
          if (match$6 !== undefined) {
            tmp$3 = undefined;
          } else {
            var match$7 = Js_json.decodeString(value$6);
            tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
          }
        } else {
          tmp$3 = undefined;
        }
        tmp$1 = {
          id: tmp$2,
          avatarUrl: tmp$3
        };
      }
    } else {
      tmp$1 = undefined;
    }
    tmp = {
      courseAuthor: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field createCourseAuthor on type Mutation is missing");
  }
  return {
          createCourseAuthor: tmp
        };
}

function make(courseId, name, email, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "courseId",
                    courseId
                  ],
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "email",
                    email
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var courseId = variables.courseId;
  var name = variables.name;
  var email = variables.email;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "courseId",
                    courseId
                  ],
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "email",
                    email
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(courseId, name, email, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "courseId",
                  courseId
                ],
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "email",
                  email
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, courseId, name, email, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "courseId",
                      courseId
                    ],
                    /* tuple */[
                      "name",
                      name
                    ],
                    /* tuple */[
                      "email",
                      email
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var CreateCourseAuthorQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var ppx_printed_query$1 = "mutation UpdateCourseAuthorMutation($id: ID!, $name: String!)  {\nupdateCourseAuthor(id: $id, name: $name)  {\nsuccess  \n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updateCourseAuthor");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type UpdateCourseAuthorPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field updateCourseAuthor on type Mutation is missing");
  }
  return {
          updateCourseAuthor: tmp
        };
}

function make$1(id, name, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "name",
                    name
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var id = variables.id;
  var name = variables.name;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "name",
                    name
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeVariables$1(id, name, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "name",
                  name
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$1(graphql_ppx_use_json_variables_fn, id, name, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "id",
                      id
                    ],
                    /* tuple */[
                      "name",
                      name
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$1 = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002$1
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var UpdateCourseAuthorQuery = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  make: make$1,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

function createCourseAuthorQuery(courseId, rootPath, email, name, setSaving, addAuthorCB) {
  Curry._1(setSaving, (function (param) {
          return true;
        }));
  (function (eta) {
            return GraphqlQuery.sendQuery(undefined, eta);
          })(make(courseId, name, email, /* () */0)).then((function (response) {
            var match = response.createCourseAuthor.courseAuthor;
            if (match !== undefined) {
              var courseAuthor = Caml_option.valFromOption(match);
              Curry._1(addAuthorCB, CourseAuthors__Author.create(courseAuthor.id, name, email, courseAuthor.avatarUrl));
              ReasonReactRouter.push(rootPath);
            } else {
              Curry._1(setSaving, (function (param) {
                      return false;
                    }));
            }
            return Promise.resolve(/* () */0);
          })).catch((function (param) {
          Curry._1(setSaving, (function (param) {
                  return false;
                }));
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function updateCourseAuthorQuery(rootPath, author, name, setSaving, updateAuthorCB) {
  Curry._1(setSaving, (function (param) {
          return true;
        }));
  var id = CourseAuthors__Author.id(author);
  (function (eta) {
            return GraphqlQuery.sendQuery(undefined, eta);
          })(make$1(id, name, /* () */0)).then((function (response) {
            if (response.updateCourseAuthor.success) {
              Curry._1(updateAuthorCB, CourseAuthors__Author.updateName(name, author));
              ReasonReactRouter.push(rootPath);
            } else {
              Curry._1(setSaving, (function (param) {
                      return false;
                    }));
            }
            return Promise.resolve(/* () */0);
          })).catch((function (param) {
          Curry._1(setSaving, (function (param) {
                  return false;
                }));
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function handleButtonClick(courseId, rootPath, author, setSaving, name, email, addAuthorCB, updateAuthorCB, $$event) {
  $$event.preventDefault();
  if (author !== undefined) {
    return updateCourseAuthorQuery(rootPath, author, name, setSaving, updateAuthorCB);
  } else {
    return createCourseAuthorQuery(courseId, rootPath, email, name, setSaving, addAuthorCB);
  }
}

function isInvalidEmail(email) {
  return EmailUtils.isInvalid(false, email);
}

function showInvalidEmailError(email, author) {
  if (author !== undefined || email !== "") {
    return EmailUtils.isInvalid(false, email);
  } else {
    return false;
  }
}

function showInvalidNameError(name, author) {
  if (author !== undefined) {
    return name === "";
  } else {
    return false;
  }
}

function saveDisabled(email, name, saving, author) {
  if (EmailUtils.isInvalid(false, email) || saving || name === "") {
    return true;
  } else if (author !== undefined) {
    var author$1 = author;
    if (CourseAuthors__Author.name(author$1) === name) {
      return CourseAuthors__Author.email(author$1) === email;
    } else {
      return false;
    }
  } else {
    return false;
  }
}

function buttonText(saving, author) {
  if (saving) {
    return "Saving";
  } else if (author !== undefined) {
    return "Update Author";
  } else {
    return "Create Author";
  }
}

function emailInputDisabled(author) {
  return author !== undefined;
}

function CourseAuthors__Form(Props) {
  var courseId = Props.courseId;
  var rootPath = Props.rootPath;
  var author = Props.author;
  var addAuthorCB = Props.addAuthorCB;
  var updateAuthorCB = Props.updateAuthorCB;
  var match = React.useState((function () {
          return false;
        }));
  var setSaving = match[1];
  var saving = match[0];
  var match$1 = React.useState((function () {
          if (author !== undefined) {
            return CourseAuthors__Author.name(author);
          } else {
            return "";
          }
        }));
  var setName = match$1[1];
  var name = match$1[0];
  var match$2 = React.useState((function () {
          if (author !== undefined) {
            return CourseAuthors__Author.email(author);
          } else {
            return "";
          }
        }));
  var setEmail = match$2[1];
  var email = match$2[0];
  return React.createElement("div", {
              className: "w-full"
            }, React.createElement(DisablingCover.make, {
                  disabled: saving,
                  children: React.createElement("div", {
                        className: "mx-auto bg-white"
                      }, React.createElement("div", {
                            className: "max-w-2xl p-6 mx-auto"
                          }, React.createElement("h5", {
                                className: "uppercase text-center border-b border-gray-400 pb-2 mb-4"
                              }, author !== undefined ? CourseAuthors__Author.name(author) : "Add new author"), React.createElement("div", undefined, React.createElement("label", {
                                    className: "inline-block tracking-wide text-xs font-semibold mb-2 leading-tight",
                                    htmlFor: "email"
                                  }, "Email"), React.createElement("input", {
                                    className: "appearance-none block w-full bg-white border border-gray-400 rounded py-3 px-4 leading-snug focus:outline-none focus:bg-white focus:border-gray-500",
                                    id: "email",
                                    disabled: emailInputDisabled(author),
                                    placeholder: "Add email here",
                                    type: "email",
                                    value: email,
                                    onChange: (function ($$event) {
                                        return Curry._1(setEmail, $$event.target.value);
                                      })
                                  }), React.createElement(School__InputGroupError.make, {
                                    message: "Enter a valid Email",
                                    active: showInvalidEmailError(email, author)
                                  })), React.createElement("div", {
                                className: "mt-5"
                              }, React.createElement("label", {
                                    className: "inline-block tracking-wide text-xs font-semibold mb-2 leading-tight",
                                    htmlFor: "name"
                                  }, "Name"), React.createElement("input", {
                                    className: "appearance-none block w-full bg-white border border-gray-400 rounded py-3 px-4 leading-snug focus:outline-none focus:bg-white focus:border-gray-500",
                                    id: "name",
                                    placeholder: "Add name here",
                                    type: "text",
                                    value: name,
                                    onChange: (function ($$event) {
                                        return Curry._1(setName, $$event.target.value);
                                      })
                                  }), React.createElement(School__InputGroupError.make, {
                                    message: "Enter a valid name",
                                    active: showInvalidNameError(name, author)
                                  })), React.createElement("div", {
                                className: "w-auto mt-8"
                              }, React.createElement("button", {
                                    className: "w-full btn btn-large btn-primary",
                                    disabled: saveDisabled(email, name, saving, author),
                                    onClick: (function (param) {
                                        return handleButtonClick(courseId, rootPath, author, setSaving, name, email, addAuthorCB, updateAuthorCB, param);
                                      })
                                  }, buttonText(saving, author)))))
                }));
}

var make$2 = CourseAuthors__Form;

exports.str = str;
exports.CreateCourseAuthorQuery = CreateCourseAuthorQuery;
exports.UpdateCourseAuthorQuery = UpdateCourseAuthorQuery;
exports.createCourseAuthorQuery = createCourseAuthorQuery;
exports.updateCourseAuthorQuery = updateCourseAuthorQuery;
exports.handleButtonClick = handleButtonClick;
exports.isInvalidEmail = isInvalidEmail;
exports.showInvalidEmailError = showInvalidEmailError;
exports.showInvalidNameError = showInvalidNameError;
exports.saveDisabled = saveDisabled;
exports.buttonText = buttonText;
exports.emailInputDisabled = emailInputDisabled;
exports.make = make$2;
/* react Not a pure module */
