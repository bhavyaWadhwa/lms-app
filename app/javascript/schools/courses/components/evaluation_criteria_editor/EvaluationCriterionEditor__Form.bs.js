// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var HelpIcon = require("../../../../shared/components/HelpIcon.bs.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var GradeLabel = require("../../../../shared/types/GradeLabel.bs.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../../shared/utils/GraphqlQuery.bs.js");
var DisablingCover = require("../../../../shared/components/DisablingCover.bs.js");
var EvaluationCriterion = require("../../../../shared/types/EvaluationCriterion.bs.js");
var School__InputGroupError = require("../../../shared/components/School__InputGroupError.bs.js");

((require("./EvaluationCriterionEditor__Form.css")));

function str(prim) {
  return prim;
}

var ppx_printed_query = "mutation CreateEvaluationCriterionMutation($name: String!, $courseId: ID!, $maxGrade: Int!, $passGrade: Int!, $gradesAndLabels: [GradeAndLabelInput!]!)  {\ncreateEvaluationCriterion(courseId: $courseId, name: $name, maxGrade: $maxGrade, passGrade: $passGrade, gradesAndLabels: $gradesAndLabels)  {\nevaluationCriterion  {\nid  \nname  \nmaxGrade  \npassGrade  \ngradeLabels  {\ngrade  \nlabel  \n}\n\n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createEvaluationCriterion");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "evaluationCriterion");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      if (match$2 !== undefined) {
        tmp$1 = undefined;
      } else {
        var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
        var match$3 = Js_dict.get(value$4, "id");
        var tmp$2;
        if (match$3 !== undefined) {
          var value$5 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeString(value$5);
          tmp$2 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        } else {
          tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type EvaluationCriterion is missing");
        }
        var match$5 = Js_dict.get(value$4, "name");
        var tmp$3;
        if (match$5 !== undefined) {
          var value$6 = Caml_option.valFromOption(match$5);
          var match$6 = Js_json.decodeString(value$6);
          tmp$3 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        } else {
          tmp$3 = Js_exn.raiseError("graphql_ppx: Field name on type EvaluationCriterion is missing");
        }
        var match$7 = Js_dict.get(value$4, "maxGrade");
        var tmp$4;
        if (match$7 !== undefined) {
          var value$7 = Caml_option.valFromOption(match$7);
          var match$8 = Js_json.decodeNumber(value$7);
          tmp$4 = match$8 !== undefined ? match$8 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$7));
        } else {
          tmp$4 = Js_exn.raiseError("graphql_ppx: Field maxGrade on type EvaluationCriterion is missing");
        }
        var match$9 = Js_dict.get(value$4, "passGrade");
        var tmp$5;
        if (match$9 !== undefined) {
          var value$8 = Caml_option.valFromOption(match$9);
          var match$10 = Js_json.decodeNumber(value$8);
          tmp$5 = match$10 !== undefined ? match$10 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$8));
        } else {
          tmp$5 = Js_exn.raiseError("graphql_ppx: Field passGrade on type EvaluationCriterion is missing");
        }
        var match$11 = Js_dict.get(value$4, "gradeLabels");
        tmp$1 = {
          id: tmp$2,
          name: tmp$3,
          maxGrade: tmp$4,
          passGrade: tmp$5,
          gradeLabels: match$11 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$11))).map((function (value) {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var match = Js_dict.get(value$1, "grade");
                    var tmp;
                    if (match !== undefined) {
                      var value$2 = Caml_option.valFromOption(match);
                      var match$1 = Js_json.decodeNumber(value$2);
                      tmp = match$1 !== undefined ? match$1 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$2));
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Field grade on type GradeAndLabel is missing");
                    }
                    var match$2 = Js_dict.get(value$1, "label");
                    var tmp$1;
                    if (match$2 !== undefined) {
                      var value$3 = Caml_option.valFromOption(match$2);
                      var match$3 = Js_json.decodeString(value$3);
                      tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                    } else {
                      tmp$1 = Js_exn.raiseError("graphql_ppx: Field label on type GradeAndLabel is missing");
                    }
                    return {
                            grade: tmp,
                            label: tmp$1
                          };
                  })) : Js_exn.raiseError("graphql_ppx: Field gradeLabels on type EvaluationCriterion is missing")
        };
      }
    } else {
      tmp$1 = undefined;
    }
    tmp = {
      evaluationCriterion: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field createEvaluationCriterion on type Mutation is missing");
  }
  return {
          createEvaluationCriterion: tmp
        };
}

function json_of_GradeAndLabelInput(value) {
  return Js_dict.fromArray([
                /* tuple */[
                  "grade",
                  value.grade
                ],
                /* tuple */[
                  "label",
                  value.label
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function make(name, courseId, maxGrade, passGrade, gradesAndLabels, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "courseId",
                    courseId
                  ],
                  /* tuple */[
                    "maxGrade",
                    maxGrade
                  ],
                  /* tuple */[
                    "passGrade",
                    passGrade
                  ],
                  /* tuple */[
                    "gradesAndLabels",
                    gradesAndLabels.map(json_of_GradeAndLabelInput)
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var name = variables.name;
  var courseId = variables.courseId;
  var maxGrade = variables.maxGrade;
  var passGrade = variables.passGrade;
  var gradesAndLabels = variables.gradesAndLabels;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "courseId",
                    courseId
                  ],
                  /* tuple */[
                    "maxGrade",
                    maxGrade
                  ],
                  /* tuple */[
                    "passGrade",
                    passGrade
                  ],
                  /* tuple */[
                    "gradesAndLabels",
                    gradesAndLabels.map(json_of_GradeAndLabelInput)
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(name, courseId, maxGrade, passGrade, gradesAndLabels, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "courseId",
                  courseId
                ],
                /* tuple */[
                  "maxGrade",
                  maxGrade
                ],
                /* tuple */[
                  "passGrade",
                  passGrade
                ],
                /* tuple */[
                  "gradesAndLabels",
                  gradesAndLabels.map(json_of_GradeAndLabelInput)
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, name, courseId, maxGrade, passGrade, gradesAndLabels, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "name",
                      name
                    ],
                    /* tuple */[
                      "courseId",
                      courseId
                    ],
                    /* tuple */[
                      "maxGrade",
                      maxGrade
                    ],
                    /* tuple */[
                      "passGrade",
                      passGrade
                    ],
                    /* tuple */[
                      "gradesAndLabels",
                      gradesAndLabels.map(json_of_GradeAndLabelInput)
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var CreateEvaluationCriterionQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  json_of_GradeAndLabelInput: json_of_GradeAndLabelInput,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var ppx_printed_query$1 = "mutation UpdateEvaluationCriterionMutation($id: ID!, $name: String!, $gradesAndLabels: [GradeAndLabelInput!]!)  {\nupdateEvaluationCriterion(id: $id, name: $name, gradesAndLabels: $gradesAndLabels)  {\nevaluationCriterion  {\nid  \nname  \nmaxGrade  \npassGrade  \ngradeLabels  {\ngrade  \nlabel  \n}\n\n}\n\n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updateEvaluationCriterion");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "evaluationCriterion");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      if (match$2 !== undefined) {
        tmp$1 = undefined;
      } else {
        var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
        var match$3 = Js_dict.get(value$4, "id");
        var tmp$2;
        if (match$3 !== undefined) {
          var value$5 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeString(value$5);
          tmp$2 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        } else {
          tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type EvaluationCriterion is missing");
        }
        var match$5 = Js_dict.get(value$4, "name");
        var tmp$3;
        if (match$5 !== undefined) {
          var value$6 = Caml_option.valFromOption(match$5);
          var match$6 = Js_json.decodeString(value$6);
          tmp$3 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        } else {
          tmp$3 = Js_exn.raiseError("graphql_ppx: Field name on type EvaluationCriterion is missing");
        }
        var match$7 = Js_dict.get(value$4, "maxGrade");
        var tmp$4;
        if (match$7 !== undefined) {
          var value$7 = Caml_option.valFromOption(match$7);
          var match$8 = Js_json.decodeNumber(value$7);
          tmp$4 = match$8 !== undefined ? match$8 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$7));
        } else {
          tmp$4 = Js_exn.raiseError("graphql_ppx: Field maxGrade on type EvaluationCriterion is missing");
        }
        var match$9 = Js_dict.get(value$4, "passGrade");
        var tmp$5;
        if (match$9 !== undefined) {
          var value$8 = Caml_option.valFromOption(match$9);
          var match$10 = Js_json.decodeNumber(value$8);
          tmp$5 = match$10 !== undefined ? match$10 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$8));
        } else {
          tmp$5 = Js_exn.raiseError("graphql_ppx: Field passGrade on type EvaluationCriterion is missing");
        }
        var match$11 = Js_dict.get(value$4, "gradeLabels");
        tmp$1 = {
          id: tmp$2,
          name: tmp$3,
          maxGrade: tmp$4,
          passGrade: tmp$5,
          gradeLabels: match$11 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$11))).map((function (value) {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var match = Js_dict.get(value$1, "grade");
                    var tmp;
                    if (match !== undefined) {
                      var value$2 = Caml_option.valFromOption(match);
                      var match$1 = Js_json.decodeNumber(value$2);
                      tmp = match$1 !== undefined ? match$1 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$2));
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Field grade on type GradeAndLabel is missing");
                    }
                    var match$2 = Js_dict.get(value$1, "label");
                    var tmp$1;
                    if (match$2 !== undefined) {
                      var value$3 = Caml_option.valFromOption(match$2);
                      var match$3 = Js_json.decodeString(value$3);
                      tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                    } else {
                      tmp$1 = Js_exn.raiseError("graphql_ppx: Field label on type GradeAndLabel is missing");
                    }
                    return {
                            grade: tmp,
                            label: tmp$1
                          };
                  })) : Js_exn.raiseError("graphql_ppx: Field gradeLabels on type EvaluationCriterion is missing")
        };
      }
    } else {
      tmp$1 = undefined;
    }
    tmp = {
      evaluationCriterion: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field updateEvaluationCriterion on type Mutation is missing");
  }
  return {
          updateEvaluationCriterion: tmp
        };
}

function json_of_GradeAndLabelInput$1(value) {
  return Js_dict.fromArray([
                /* tuple */[
                  "grade",
                  value.grade
                ],
                /* tuple */[
                  "label",
                  value.label
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function make$1(id, name, gradesAndLabels, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "gradesAndLabels",
                    gradesAndLabels.map(json_of_GradeAndLabelInput$1)
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var id = variables.id;
  var name = variables.name;
  var gradesAndLabels = variables.gradesAndLabels;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "gradesAndLabels",
                    gradesAndLabels.map(json_of_GradeAndLabelInput$1)
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeVariables$1(id, name, gradesAndLabels, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "gradesAndLabels",
                  gradesAndLabels.map(json_of_GradeAndLabelInput$1)
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$1(graphql_ppx_use_json_variables_fn, id, name, gradesAndLabels, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "id",
                      id
                    ],
                    /* tuple */[
                      "name",
                      name
                    ],
                    /* tuple */[
                      "gradesAndLabels",
                      gradesAndLabels.map(json_of_GradeAndLabelInput$1)
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$1 = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002$1
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var UpdateEvaluationCriterionQuery = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  json_of_GradeAndLabelInput: json_of_GradeAndLabelInput$1,
  make: make$1,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

function formClasses(value) {
  if (value) {
    return "drawer-right-form w-full opacity-50";
  } else {
    return "drawer-right-form w-full";
  }
}

var possibleGradeValues = /* :: */[
  1,
  /* :: */[
    2,
    /* :: */[
      3,
      /* :: */[
        4,
        /* :: */[
          5,
          /* :: */[
            6,
            /* :: */[
              7,
              /* :: */[
                8,
                /* :: */[
                  9,
                  /* :: */[
                    10,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

function gradeBarBulletClasses(selected, passed, empty) {
  var classes = selected ? " grade-bar__pointer--selected" : " ";
  if (empty) {
    return classes + " grade-bar__pointer--pulse";
  } else if (passed) {
    return classes + " grade-bar__pointer--passed";
  } else {
    return classes + " grade-bar__pointer--failed";
  }
}

function updateMaxGrade(value, state, setState) {
  if (value < state.passGrade) {
    return Curry._1(setState, (function (state) {
                  return {
                          name: state.name,
                          maxGrade: value,
                          passGrade: value,
                          gradesAndLabels: state.gradesAndLabels,
                          saving: state.saving,
                          dirty: state.dirty
                        };
                }));
  } else {
    return Curry._1(setState, (function (state) {
                  return {
                          name: state.name,
                          maxGrade: value,
                          passGrade: state.passGrade,
                          gradesAndLabels: state.gradesAndLabels,
                          saving: state.saving,
                          dirty: state.dirty
                        };
                }));
  }
}

function updatePassGrade(value, setState) {
  return Curry._1(setState, (function (state) {
                return {
                        name: state.name,
                        maxGrade: state.maxGrade,
                        passGrade: value,
                        gradesAndLabels: state.gradesAndLabels,
                        saving: state.saving,
                        dirty: state.dirty
                      };
              }));
}

function updateGradeLabel(value, gradeAndLabel, state, setState) {
  var updatedGradeAndLabel = GradeLabel.update(value, gradeAndLabel);
  var gradesAndLabels = $$Array.map((function (gl) {
          if (GradeLabel.grade(gl) === GradeLabel.grade(updatedGradeAndLabel)) {
            return updatedGradeAndLabel;
          } else {
            return gl;
          }
        }), state.gradesAndLabels);
  return Curry._1(setState, (function (state) {
                return {
                        name: state.name,
                        maxGrade: state.maxGrade,
                        passGrade: state.passGrade,
                        gradesAndLabels: gradesAndLabels,
                        saving: state.saving,
                        dirty: true
                      };
              }));
}

function updateEvaluationCriterion(state, setState, addOrUpdateCriterionCB, criterion) {
  Curry._1(setState, (function (state) {
          return {
                  name: state.name,
                  maxGrade: state.maxGrade,
                  passGrade: state.passGrade,
                  gradesAndLabels: state.gradesAndLabels,
                  saving: true,
                  dirty: state.dirty
                };
        }));
  var jsGradeAndLabelArray = $$Array.map(GradeLabel.asJsObject, state.gradesAndLabels.filter((function (gradesAndLabel) {
              return GradeLabel.grade(gradesAndLabel) <= state.maxGrade;
            })));
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make$1(EvaluationCriterion.id(criterion), state.name, jsGradeAndLabelArray, /* () */0)).then((function (result) {
          var match = result.updateEvaluationCriterion.evaluationCriterion;
          if (match !== undefined) {
            var updatedCriterion = EvaluationCriterion.makeFromJs(Caml_option.valFromOption(match));
            Curry._1(addOrUpdateCriterionCB, updatedCriterion);
            Curry._1(setState, (function (state) {
                    return {
                            name: state.name,
                            maxGrade: state.maxGrade,
                            passGrade: state.passGrade,
                            gradesAndLabels: state.gradesAndLabels,
                            saving: false,
                            dirty: state.dirty
                          };
                  }));
          } else {
            Curry._1(setState, (function (state) {
                    return {
                            name: state.name,
                            maxGrade: state.maxGrade,
                            passGrade: state.passGrade,
                            gradesAndLabels: state.gradesAndLabels,
                            saving: false,
                            dirty: state.dirty
                          };
                  }));
          }
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function createEvaluationCriterion(state, setState, addOrUpdateCriterionCB, courseId) {
  Curry._1(setState, (function (state) {
          return {
                  name: state.name,
                  maxGrade: state.maxGrade,
                  passGrade: state.passGrade,
                  gradesAndLabels: state.gradesAndLabels,
                  saving: true,
                  dirty: state.dirty
                };
        }));
  var jsGradeAndLabelArray = $$Array.map(GradeLabel.asJsObject, state.gradesAndLabels.filter((function (gradesAndLabel) {
              return GradeLabel.grade(gradesAndLabel) <= state.maxGrade;
            })));
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make(state.name, courseId, state.maxGrade, state.passGrade, jsGradeAndLabelArray, /* () */0)).then((function (result) {
          var match = result.createEvaluationCriterion.evaluationCriterion;
          if (match !== undefined) {
            var newCriterion = EvaluationCriterion.makeFromJs(Caml_option.valFromOption(match));
            Curry._1(addOrUpdateCriterionCB, newCriterion);
            Curry._1(setState, (function (state) {
                    return {
                            name: state.name,
                            maxGrade: state.maxGrade,
                            passGrade: state.passGrade,
                            gradesAndLabels: state.gradesAndLabels,
                            saving: false,
                            dirty: state.dirty
                          };
                  }));
          } else {
            Curry._1(setState, (function (state) {
                    return {
                            name: state.name,
                            maxGrade: state.maxGrade,
                            passGrade: state.passGrade,
                            gradesAndLabels: state.gradesAndLabels,
                            saving: false,
                            dirty: state.dirty
                          };
                  }));
          }
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function updateName(setState, value) {
  return Curry._1(setState, (function (state) {
                return {
                        name: value,
                        maxGrade: state.maxGrade,
                        passGrade: state.passGrade,
                        gradesAndLabels: state.gradesAndLabels,
                        saving: state.saving,
                        dirty: true
                      };
              }));
}

function saveDisabled(state) {
  var hasValidName = $$String.trim(state.name).length !== 0;
  if (!state.dirty || state.saving) {
    return true;
  } else {
    return !hasValidName;
  }
}

function labelClasses(grade, passGrade) {
  return "w-12 p-3 text-center  mr-3 rounded-lg border  leading-tight " + (
          Caml_obj.caml_lessthan(grade, passGrade) ? "bg-red-300 text-red-700 border-red-500" : "bg-green-300 text-green-700 border-green-500"
        );
}

function labels(state, setState) {
  return $$Array.map((function (gradeAndLabel) {
                var grade = GradeLabel.grade(gradeAndLabel);
                return React.createElement("div", {
                            key: String(grade),
                            className: "flex flex-wrap mt-2"
                          }, React.createElement("div", {
                                className: labelClasses(grade, state.passGrade)
                              }, String(grade)), React.createElement("div", {
                                className: "flex-1"
                              }, React.createElement("input", {
                                    className: " appearance-none border rounded w-full p-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline",
                                    id: "grade-label-for-" + String(grade),
                                    maxLength: 40,
                                    placeholder: "Label for grade " + String(GradeLabel.grade(gradeAndLabel)),
                                    type: "text",
                                    value: GradeLabel.label(gradeAndLabel),
                                    onChange: (function ($$event) {
                                        return updateGradeLabel($$event.target.value, gradeAndLabel, state, setState);
                                      })
                                  })));
              }), state.gradesAndLabels.filter((function (gnl) {
                    return GradeLabel.grade(gnl) <= state.maxGrade;
                  })));
}

function EvaluationCriterionEditor__Form(Props) {
  var evaluationCriterion = Props.evaluationCriterion;
  var courseId = Props.courseId;
  var addOrUpdateCriterionCB = Props.addOrUpdateCriterionCB;
  var match = React.useState((function () {
          if (evaluationCriterion !== undefined) {
            var ec = evaluationCriterion;
            return {
                    name: EvaluationCriterion.name(ec),
                    maxGrade: EvaluationCriterion.maxGrade(ec),
                    passGrade: EvaluationCriterion.passGrade(ec),
                    gradesAndLabels: EvaluationCriterion.gradesAndLabels(ec),
                    saving: false,
                    dirty: false
                  };
          } else {
            return {
                    name: "",
                    maxGrade: 5,
                    passGrade: 2,
                    gradesAndLabels: $$Array.of_list(List.map(GradeLabel.empty, possibleGradeValues)),
                    saving: false,
                    dirty: false
                  };
          }
        }));
  var setState = match[1];
  var state = match[0];
  var tmp;
  if (evaluationCriterion !== undefined) {
    var criterion = evaluationCriterion;
    tmp = React.createElement("button", {
          className: "w-full btn btn-large btn-primary mt-3",
          disabled: saveDisabled(state),
          onClick: (function (param) {
              return updateEvaluationCriterion(state, setState, addOrUpdateCriterionCB, criterion);
            })
        }, "Update Criterion");
  } else {
    tmp = React.createElement("button", {
          className: "w-full btn btn-large btn-primary mt-3",
          disabled: saveDisabled(state),
          onClick: (function (param) {
              return createEvaluationCriterion(state, setState, addOrUpdateCriterionCB, courseId);
            })
        }, "Create Criterion");
  }
  return React.createElement("div", {
              className: "mx-auto bg-white"
            }, React.createElement("div", {
                  className: "max-w-2xl p-6 mx-auto"
                }, React.createElement("h5", {
                      className: "uppercase text-center border-b border-gray-400 pb-2"
                    }, evaluationCriterion !== undefined ? EvaluationCriterion.name(evaluationCriterion) : "Add Evaluation Criterion"), React.createElement(DisablingCover.make, {
                      disabled: state.saving,
                      message: evaluationCriterion !== undefined ? "Updating..." : "Saving...",
                      children: null
                    }, React.createElement("div", {
                          key: "evaluation-criterion-editor",
                          className: "mt-3"
                        }, React.createElement("div", {
                              className: "mt-5"
                            }, React.createElement("label", {
                                  className: "inline-block tracking-wide text-xs font-semibold ",
                                  htmlFor: "name"
                                }, "Name"), React.createElement("input", {
                                  className: "appearance-none block w-full bg-white border border-gray-400 rounded py-3 px-4 mt-2 leading-tight focus:outline-none focus:bg-white focus:border-gray-500",
                                  id: "name",
                                  maxLength: 50,
                                  placeholder: "Evaluation criterion name",
                                  type: "text",
                                  value: state.name,
                                  onChange: (function ($$event) {
                                      return updateName(setState, $$event.target.value);
                                    })
                                }), React.createElement(School__InputGroupError.make, {
                                  message: "Enter a valid name",
                                  active: state.dirty && $$String.trim(state.name).length < 1
                                }))), React.createElement("div", {
                          className: "mx-auto"
                        }, React.createElement("div", {
                              className: "max-w-2xl pt-6 mx-auto"
                            }, React.createElement("div", {
                                  className: "mb-4"
                                }, React.createElement("span", {
                                      className: "inline-block tracking-wide text-sm font-semibold mr-2",
                                      htmlFor: "max_grades"
                                    }, "Maximum grade is"), evaluationCriterion !== undefined ? React.createElement("span", {
                                        className: "cursor-not-allowed inline-block bg-white border-b-2 text-2xl font-semibold text-center border-blue px-3 py-2 leading-tight rounded-none focus:outline-none"
                                      }, String(state.maxGrade)) : React.createElement("select", {
                                        className: "cursor-pointer inline-block appearance-none bg-white border-b-2 text-2xl font-semibold text-center border-blue hover:border-gray-500 px-3 py-2 leading-tight rounded-none focus:outline-none",
                                        id: "max_grade",
                                        value: String(state.maxGrade),
                                        onChange: (function ($$event) {
                                            return updateMaxGrade(Caml_format.caml_int_of_string($$event.target.value), state, setState);
                                          })
                                      }, $$Array.of_list(List.map((function (possibleGradeValue) {
                                                  return React.createElement("option", {
                                                              key: String(possibleGradeValue),
                                                              value: String(possibleGradeValue)
                                                            }, String(possibleGradeValue));
                                                }), List.filter((function (g) {
                                                        return g !== 1;
                                                      }))(possibleGradeValues)))), React.createElement("span", {
                                      className: "inline-block tracking-wide text-sm font-semibold mx-2",
                                      htmlFor: "pass_grades"
                                    }, "and the passing grade is"), evaluationCriterion !== undefined ? React.createElement("span", {
                                        className: "cursor-not-allowed inline-block appearance-none bg-white border-b-2 text-2xl font-semibold text-center border-blue px-3 py-2 leading-tight rounded-none"
                                      }, String(state.passGrade)) : React.createElement("select", {
                                        className: "cursor-pointer inline-block appearance-none bg-white border-b-2 text-2xl font-semibold text-center border-blue hover:border-gray-500 px-3 py-2 rounded-none leading-tight focus:outline-none",
                                        id: "pass_grade",
                                        value: String(state.passGrade),
                                        onChange: (function ($$event) {
                                            return updatePassGrade(Caml_format.caml_int_of_string($$event.target.value), setState);
                                          })
                                      }, $$Array.of_list(List.map((function (possibleGradeValue) {
                                                  return React.createElement("option", {
                                                              key: String(possibleGradeValue),
                                                              value: String(possibleGradeValue)
                                                            }, String(possibleGradeValue));
                                                }), List.filter((function (g) {
                                                        return g <= state.maxGrade;
                                                      }))(possibleGradeValues))))), React.createElement("div", {
                                  className: "flex justify-between"
                                }, React.createElement("div", {
                                      className: "flex items-center"
                                    }, React.createElement("label", {
                                          className: "block tracking-wide text-xs font-semibold",
                                          htmlFor: "grades"
                                        }, "Grade and Labels"), React.createElement(HelpIcon.make, {
                                          className: "ml-2",
                                          link: "https://docs.pupilfirst.com/#/evaluation_criteria",
                                          children: "Assign labels for each grade, to reflect in grade cards for students and coaches"
                                        })), React.createElement("div", {
                                      className: "flex"
                                    }, React.createElement("div", {
                                          className: "flex justify-center items-center ml-4"
                                        }, React.createElement("span", {
                                              className: "grade-bar__pointer-legend grade-bar__pointer-legend-failed"
                                            }), React.createElement("span", {
                                              className: "ml-2 text-xs"
                                            }, "Fail")), React.createElement("div", {
                                          className: "flex justify-center items-center ml-4"
                                        }, React.createElement("span", {
                                              className: "grade-bar__pointer-legend grade-bar__pointer-legend-passed"
                                            }), React.createElement("span", {
                                              className: "ml-2 text-xs"
                                            }, "Pass")))), React.createElement("div", {
                                  "aria-label": "label-editor"
                                }, labels(state, setState)), React.createElement("div", {
                                  className: "mt-3 mb-3 text-xs"
                                }, React.createElement("span", {
                                      className: "leading-normal"
                                    }, React.createElement("strong", undefined, "Important:"), " The values for maximum and passing grades cannot be modified once a criterion is created. Labels given to each grade can be edited later on.")), React.createElement("div", {
                                  className: "flex"
                                }, tmp))))));
}

var make$2 = EvaluationCriterionEditor__Form;

exports.str = str;
exports.CreateEvaluationCriterionQuery = CreateEvaluationCriterionQuery;
exports.UpdateEvaluationCriterionQuery = UpdateEvaluationCriterionQuery;
exports.formClasses = formClasses;
exports.possibleGradeValues = possibleGradeValues;
exports.gradeBarBulletClasses = gradeBarBulletClasses;
exports.updateMaxGrade = updateMaxGrade;
exports.updatePassGrade = updatePassGrade;
exports.updateGradeLabel = updateGradeLabel;
exports.updateEvaluationCriterion = updateEvaluationCriterion;
exports.createEvaluationCriterion = createEvaluationCriterion;
exports.updateName = updateName;
exports.saveDisabled = saveDisabled;
exports.labelClasses = labelClasses;
exports.labels = labels;
exports.make = make$2;
/*  Not a pure module */
