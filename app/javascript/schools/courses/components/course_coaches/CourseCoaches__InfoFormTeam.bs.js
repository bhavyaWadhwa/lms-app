// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FaIcon = require("../../../../shared/components/FaIcon.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var WindowUtils = require("../../../../shared/utils/WindowUtils.bs.js");
var GraphqlQuery = require("../../../../shared/utils/GraphqlQuery.bs.js");
var CourseCoaches__Team = require("../../types/course_coaches/CourseCoaches__Team.bs.js");
var CourseCoaches__CourseCoach = require("../../types/course_coaches/CourseCoaches__CourseCoach.bs.js");

function str(prim) {
  return prim;
}

function deleteIconClasses(deleting) {
  if (deleting) {
    return "fas fa-spinner fa-pulse";
  } else {
    return "far fa-trash-alt";
  }
}

var ppx_printed_query = "mutation ($teamId: ID!, $coachId: ID!)  {\ndeleteCoachTeamEnrollment(teamId: $teamId, coachId: $coachId)  {\nsuccess  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "deleteCoachTeamEnrollment");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type DeleteCoachTeamEnrollmentPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field deleteCoachTeamEnrollment on type Mutation is missing");
  }
  return {
          deleteCoachTeamEnrollment: tmp
        };
}

function make(teamId, coachId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "teamId",
                    teamId
                  ],
                  /* tuple */[
                    "coachId",
                    coachId
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var teamId = variables.teamId;
  var coachId = variables.coachId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "teamId",
                    teamId
                  ],
                  /* tuple */[
                    "coachId",
                    coachId
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(teamId, coachId, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "teamId",
                  teamId
                ],
                /* tuple */[
                  "coachId",
                  coachId
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, teamId, coachId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "teamId",
                      teamId
                    ],
                    /* tuple */[
                      "coachId",
                      coachId
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var DeleteCoachTeamEnrollmentQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function deleteTeamEnrollment(team, coach, setDeleting, removeTeamEnrollmentCB, $$event) {
  $$event.preventDefault();
  return WindowUtils.confirm(undefined, "Are you sure you want to remove " + (CourseCoaches__Team.name(team) + " from the list of assigned teams?"), (function (param) {
                Curry._1(setDeleting, (function (param) {
                        return true;
                      }));
                (function (eta) {
                        return GraphqlQuery.sendQuery(undefined, eta);
                      })(make(CourseCoaches__Team.id(team), CourseCoaches__CourseCoach.id(coach), /* () */0)).then((function (response) {
                        if (response.deleteCoachTeamEnrollment.success) {
                          Curry._1(removeTeamEnrollmentCB, CourseCoaches__Team.id(team));
                        } else {
                          Curry._1(setDeleting, (function (param) {
                                  return false;
                                }));
                        }
                        return Promise.resolve(response);
                      }));
                return /* () */0;
              }));
}

function CourseCoaches__InfoFormTeam(Props) {
  var team = Props.team;
  var coach = Props.coach;
  var removeTeamEnrollmentCB = Props.removeTeamEnrollmentCB;
  var match = React.useState((function () {
          return false;
        }));
  var setDeleting = match[1];
  return React.createElement("div", {
              key: CourseCoaches__Team.id(team),
              "aria-label": "Team " + CourseCoaches__Team.name(team),
              className: "flex items-center justify-between bg-gray-100 text-xs text-gray-900 border rounded pl-3 mt-2"
            }, React.createElement("div", {
                  className: "flex flex-1 justify-between items-center"
                }, React.createElement("div", {
                      className: "font-semibold w-1/2"
                    }, CourseCoaches__Team.students(team).map((function (student, index) {
                            return React.createElement("div", {
                                        key: String(index),
                                        className: "p-1"
                                      }, student);
                          }))), CourseCoaches__Team.students(team).length > 1 ? React.createElement("div", {
                        className: "w-1/2"
                      }, React.createElement("p", {
                            className: "text-tiny"
                          }, "Team"), React.createElement("p", {
                            className: "font-semibold"
                          }, CourseCoaches__Team.name(team))) : null), React.createElement("div", {
                  className: "w-10 text-center flex-shrink-0 hover:text-gray-900 hover:bg-gray-200"
                }, React.createElement("button", {
                      className: "p-3",
                      title: "Delete " + CourseCoaches__Team.name(team),
                      onClick: (function (param) {
                          return deleteTeamEnrollment(team, coach, setDeleting, removeTeamEnrollmentCB, param);
                        })
                    }, React.createElement(FaIcon.make, {
                          classes: match[0] ? "fas fa-spinner fa-pulse" : "far fa-trash-alt"
                        }))));
}

var make$1 = CourseCoaches__InfoFormTeam;

exports.str = str;
exports.deleteIconClasses = deleteIconClasses;
exports.DeleteCoachTeamEnrollmentQuery = DeleteCoachTeamEnrollmentQuery;
exports.deleteTeamEnrollment = deleteTeamEnrollment;
exports.make = make$1;
/* react Not a pure module */
