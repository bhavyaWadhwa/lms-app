// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Avatar = require("../../../../shared/Avatar.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ArrayUtils = require("../../../../shared/utils/ArrayUtils.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var OptionUtils = require("../../../../shared/utils/OptionUtils.bs.js");
var GraphqlQuery = require("../../../../shared/utils/GraphqlQuery.bs.js");
var SkeletonLoading = require("../../../../shared/components/SkeletonLoading.bs.js");
var CourseCoaches__Team = require("../../types/course_coaches/CourseCoaches__Team.bs.js");
var CourseCoaches__CourseCoach = require("../../types/course_coaches/CourseCoaches__CourseCoach.bs.js");
var CourseCoaches__InfoFormTeam = require("./CourseCoaches__InfoFormTeam.bs.js");

function str(prim) {
  return prim;
}

var initialStats = {
  reviewedSubmissions: 0,
  pendingSubmissions: 0
};

var initialState_teams = [];

var initialState = {
  teams: initialState_teams,
  loading: true,
  stats: initialStats
};

function reducer(state, action) {
  if (action.tag) {
    var id = action[0];
    return {
            teams: state.teams.filter((function (team) {
                    return CourseCoaches__Team.id(team) !== id;
                  })),
            loading: state.loading,
            stats: state.stats
          };
  } else {
    return {
            teams: action[0],
            loading: false,
            stats: action[1]
          };
  }
}

var ppx_printed_query = "query CoachInfoQuery($courseId: ID!, $coachId: ID!)  {\nteams(courseId: $courseId, coachId: $coachId, first: 100)  {\nnodes  {\nid  \nname  \nstudents  {\nname  \n}\n\n}\n\n}\n\ncoachStats(courseId: $courseId, coachId: $coachId)  {\nreviewedSubmissions  \npendingSubmissions  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "teams");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "nodes");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      tmp$1 = match$2 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$3)).map((function (value) {
                var match = Js_json.decodeNull(value);
                if (match !== undefined) {
                  return ;
                } else {
                  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                  var match$1 = Js_dict.get(value$1, "id");
                  var tmp;
                  if (match$1 !== undefined) {
                    var value$2 = Caml_option.valFromOption(match$1);
                    var match$2 = Js_json.decodeString(value$2);
                    tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field id on type Team is missing");
                  }
                  var match$3 = Js_dict.get(value$1, "name");
                  var tmp$1;
                  if (match$3 !== undefined) {
                    var value$3 = Caml_option.valFromOption(match$3);
                    var match$4 = Js_json.decodeString(value$3);
                    tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  } else {
                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type Team is missing");
                  }
                  var match$5 = Js_dict.get(value$1, "students");
                  return {
                          id: tmp,
                          name: tmp$1,
                          students: match$5 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$5))).map((function (value) {
                                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                                    var match = Js_dict.get(value$1, "name");
                                    var tmp;
                                    if (match !== undefined) {
                                      var value$2 = Caml_option.valFromOption(match);
                                      var match$1 = Js_json.decodeString(value$2);
                                      tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                                    } else {
                                      tmp = Js_exn.raiseError("graphql_ppx: Field name on type Student is missing");
                                    }
                                    return {
                                            name: tmp
                                          };
                                  })) : Js_exn.raiseError("graphql_ppx: Field students on type Team is missing")
                        };
                }
              }));
    } else {
      tmp$1 = undefined;
    }
    tmp = {
      nodes: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field teams on type Query is missing");
  }
  var match$3 = Js_dict.get(value$1, "coachStats");
  var tmp$2;
  if (match$3 !== undefined) {
    var value$4 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$3)));
    var match$4 = Js_dict.get(value$4, "reviewedSubmissions");
    var tmp$3;
    if (match$4 !== undefined) {
      var value$5 = Caml_option.valFromOption(match$4);
      var match$5 = Js_json.decodeNumber(value$5);
      tmp$3 = match$5 !== undefined ? match$5 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$5));
    } else {
      tmp$3 = Js_exn.raiseError("graphql_ppx: Field reviewedSubmissions on type CoachStats is missing");
    }
    var match$6 = Js_dict.get(value$4, "pendingSubmissions");
    var tmp$4;
    if (match$6 !== undefined) {
      var value$6 = Caml_option.valFromOption(match$6);
      var match$7 = Js_json.decodeNumber(value$6);
      tmp$4 = match$7 !== undefined ? match$7 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$6));
    } else {
      tmp$4 = Js_exn.raiseError("graphql_ppx: Field pendingSubmissions on type CoachStats is missing");
    }
    tmp$2 = {
      reviewedSubmissions: tmp$3,
      pendingSubmissions: tmp$4
    };
  } else {
    tmp$2 = Js_exn.raiseError("graphql_ppx: Field coachStats on type Query is missing");
  }
  return {
          teams: tmp,
          coachStats: tmp$2
        };
}

function make(courseId, coachId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "courseId",
                    courseId
                  ],
                  /* tuple */[
                    "coachId",
                    coachId
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var courseId = variables.courseId;
  var coachId = variables.coachId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "courseId",
                    courseId
                  ],
                  /* tuple */[
                    "coachId",
                    coachId
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(courseId, coachId, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "courseId",
                  courseId
                ],
                /* tuple */[
                  "coachId",
                  coachId
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, courseId, coachId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "courseId",
                      courseId
                    ],
                    /* tuple */[
                      "coachId",
                      coachId
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var CoachInfoQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function loadCoachTeams(courseId, coachId, send) {
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make(courseId, coachId, /* () */0)).then((function (result) {
          var coachTeams = OptionUtils.mapWithDefault(CourseCoaches__Team.makeArrayFromJs, [], result.teams.nodes);
          var stats_reviewedSubmissions = result.coachStats.reviewedSubmissions;
          var stats_pendingSubmissions = result.coachStats.pendingSubmissions;
          var stats = {
            reviewedSubmissions: stats_reviewedSubmissions,
            pendingSubmissions: stats_pendingSubmissions
          };
          Curry._1(send, /* LoadCoachInfo */Block.__(0, [
                  coachTeams,
                  stats
                ]));
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function removeTeamEnrollment(send, teamId) {
  return Curry._1(send, /* RemoveTeam */Block.__(1, [teamId]));
}

function CourseCoaches__InfoForm(Props) {
  var courseId = Props.courseId;
  var coach = Props.coach;
  var match = React.useReducer(reducer, initialState);
  var send = match[1];
  var state = match[0];
  React.useEffect((function () {
          loadCoachTeams(courseId, CourseCoaches__CourseCoach.id(coach), send);
          return ;
        }), [courseId]);
  var match$1 = CourseCoaches__CourseCoach.avatarUrl(coach);
  return React.createElement("div", {
              className: "mx-auto"
            }, React.createElement("div", {
                  className: "py-6 border-b border-gray-400 bg-gray-100"
                }, React.createElement("div", {
                      className: "max-w-2xl mx-auto"
                    }, React.createElement("div", {
                          className: "flex"
                        }, match$1 !== undefined ? React.createElement("img", {
                                className: "w-12 h-12 rounded-full mr-4",
                                src: match$1
                              }) : React.createElement(Avatar.make, {
                                name: CourseCoaches__CourseCoach.name(coach),
                                className: "w-12 h-12 mr-4"
                              }), React.createElement("div", {
                              className: "text-sm flex flex-col justify-center"
                            }, React.createElement("div", {
                                  className: "text-black font-bold inline-block"
                                }, CourseCoaches__CourseCoach.name(coach)), React.createElement("div", {
                                  className: "text-gray-600 inline-block"
                                }, CourseCoaches__CourseCoach.email(coach)))))), React.createElement("div", {
                  className: "max-w-2xl mx-auto"
                }, state.loading ? React.createElement("div", {
                        className: "py-3 flex"
                      }, SkeletonLoading.card("w-full mr-2", /* () */0), SkeletonLoading.card("w-full ml-2", /* () */0)) : React.createElement("div", {
                        className: "py-3 flex mt-4"
                      }, React.createElement("div", {
                            "aria-label": "Reviewed Submissions",
                            className: "w-full mr-2 rounded-lg shadow px-5 py-6"
                          }, React.createElement("div", {
                                className: "flex justify-between items-center"
                              }, React.createElement("span", undefined, "Reviewed submissions"), React.createElement("span", {
                                    className: "text-2xl font-semibold"
                                  }, String(state.stats.reviewedSubmissions)))), React.createElement("div", {
                            "aria-label": "Pending Submissions",
                            className: "w-full ml-2 rounded-lg shadow px-5 py-6"
                          }, React.createElement("div", {
                                className: "flex justify-between items-center"
                              }, React.createElement("span", undefined, "Pending submissions"), React.createElement("span", {
                                    className: "text-2xl font-semibold"
                                  }, String(state.stats.pendingSubmissions))))), React.createElement("span", {
                      className: "inline-block mr-1 my-2 text-sm font-semibold pt-5"
                    }, "Students assigned to coach:"), state.loading ? React.createElement("div", {
                        className: "max-w-2xl mx-auto p-3"
                      }, SkeletonLoading.multiple(2, SkeletonLoading.paragraph(/* () */0))) : React.createElement("div", undefined, ArrayUtils.isEmpty(state.teams) ? React.createElement("div", {
                              className: "border border-gray-400 rounded italic text-gray-600 text-xs cursor-default mt-2 p-3"
                            }, "There are no students assigned to this coach. You can assign coaches directly while editing the student details.") : $$Array.map((function (team) {
                                return React.createElement(CourseCoaches__InfoFormTeam.make, {
                                            team: team,
                                            coach: coach,
                                            removeTeamEnrollmentCB: (function (param) {
                                                return Curry._1(send, /* RemoveTeam */Block.__(1, [param]));
                                              }),
                                            key: CourseCoaches__Team.id(team)
                                          });
                              }), state.teams))));
}

var make$1 = CourseCoaches__InfoForm;

exports.str = str;
exports.initialStats = initialStats;
exports.initialState = initialState;
exports.reducer = reducer;
exports.CoachInfoQuery = CoachInfoQuery;
exports.loadCoachTeams = loadCoachTeams;
exports.removeTeamEnrollment = removeTeamEnrollment;
exports.make = make$1;
/* react Not a pure module */
