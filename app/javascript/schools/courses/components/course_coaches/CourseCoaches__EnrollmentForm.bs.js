// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Api = require("../../../../shared/Api.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ArrayUtils = require("../../../../shared/utils/ArrayUtils.bs.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var $$Notification = require("../../../../shared/Notification.bs.js");
var AuthenticityToken = require("../../../../shared/utils/AuthenticityToken.bs.js");
var MultiselectInline = require("../../../../packages/multiselect-inline/src/components/MultiselectInline.bs.js");
var CourseCoaches__CourseCoach = require("../../types/course_coaches/CourseCoaches__CourseCoach.bs.js");
var CourseCoaches__SchoolCoach = require("../../types/course_coaches/CourseCoaches__SchoolCoach.bs.js");

function str(prim) {
  return prim;
}

function reducer(state, action) {
  if (typeof action === "number") {
    return {
            courseCoaches: state.courseCoaches,
            coachSearchInput: state.coachSearchInput,
            saving: !state.saving
          };
  } else if (action.tag) {
    return {
            courseCoaches: state.courseCoaches,
            coachSearchInput: action[0],
            saving: state.saving
          };
  } else {
    return {
            courseCoaches: action[0],
            coachSearchInput: state.coachSearchInput,
            saving: state.saving
          };
  }
}

function makePayload(state) {
  var payload = { };
  payload["authenticity_token"] = AuthenticityToken.fromHead(/* () */0);
  payload["coach_ids"] = Json_encode.array((function (prim) {
          return prim;
        }), state.courseCoaches);
  return payload;
}

var value = CourseCoaches__SchoolCoach.name;

var SelectableCourseCoaches = {
  value: value,
  searchString: value
};

function setCoachSearchInput(send, value) {
  return Curry._1(send, /* UpdateCoachSearchInput */Block.__(1, [value]));
}

function selectCoach(send, state, coach) {
  var updatedCoaches = state.courseCoaches.concat([CourseCoaches__SchoolCoach.id(coach)]);
  return Curry._1(send, /* UpdateCoachesList */Block.__(0, [updatedCoaches]));
}

function deSelectCoach(send, state, coach) {
  var updatedCoaches = state.courseCoaches.filter((function (coachId) {
          return coachId !== CourseCoaches__SchoolCoach.id(coach);
        }));
  return Curry._1(send, /* UpdateCoachesList */Block.__(0, [updatedCoaches]));
}

var MultiselectForCourseCoaches = MultiselectInline.Make(SelectableCourseCoaches);

function courseCoachEditor(coaches, state, send) {
  var selected = coaches.filter((function (coach) {
          return $$Array.mem(CourseCoaches__SchoolCoach.id(coach), state.courseCoaches);
        }));
  var unselected = coaches.filter((function (coach) {
          return !$$Array.mem(CourseCoaches__SchoolCoach.id(coach), state.courseCoaches);
        }));
  return React.createElement(MultiselectForCourseCoaches.make, {
              placeholder: "Search coaches",
              onChange: (function (param) {
                  return Curry._1(send, /* UpdateCoachSearchInput */Block.__(1, [param]));
                }),
              value: state.coachSearchInput,
              unselected: unselected,
              selected: selected,
              onSelect: (function (param) {
                  return selectCoach(send, state, param);
                }),
              onDeselect: (function (param) {
                  return deSelectCoach(send, state, param);
                }),
              emptySelectionMessage: "No coaches selected",
              allItemsSelectedMessage: "You have selected all coaches!"
            });
}

function handleResponseCB(updateCoachesCB, json) {
  var courseCoaches = Json_decode.field("course_coaches", (function (param) {
          return Json_decode.array(CourseCoaches__CourseCoach.decode, param);
        }), json);
  Curry._1(updateCoachesCB, courseCoaches);
  return $$Notification.success("Success", "Coach enrollments updated successfully");
}

function updateCourseCoaches(state, send, courseId, updateCoachesCB) {
  Curry._1(send, /* ToggleSaving */0);
  var payload = makePayload(state);
  var url = "/school/courses/" + (courseId + "/update_coach_enrollments");
  return Api.create(url, payload, (function (param) {
                return handleResponseCB(updateCoachesCB, param);
              }), (function (param) {
                return Curry._1(send, /* ToggleSaving */0);
              }));
}

function computeAvailableCoaches(schoolCoaches, courseCoaches) {
  var courseCoachIds = $$Array.map(CourseCoaches__CourseCoach.id, courseCoaches);
  return schoolCoaches.filter((function (coach) {
                return !$$Array.mem(CourseCoaches__SchoolCoach.id(coach), courseCoachIds);
              }));
}

function CourseCoaches__EnrollmentForm(Props) {
  var schoolCoaches = Props.schoolCoaches;
  var courseCoaches = Props.courseCoaches;
  var courseId = Props.courseId;
  var updateCoachesCB = Props.updateCoachesCB;
  var match = React.useReducer(reducer, {
        courseCoaches: [],
        coachSearchInput: "",
        saving: false
      });
  var send = match[1];
  var state = match[0];
  var coaches = computeAvailableCoaches(schoolCoaches, courseCoaches);
  var saveDisabled = ArrayUtils.isEmpty(state.courseCoaches) || state.saving;
  return React.createElement("div", {
              className: "w-full"
            }, React.createElement("div", {
                  className: "w-full"
                }, React.createElement("div", {
                      className: "mx-auto bg-white"
                    }, React.createElement("div", {
                          className: "max-w-2xl pt-6 px-6 mx-auto"
                        }, React.createElement("h5", {
                              className: "uppercase text-center border-b border-gray-400 pb-2 mb-4"
                            }, "ASSIGN COACHES TO THE COURSE"), coaches.length !== 0 ? React.createElement("div", undefined, React.createElement("div", {
                                    id: "course_coaches"
                                  }, React.createElement("span", {
                                        className: "inline-block mr-1 mb-2 text-xs font-semibold"
                                      }, "Select coaches:"), courseCoachEditor(coaches, state, send))) : null), React.createElement("div", {
                          className: "flex max-w-2xl w-full mt-5 px-6 pb-5 mx-auto"
                        }, React.createElement("button", {
                              className: "w-full btn btn-primary btn-large",
                              disabled: saveDisabled,
                              onClick: (function (_e) {
                                  return updateCourseCoaches(state, send, courseId, updateCoachesCB);
                                })
                            }, "Add Course Coaches")))));
}

var make = CourseCoaches__EnrollmentForm;

exports.str = str;
exports.reducer = reducer;
exports.makePayload = makePayload;
exports.SelectableCourseCoaches = SelectableCourseCoaches;
exports.setCoachSearchInput = setCoachSearchInput;
exports.selectCoach = selectCoach;
exports.deSelectCoach = deSelectCoach;
exports.MultiselectForCourseCoaches = MultiselectForCourseCoaches;
exports.courseCoachEditor = courseCoachEditor;
exports.handleResponseCB = handleResponseCB;
exports.updateCourseCoaches = updateCourseCoaches;
exports.computeAvailableCoaches = computeAvailableCoaches;
exports.make = make;
/* MultiselectForCourseCoaches Not a pure module */
