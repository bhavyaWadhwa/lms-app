// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var $$String = require("bs-platform/lib/js/string.js");
var DateFns = require("../../../../shared/utils/DateFns.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var HelpIcon = require("../../../../shared/components/HelpIcon.bs.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var DatePicker = require("../../../../shared/components/DatePicker.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../../shared/utils/GraphqlQuery.bs.js");
var MarkdownEditor = require("../../../../shared/components/MarkdownEditor.bs.js");
var CourseEditor__Course = require("../../types/course_editor/CourseEditor__Course.bs.js");
var School__InputGroupError = require("../../../shared/components/School__InputGroupError.bs.js");

function str(prim) {
  return prim;
}

function reducer(state, action) {
  if (typeof action === "number") {
    if (action === /* StartSaving */0) {
      return {
              name: state.name,
              description: state.description,
              endsAt: state.endsAt,
              hasNameError: state.hasNameError,
              hasDescriptionError: state.hasDescriptionError,
              hasDateError: state.hasDateError,
              about: state.about,
              publicSignup: state.publicSignup,
              dirty: state.dirty,
              saving: true,
              featured: state.featured,
              progressionBehavior: state.progressionBehavior,
              progressionLimit: state.progressionLimit
            };
    } else {
      return {
              name: state.name,
              description: state.description,
              endsAt: state.endsAt,
              hasNameError: state.hasNameError,
              hasDescriptionError: state.hasDescriptionError,
              hasDateError: state.hasDateError,
              about: state.about,
              publicSignup: state.publicSignup,
              dirty: state.dirty,
              saving: false,
              featured: state.featured,
              progressionBehavior: state.progressionBehavior,
              progressionLimit: state.progressionLimit
            };
    }
  } else {
    switch (action.tag | 0) {
      case /* UpdateName */0 :
          return {
                  name: action[0],
                  description: state.description,
                  endsAt: state.endsAt,
                  hasNameError: action[1],
                  hasDescriptionError: state.hasDescriptionError,
                  hasDateError: state.hasDateError,
                  about: state.about,
                  publicSignup: state.publicSignup,
                  dirty: true,
                  saving: state.saving,
                  featured: state.featured,
                  progressionBehavior: state.progressionBehavior,
                  progressionLimit: state.progressionLimit
                };
      case /* UpdateDescription */1 :
          return {
                  name: state.name,
                  description: action[0],
                  endsAt: state.endsAt,
                  hasNameError: state.hasNameError,
                  hasDescriptionError: action[1],
                  hasDateError: state.hasDateError,
                  about: state.about,
                  publicSignup: state.publicSignup,
                  dirty: true,
                  saving: state.saving,
                  featured: state.featured,
                  progressionBehavior: state.progressionBehavior,
                  progressionLimit: state.progressionLimit
                };
      case /* UpdateEndsAt */2 :
          return {
                  name: state.name,
                  description: state.description,
                  endsAt: action[0],
                  hasNameError: state.hasNameError,
                  hasDescriptionError: state.hasDescriptionError,
                  hasDateError: state.hasDateError,
                  about: state.about,
                  publicSignup: state.publicSignup,
                  dirty: true,
                  saving: state.saving,
                  featured: state.featured,
                  progressionBehavior: state.progressionBehavior,
                  progressionLimit: state.progressionLimit
                };
      case /* UpdateAbout */3 :
          return {
                  name: state.name,
                  description: state.description,
                  endsAt: state.endsAt,
                  hasNameError: state.hasNameError,
                  hasDescriptionError: state.hasDescriptionError,
                  hasDateError: state.hasDateError,
                  about: action[0],
                  publicSignup: state.publicSignup,
                  dirty: true,
                  saving: state.saving,
                  featured: state.featured,
                  progressionBehavior: state.progressionBehavior,
                  progressionLimit: state.progressionLimit
                };
      case /* UpdatePublicSignup */4 :
          return {
                  name: state.name,
                  description: state.description,
                  endsAt: state.endsAt,
                  hasNameError: state.hasNameError,
                  hasDescriptionError: state.hasDescriptionError,
                  hasDateError: state.hasDateError,
                  about: state.about,
                  publicSignup: action[0],
                  dirty: true,
                  saving: state.saving,
                  featured: state.featured,
                  progressionBehavior: state.progressionBehavior,
                  progressionLimit: state.progressionLimit
                };
      case /* UpdateFeatured */5 :
          return {
                  name: state.name,
                  description: state.description,
                  endsAt: state.endsAt,
                  hasNameError: state.hasNameError,
                  hasDescriptionError: state.hasDescriptionError,
                  hasDateError: state.hasDateError,
                  about: state.about,
                  publicSignup: state.publicSignup,
                  dirty: true,
                  saving: state.saving,
                  featured: action[0],
                  progressionBehavior: state.progressionBehavior,
                  progressionLimit: state.progressionLimit
                };
      case /* UpdateProgressionBehavior */6 :
          return {
                  name: state.name,
                  description: state.description,
                  endsAt: state.endsAt,
                  hasNameError: state.hasNameError,
                  hasDescriptionError: state.hasDescriptionError,
                  hasDateError: state.hasDateError,
                  about: state.about,
                  publicSignup: state.publicSignup,
                  dirty: true,
                  saving: state.saving,
                  featured: state.featured,
                  progressionBehavior: action[0],
                  progressionLimit: state.progressionLimit
                };
      case /* UpdateProgressionLimit */7 :
          return {
                  name: state.name,
                  description: state.description,
                  endsAt: state.endsAt,
                  hasNameError: state.hasNameError,
                  hasDescriptionError: state.hasDescriptionError,
                  hasDateError: state.hasDateError,
                  about: state.about,
                  publicSignup: state.publicSignup,
                  dirty: true,
                  saving: state.saving,
                  featured: state.featured,
                  progressionBehavior: /* Limited */-599448518,
                  progressionLimit: action[0]
                };
      
    }
  }
}

var ppx_printed_query = "mutation CreateCourseMutation($name: String!, $description: String!, $endsAt: ISO8601DateTime, $about: String!, $publicSignup: Boolean!, $featured: Boolean!, $progressionBehavior: ProgressionBehavior!, $progressionLimit: Int)  {\ncreateCourse(name: $name, description: $description, endsAt: $endsAt, about: $about, publicSignup: $publicSignup, featured: $featured, progressionBehavior: $progressionBehavior, progressionLimit: $progressionLimit)  {\ncourse  {\n..." + CourseEditor__Course.Fragments.AllFields.name + "   \n}\n\n}\n\n}\n" + CourseEditor__Course.Fragments.AllFields.query;

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createCourse");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "course");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      tmp$1 = match$2 !== undefined ? undefined : Caml_option.some(Curry._1(CourseEditor__Course.Fragments.AllFields.parse, value$3));
    } else {
      tmp$1 = undefined;
    }
    tmp = {
      course: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field createCourse on type Mutation is missing");
  }
  return {
          createCourse: tmp
        };
}

function json_of_ProgressionBehavior(value) {
  if (value !== -599448518) {
    if (value >= 751362817) {
      return "Unlimited";
    } else {
      return "Strict";
    }
  } else {
    return "Limited";
  }
}

function make(name, description, endsAt, about, publicSignup, featured, progressionBehavior, progressionLimit, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "description",
                    description
                  ],
                  /* tuple */[
                    "endsAt",
                    endsAt !== undefined ? Caml_option.valFromOption(endsAt) : null
                  ],
                  /* tuple */[
                    "about",
                    about
                  ],
                  /* tuple */[
                    "publicSignup",
                    publicSignup
                  ],
                  /* tuple */[
                    "featured",
                    featured
                  ],
                  /* tuple */[
                    "progressionBehavior",
                    json_of_ProgressionBehavior(progressionBehavior)
                  ],
                  /* tuple */[
                    "progressionLimit",
                    progressionLimit !== undefined ? progressionLimit : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var name = variables.name;
  var description = variables.description;
  var endsAt = variables.endsAt;
  var about = variables.about;
  var publicSignup = variables.publicSignup;
  var featured = variables.featured;
  var progressionBehavior = variables.progressionBehavior;
  var progressionLimit = variables.progressionLimit;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "description",
                    description
                  ],
                  /* tuple */[
                    "endsAt",
                    endsAt !== undefined ? Caml_option.valFromOption(endsAt) : null
                  ],
                  /* tuple */[
                    "about",
                    about
                  ],
                  /* tuple */[
                    "publicSignup",
                    publicSignup
                  ],
                  /* tuple */[
                    "featured",
                    featured
                  ],
                  /* tuple */[
                    "progressionBehavior",
                    json_of_ProgressionBehavior(progressionBehavior)
                  ],
                  /* tuple */[
                    "progressionLimit",
                    progressionLimit !== undefined ? progressionLimit : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(name, description, endsAt, about, publicSignup, featured, progressionBehavior, progressionLimit, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "description",
                  description
                ],
                /* tuple */[
                  "endsAt",
                  endsAt !== undefined ? Caml_option.valFromOption(endsAt) : null
                ],
                /* tuple */[
                  "about",
                  about
                ],
                /* tuple */[
                  "publicSignup",
                  publicSignup
                ],
                /* tuple */[
                  "featured",
                  featured
                ],
                /* tuple */[
                  "progressionBehavior",
                  json_of_ProgressionBehavior(progressionBehavior)
                ],
                /* tuple */[
                  "progressionLimit",
                  progressionLimit !== undefined ? progressionLimit : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, name, description, endsAt, about, publicSignup, featured, progressionBehavior, progressionLimit, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "name",
                      name
                    ],
                    /* tuple */[
                      "description",
                      description
                    ],
                    /* tuple */[
                      "endsAt",
                      endsAt !== undefined ? Caml_option.valFromOption(endsAt) : null
                    ],
                    /* tuple */[
                      "about",
                      about
                    ],
                    /* tuple */[
                      "publicSignup",
                      publicSignup
                    ],
                    /* tuple */[
                      "featured",
                      featured
                    ],
                    /* tuple */[
                      "progressionBehavior",
                      json_of_ProgressionBehavior(progressionBehavior)
                    ],
                    /* tuple */[
                      "progressionLimit",
                      progressionLimit !== undefined ? progressionLimit : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var CreateCourseQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  json_of_ProgressionBehavior: json_of_ProgressionBehavior,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var ppx_printed_query$1 = "mutation UpdateCourseMutation($id: ID!, $name: String!, $description: String!, $endsAt: ISO8601DateTime, $about: String!, $publicSignup: Boolean!, $featured: Boolean!, $progressionBehavior: ProgressionBehavior!, $progressionLimit: Int)  {\nupdateCourse(id: $id, name: $name, description: $description, endsAt: $endsAt, about: $about, publicSignup: $publicSignup, featured: $featured, progressionBehavior: $progressionBehavior, progressionLimit: $progressionLimit)  {\ncourse  {\n..." + CourseEditor__Course.Fragments.AllFields.name + "   \n}\n\n}\n\n}\n" + CourseEditor__Course.Fragments.AllFields.query;

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updateCourse");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "course");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      tmp$1 = match$2 !== undefined ? undefined : Caml_option.some(Curry._1(CourseEditor__Course.Fragments.AllFields.parse, value$3));
    } else {
      tmp$1 = undefined;
    }
    tmp = {
      course: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field updateCourse on type Mutation is missing");
  }
  return {
          updateCourse: tmp
        };
}

function json_of_ProgressionBehavior$1(value) {
  if (value !== -599448518) {
    if (value >= 751362817) {
      return "Unlimited";
    } else {
      return "Strict";
    }
  } else {
    return "Limited";
  }
}

function make$1(id, name, description, endsAt, about, publicSignup, featured, progressionBehavior, progressionLimit, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "description",
                    description
                  ],
                  /* tuple */[
                    "endsAt",
                    endsAt !== undefined ? Caml_option.valFromOption(endsAt) : null
                  ],
                  /* tuple */[
                    "about",
                    about
                  ],
                  /* tuple */[
                    "publicSignup",
                    publicSignup
                  ],
                  /* tuple */[
                    "featured",
                    featured
                  ],
                  /* tuple */[
                    "progressionBehavior",
                    json_of_ProgressionBehavior$1(progressionBehavior)
                  ],
                  /* tuple */[
                    "progressionLimit",
                    progressionLimit !== undefined ? progressionLimit : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var id = variables.id;
  var name = variables.name;
  var description = variables.description;
  var endsAt = variables.endsAt;
  var about = variables.about;
  var publicSignup = variables.publicSignup;
  var featured = variables.featured;
  var progressionBehavior = variables.progressionBehavior;
  var progressionLimit = variables.progressionLimit;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "description",
                    description
                  ],
                  /* tuple */[
                    "endsAt",
                    endsAt !== undefined ? Caml_option.valFromOption(endsAt) : null
                  ],
                  /* tuple */[
                    "about",
                    about
                  ],
                  /* tuple */[
                    "publicSignup",
                    publicSignup
                  ],
                  /* tuple */[
                    "featured",
                    featured
                  ],
                  /* tuple */[
                    "progressionBehavior",
                    json_of_ProgressionBehavior$1(progressionBehavior)
                  ],
                  /* tuple */[
                    "progressionLimit",
                    progressionLimit !== undefined ? progressionLimit : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeVariables$1(id, name, description, endsAt, about, publicSignup, featured, progressionBehavior, progressionLimit, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "description",
                  description
                ],
                /* tuple */[
                  "endsAt",
                  endsAt !== undefined ? Caml_option.valFromOption(endsAt) : null
                ],
                /* tuple */[
                  "about",
                  about
                ],
                /* tuple */[
                  "publicSignup",
                  publicSignup
                ],
                /* tuple */[
                  "featured",
                  featured
                ],
                /* tuple */[
                  "progressionBehavior",
                  json_of_ProgressionBehavior$1(progressionBehavior)
                ],
                /* tuple */[
                  "progressionLimit",
                  progressionLimit !== undefined ? progressionLimit : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$1(graphql_ppx_use_json_variables_fn, id, name, description, endsAt, about, publicSignup, featured, progressionBehavior, progressionLimit, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "id",
                      id
                    ],
                    /* tuple */[
                      "name",
                      name
                    ],
                    /* tuple */[
                      "description",
                      description
                    ],
                    /* tuple */[
                      "endsAt",
                      endsAt !== undefined ? Caml_option.valFromOption(endsAt) : null
                    ],
                    /* tuple */[
                      "about",
                      about
                    ],
                    /* tuple */[
                      "publicSignup",
                      publicSignup
                    ],
                    /* tuple */[
                      "featured",
                      featured
                    ],
                    /* tuple */[
                      "progressionBehavior",
                      json_of_ProgressionBehavior$1(progressionBehavior)
                    ],
                    /* tuple */[
                      "progressionLimit",
                      progressionLimit !== undefined ? progressionLimit : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$1 = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002$1
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var UpdateCourseQuery = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  json_of_ProgressionBehavior: json_of_ProgressionBehavior$1,
  make: make$1,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

function updateName(send, name) {
  var hasError = $$String.trim(name).length < 2;
  return Curry._1(send, /* UpdateName */Block.__(0, [
                name,
                hasError
              ]));
}

function updateDescription(send, description) {
  var lengthOfDescription = $$String.trim(description).length;
  var hasError = lengthOfDescription < 2 || lengthOfDescription >= 150;
  return Curry._1(send, /* UpdateDescription */Block.__(1, [
                description,
                hasError
              ]));
}

function saveDisabled(state) {
  if (state.hasDateError || state.hasDescriptionError || state.description === "" || state.hasNameError || state.name === "" || !state.dirty) {
    return true;
  } else {
    return state.saving;
  }
}

function formClasses(value) {
  if (value) {
    return "drawer-right-form w-full opacity-50";
  } else {
    return "drawer-right-form w-full";
  }
}

function progressionLimitForQuery(state) {
  var match = state.progressionBehavior;
  if (match !== -599448518) {
    return ;
  } else {
    return state.progressionLimit;
  }
}

function createCourse(state, send, updateCourseCB) {
  Curry._1(send, /* StartSaving */0);
  var createCourseQuery = make(state.name, state.description, Belt_Option.map(state.endsAt, DateFns.encodeISO), state.about, state.publicSignup, state.featured, state.progressionBehavior, progressionLimitForQuery(state), /* () */0);
  (function (eta) {
            return GraphqlQuery.sendQuery(undefined, eta);
          })(createCourseQuery).then((function (result) {
            var match = result.createCourse.course;
            if (match !== undefined) {
              Curry._1(updateCourseCB, CourseEditor__Course.makeFromJs(Caml_option.valFromOption(match)));
            } else {
              Curry._1(send, /* FailSaving */1);
            }
            return Promise.resolve(/* () */0);
          })).catch((function (error) {
          console.log(error);
          Curry._1(send, /* FailSaving */1);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function updateCourse(state, send, updateCourseCB, course) {
  Curry._1(send, /* StartSaving */0);
  var updateCourseQuery = make$1(CourseEditor__Course.id(course), state.name, state.description, Belt_Option.map(state.endsAt, DateFns.encodeISO), state.about, state.publicSignup, state.featured, state.progressionBehavior, progressionLimitForQuery(state), /* () */0);
  (function (eta) {
            return GraphqlQuery.sendQuery(undefined, eta);
          })(updateCourseQuery).then((function (result) {
            var match = result.updateCourse.course;
            if (match !== undefined) {
              Curry._1(updateCourseCB, CourseEditor__Course.makeFromJs(Caml_option.valFromOption(match)));
            } else {
              Curry._1(send, /* FailSaving */1);
            }
            return Promise.resolve(/* () */0);
          })).catch((function (error) {
          console.log(error);
          Curry._1(send, /* FailSaving */1);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function booleanButtonClasses(bool) {
  return "toggle-button__button" + (
          bool ? " toggle-button__button--active" : ""
        );
}

function enablePublicSignupButton(publicSignup, send) {
  return React.createElement("div", {
              className: "flex items-center mt-5"
            }, React.createElement("label", {
                  className: "block tracking-wide text-xs font-semibold mr-6",
                  htmlFor: "public-signup"
                }, "Enable public signup for this course?"), React.createElement("div", {
                  className: "flex toggle-button__group flex-shrink-0 rounded-lg overflow-hidden",
                  id: "public-signup"
                }, React.createElement("button", {
                      className: booleanButtonClasses(publicSignup),
                      onClick: (function (param) {
                          return Curry._1(send, /* UpdatePublicSignup */Block.__(4, [true]));
                        })
                    }, "Yes"), React.createElement("button", {
                      className: booleanButtonClasses(!publicSignup),
                      onClick: (function (param) {
                          return Curry._1(send, /* UpdatePublicSignup */Block.__(4, [false]));
                        })
                    }, "No")));
}

function featuredButton(featured, send) {
  return React.createElement("div", {
              className: "flex items-center mt-5"
            }, React.createElement("label", {
                  className: "block tracking-wide text-xs font-semibold mr-6",
                  htmlFor: "featured"
                }, "Feature course in learnmax homepage?"), React.createElement("div", {
                  className: "flex toggle-button__group flex-shrink-0 rounded-lg overflow-hidden",
                  id: "featured"
                }, React.createElement("button", {
                      className: booleanButtonClasses(featured),
                      onClick: (function (param) {
                          return Curry._1(send, /* UpdateFeatured */Block.__(5, [true]));
                        })
                    }, "Yes"), React.createElement("button", {
                      className: booleanButtonClasses(!featured),
                      onClick: (function (param) {
                          return Curry._1(send, /* UpdateFeatured */Block.__(5, [false]));
                        })
                    }, "No")));
}

function about(course) {
  var match = CourseEditor__Course.about(course);
  if (match !== undefined) {
    return match;
  } else {
    return "";
  }
}

function updateAboutCB(send, about) {
  return Curry._1(send, /* UpdateAbout */Block.__(3, [about]));
}

function computeInitialState(course) {
  if (course !== undefined) {
    var course$1 = course;
    return {
            name: CourseEditor__Course.name(course$1),
            description: CourseEditor__Course.description(course$1),
            endsAt: CourseEditor__Course.endsAt(course$1),
            hasNameError: false,
            hasDescriptionError: false,
            hasDateError: false,
            about: about(course$1),
            publicSignup: CourseEditor__Course.publicSignup(course$1),
            dirty: false,
            saving: false,
            featured: CourseEditor__Course.featured(course$1),
            progressionBehavior: CourseEditor__Course.progressionBehavior(course$1),
            progressionLimit: Belt_Option.getWithDefault(CourseEditor__Course.progressionLimit(course$1), 1)
          };
  } else {
    return {
            name: "",
            description: "",
            endsAt: undefined,
            hasNameError: false,
            hasDescriptionError: false,
            hasDateError: false,
            about: "",
            publicSignup: false,
            dirty: false,
            saving: false,
            featured: true,
            progressionBehavior: /* Limited */-599448518,
            progressionLimit: 1
          };
  }
}

function handleSelectProgressionLimit(send, $$event) {
  var target = $$event.target;
  var otherValue = target.value;
  switch (otherValue) {
    case "1" :
    case "2" :
    case "3" :
        break;
    default:
      Rollbar.error("Unexpected progression limit was selected: " + otherValue);
      return /* () */0;
  }
  return Curry._1(send, /* UpdateProgressionLimit */Block.__(7, [Caml_format.caml_int_of_string(target.value)]));
}

function progressionBehaviorButtonClasses(state, progressionBehavior, additionalClasses) {
  var selected = state.progressionBehavior === progressionBehavior;
  var defaultClasses = additionalClasses + " w-1/3 relative border font-semibold focus:outline-none rounded px-5 py-4 md:px-8 md:py-5 items-center cursor-pointer text-center bg-gray-200 hover:bg-gray-300";
  return defaultClasses + (
          selected ? " text-primary-500 border-primary-500" : ""
        );
}

function CourseEditor__Form(Props) {
  var course = Props.course;
  var hideEditorActionCB = Props.hideEditorActionCB;
  var updateCourseCB = Props.updateCourseCB;
  var match = React.useReducer(reducer, course, computeInitialState);
  var send = match[1];
  var state = match[0];
  var tmp = {
    onChange: (function (date) {
        return Curry._1(send, /* UpdateEndsAt */Block.__(2, [date]));
      }),
    id: "course-ends-at-input"
  };
  if (state.endsAt !== undefined) {
    tmp.selected = Caml_option.valFromOption(state.endsAt);
  }
  var tmp$1;
  if (course !== undefined) {
    var course$1 = course;
    tmp$1 = React.createElement("button", {
          className: "w-full btn btn-large btn-primary mt-3",
          disabled: saveDisabled(state),
          onClick: (function (param) {
              return updateCourse(state, send, updateCourseCB, course$1);
            })
        }, "Update Course");
  } else {
    tmp$1 = React.createElement("button", {
          className: "w-full btn btn-large btn-primary mt-3",
          disabled: saveDisabled(state),
          onClick: (function (param) {
              return createCourse(state, send, updateCourseCB);
            })
        }, "Create Course");
  }
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "blanket"
                }), React.createElement("div", {
                  className: "drawer-right"
                }, React.createElement("div", {
                      className: "drawer-right__close absolute"
                    }, React.createElement("button", {
                          className: "flex items-center justify-center bg-white text-gray-600 font-bold py-3 px-5 rounded-l-full rounded-r-none hover:text-gray-700 focus:outline-none mt-4",
                          title: "close",
                          onClick: (function (param) {
                              return Curry._1(hideEditorActionCB, /* () */0);
                            })
                        }, React.createElement("i", {
                              className: "fas fa-times text-xl"
                            }))), React.createElement("div", {
                      className: state.saving ? "drawer-right-form w-full opacity-50" : "drawer-right-form w-full"
                    }, React.createElement("div", {
                          className: "w-full"
                        }, React.createElement("div", {
                              className: "mx-auto bg-white"
                            }, React.createElement("div", {
                                  className: "max-w-2xl p-6 mx-auto"
                                }, React.createElement("h5", {
                                      className: "uppercase text-center border-b border-gray-400 pb-2"
                                    }, course === undefined ? "Add New Course" : "Edit Course Details"), React.createElement("div", {
                                      className: "mt-5"
                                    }, React.createElement("label", {
                                          className: "inline-block tracking-wide text-xs font-semibold ",
                                          htmlFor: "name"
                                        }, "Course name"), React.createElement("input", {
                                          className: "appearance-none block w-full bg-white border border-gray-400 rounded py-3 px-4 mt-2 leading-tight focus:outline-none focus:bg-white focus:border-gray-500",
                                          id: "name",
                                          maxLength: 50,
                                          placeholder: "Type course name here",
                                          type: "text",
                                          value: state.name,
                                          onChange: (function ($$event) {
                                              return updateName(send, $$event.target.value);
                                            })
                                        }), React.createElement(School__InputGroupError.make, {
                                          message: "A name is required (2-50 characters)",
                                          active: state.hasNameError
                                        })), React.createElement("div", {
                                      className: "mt-5"
                                    }, React.createElement("label", {
                                          className: "inline-block tracking-wide text-xs font-semibold",
                                          htmlFor: "description"
                                        }, "Course description"), React.createElement("input", {
                                          className: "appearance-none block w-full bg-white border border-gray-400 rounded py-3 px-4 mt-2 leading-tight focus:outline-none focus:bg-white focus:border-gray-500",
                                          id: "description",
                                          maxLength: 150,
                                          placeholder: "Short description for this course",
                                          type: "text",
                                          value: state.description,
                                          onChange: (function ($$event) {
                                              return updateDescription(send, $$event.target.value);
                                            })
                                        })), React.createElement(School__InputGroupError.make, {
                                      message: "A description is required (2-150 characters)",
                                      active: state.hasDescriptionError
                                    }), React.createElement("div", {
                                      className: "mt-5"
                                    }, React.createElement("label", {
                                          className: "tracking-wide text-xs font-semibold",
                                          htmlFor: "course-ends-at-input"
                                        }, "Course end date"), React.createElement("span", {
                                          className: "ml-1 text-xs"
                                        }, "(optional)"), React.createElement(HelpIcon.make, {
                                          className: "ml-2",
                                          link: "https://docs.pupilfirst.com/#/courses",
                                          children: "If specified, course will appear as closed to users on this date. Users will not be able to make any more submissions."
                                        }), React.createElement(DatePicker.make, tmp)), React.createElement(School__InputGroupError.make, {
                                      message: "Enter a valid date",
                                      active: state.hasDateError
                                    }), React.createElement("div", {
                                      className: "mt-5"
                                    }, React.createElement("label", {
                                          className: "tracking-wide text-xs font-semibold",
                                          htmlFor: "course-about"
                                        }, "About"), React.createElement("div", {
                                          className: "mt-2"
                                        }, React.createElement(MarkdownEditor.make, {
                                              value: state.about,
                                              onChange: (function (param) {
                                                  return Curry._1(send, /* UpdateAbout */Block.__(3, [param]));
                                                }),
                                              profile: /* Permissive */2,
                                              textareaId: "course-about",
                                              maxLength: 10000,
                                              placeholder: "Add more details about the course."
                                            }))), React.createElement("div", {
                                      className: "mt-5"
                                    }, React.createElement("label", {
                                          className: "tracking-wide text-xs font-semibold"
                                        }, "Progression Behavior"), React.createElement(HelpIcon.make, {
                                          className: "ml-2",
                                          link: "https://docs.pupilfirst.com/#/courses?id=progression-behaviour",
                                          children: "This only applies if your course has milestone modules that requires users to submit their work for review by coaches."
                                        }), React.createElement("div", {
                                          className: "flex mt-2"
                                        }, React.createElement("button", {
                                              className: progressionBehaviorButtonClasses(state, /* Limited */-599448518, "mr-1"),
                                              onClick: (function (param) {
                                                  return Curry._1(send, /* UpdateProgressionBehavior */Block.__(6, [/* Limited */-599448518]));
                                                })
                                            }, React.createElement("div", {
                                                  className: "font-bold text-xl"
                                                }, "Limited"), React.createElement("div", {
                                                  className: "text-xs mt-2"
                                                }, React.createElement("div", undefined, "Users can level up"), React.createElement("select", {
                                                      className: "my-1 cursor-pointer inline-block appearance-none bg-white border-b-2 text-xl font-semibold border-blue-500 hover:border-gray-500 p-1 leading-tight rounded-none focus:outline-none",
                                                      id: "progression-limit",
                                                      style: {
                                                        textAlignLast: "center"
                                                      },
                                                      value: String(state.progressionLimit),
                                                      onChange: (function (param) {
                                                          return handleSelectProgressionLimit(send, param);
                                                        })
                                                    }, React.createElement("option", {
                                                          value: "1"
                                                        }, "once"), React.createElement("option", {
                                                          value: "2"
                                                        }, "twice"), React.createElement("option", {
                                                          value: "3"
                                                        }, "thrice")), React.createElement("div", undefined, " without getting submissions reviewed."))), React.createElement("button", {
                                              className: progressionBehaviorButtonClasses(state, /* Unlimited */751362817, "mx-1"),
                                              onClick: (function (param) {
                                                  return Curry._1(send, /* UpdateProgressionBehavior */Block.__(6, [/* Unlimited */751362817]));
                                                })
                                            }, React.createElement("div", {
                                                  className: "font-bold text-xl"
                                                }, "Unlimited"), React.createElement("span", {
                                                  className: "text-xs"
                                                }, "Users can level up till the end of the course, without getting submissions reviewed.")), React.createElement("button", {
                                              className: progressionBehaviorButtonClasses(state, /* Strict */-976972951, "ml-1"),
                                              onClick: (function (param) {
                                                  return Curry._1(send, /* UpdateProgressionBehavior */Block.__(6, [/* Strict */-976972951]));
                                                })
                                            }, React.createElement("div", {
                                                  className: "font-bold text-xl"
                                                }, "Strict"), React.createElement("span", {
                                                  className: "text-xs"
                                                }, "Users can level up only after getting submissions reviewed, and passing.")))), featuredButton(state.featured, send), enablePublicSignupButton(state.publicSignup, send))), React.createElement("div", {
                              className: "mx-auto"
                            }, React.createElement("div", {
                                  className: "max-w-2xl p-6 mx-auto"
                                }, React.createElement("div", {
                                      className: "flex"
                                    }, tmp$1)))))));
}

var make$2 = CourseEditor__Form;

exports.str = str;
exports.reducer = reducer;
exports.CreateCourseQuery = CreateCourseQuery;
exports.UpdateCourseQuery = UpdateCourseQuery;
exports.updateName = updateName;
exports.updateDescription = updateDescription;
exports.saveDisabled = saveDisabled;
exports.formClasses = formClasses;
exports.progressionLimitForQuery = progressionLimitForQuery;
exports.createCourse = createCourse;
exports.updateCourse = updateCourse;
exports.booleanButtonClasses = booleanButtonClasses;
exports.enablePublicSignupButton = enablePublicSignupButton;
exports.featuredButton = featuredButton;
exports.about = about;
exports.updateAboutCB = updateAboutCB;
exports.computeInitialState = computeInitialState;
exports.handleSelectProgressionLimit = handleSelectProgressionLimit;
exports.progressionBehaviorButtonClasses = progressionBehaviorButtonClasses;
exports.make = make$2;
/* react Not a pure module */
