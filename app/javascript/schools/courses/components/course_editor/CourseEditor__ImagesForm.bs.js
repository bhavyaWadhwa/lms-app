// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Api = require("../../../../shared/Api.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var HelpIcon = require("../../../../shared/components/HelpIcon.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var OptionUtils = require("../../../../shared/utils/OptionUtils.bs.js");
var $$Notification = require("../../../../shared/Notification.bs.js");
var DisablingCover = require("../../../../shared/components/DisablingCover.bs.js");
var AuthenticityToken = require("../../../../shared/utils/AuthenticityToken.bs.js");
var CourseEditor__Course = require("../../types/course_editor/CourseEditor__Course.bs.js");
var School__InputGroupError = require("../../../shared/components/School__InputGroupError.bs.js");
var SchoolAdmin__EditorDrawer = require("../../../components/SchoolAdmin__EditorDrawer.bs.js");

function str(prim) {
  return prim;
}

function updateButtonText(updating) {
  if (updating) {
    return "Updating...";
  } else {
    return "Update Images";
  }
}

var formId = "course-editor-form-image-form";

function filename(optionalFilename) {
  return OptionUtils.$$default("unknown", optionalFilename);
}

function handleUpdateCB(json, state, course, updateCourseCB) {
  var coverUrl = Json_decode.field("cover_url", (function (param) {
          return Json_decode.optional(Json_decode.string, param);
        }), json);
  var thumbnailUrl = Json_decode.field("thumbnail_url", (function (param) {
          return Json_decode.optional(Json_decode.string, param);
        }), json);
  return Curry._1(updateCourseCB, CourseEditor__Course.addImages(coverUrl, thumbnailUrl, OptionUtils.$$default("unknown", state.filenameCover), OptionUtils.$$default("unknown", state.filenameThumb), course));
}

function handleUpdateImages(send, state, course, updateCourseCB, $$event) {
  $$event.preventDefault();
  Curry._1(send, /* BeginUpdate */0);
  var element = document.getElementById(formId);
  if (element == null) {
    return /* () */0;
  } else {
    return Api.sendFormData("/school/courses/" + (CourseEditor__Course.id(course) + "/attach_images"), new FormData(element), (function (json) {
                  $$Notification.success("Done!", "Images have been updated successfully.");
                  handleUpdateCB(json, state, course, updateCourseCB);
                  return Curry._1(send, /* DoneUpdating */2);
                }), (function (param) {
                  return Curry._1(send, /* ErrorOccured */1);
                }));
  }
}

function updateButtonDisabled(state) {
  if (state.updating || !state.formDirty || state.invalidThumb) {
    return true;
  } else {
    return state.invalidCover;
  }
}

function optionalImageLabelText(image, selectedFilename) {
  if (selectedFilename !== undefined) {
    return React.createElement("span", undefined, "You have selected ", React.createElement("code", {
                    className: "mr-1"
                  }, selectedFilename), ". Click to replace the current image.");
  } else if (image !== undefined) {
    return React.createElement("span", undefined, "Please pick a file to replace ", React.createElement("code", undefined, CourseEditor__Course.filename(image)));
  } else {
    return "Please choose an image file.";
  }
}

function isInvalidImageFile(image) {
  var match = image.type;
  var tmp;
  switch (match) {
    case "image/jpeg" :
    case "image/png" :
        tmp = false;
        break;
    default:
      tmp = true;
  }
  if (tmp) {
    return true;
  } else {
    return image.size > 2097152;
  }
}

function updateImage(send, isCover, $$event) {
  var imageFile = Caml_array.caml_array_get($$event.target.files, 0);
  if (isCover) {
    return Curry._1(send, /* SelectCover */Block.__(0, [
                  imageFile.name,
                  isInvalidImageFile(imageFile)
                ]));
  } else {
    return Curry._1(send, /* SelectThumb */Block.__(1, [
                  imageFile.name,
                  isInvalidImageFile(imageFile)
                ]));
  }
}

function initialState(param) {
  return {
          filenameThumb: undefined,
          filenameCover: undefined,
          invalidThumb: false,
          invalidCover: false,
          updating: false,
          formDirty: false
        };
}

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* BeginUpdate */0 :
          return {
                  filenameThumb: state.filenameThumb,
                  filenameCover: state.filenameCover,
                  invalidThumb: state.invalidThumb,
                  invalidCover: state.invalidCover,
                  updating: true,
                  formDirty: state.formDirty
                };
      case /* ErrorOccured */1 :
          return {
                  filenameThumb: state.filenameThumb,
                  filenameCover: state.filenameCover,
                  invalidThumb: state.invalidThumb,
                  invalidCover: state.invalidCover,
                  updating: false,
                  formDirty: state.formDirty
                };
      case /* DoneUpdating */2 :
          return {
                  filenameThumb: state.filenameThumb,
                  filenameCover: state.filenameCover,
                  invalidThumb: state.invalidThumb,
                  invalidCover: state.invalidCover,
                  updating: false,
                  formDirty: false
                };
      
    }
  } else if (action.tag) {
    return {
            filenameThumb: action[0],
            filenameCover: state.filenameCover,
            invalidThumb: action[1],
            invalidCover: state.invalidCover,
            updating: state.updating,
            formDirty: true
          };
  } else {
    return {
            filenameThumb: state.filenameThumb,
            filenameCover: action[0],
            invalidThumb: state.invalidThumb,
            invalidCover: action[1],
            updating: state.updating,
            formDirty: true
          };
  }
}

function CourseEditor__ImagesForm(Props) {
  var course = Props.course;
  var updateCourseCB = Props.updateCourseCB;
  var closeDrawerCB = Props.closeDrawerCB;
  var match = React.useReducer(reducer, {
        filenameThumb: undefined,
        filenameCover: undefined,
        invalidThumb: false,
        invalidCover: false,
        updating: false,
        formDirty: false
      });
  var send = match[1];
  var state = match[0];
  var thumbnail = CourseEditor__Course.thumbnail(course);
  var cover = CourseEditor__Course.cover(course);
  return React.createElement(SchoolAdmin__EditorDrawer.make, {
              closeDrawerCB: closeDrawerCB,
              children: React.createElement("form", {
                    key: "sc-images-editor__form",
                    className: "mx-8 pt-8",
                    id: formId,
                    onSubmit: (function (param) {
                        return handleUpdateImages(send, state, course, updateCourseCB, param);
                      })
                  }, React.createElement("input", {
                        name: "authenticity_token",
                        type: "hidden",
                        value: AuthenticityToken.fromHead(/* () */0)
                      }), React.createElement("h5", {
                        className: "uppercase text-center border-b border-gray-400 pb-2"
                      }, "Course Images"), React.createElement(DisablingCover.make, {
                        disabled: state.updating,
                        children: null
                      }, React.createElement("div", {
                            key: "course-images-editor__thumbnail",
                            className: "mt-4"
                          }, React.createElement("label", {
                                className: "tracking-wide text-gray-800 text-xs font-semibold",
                                htmlFor: "sc-images-editor__logo-on-400-bg-input"
                              }, "Thumbnail"), React.createElement(HelpIcon.make, {
                                className: "text-xs ml-1",
                                link: "https://docs.pupilfirst.com/#/courses?id=course-images",
                                responsiveAlignment: /* NonResponsive */Block.__(0, [/* AlignLeft */0]),
                                children: "The thumbnail will be displayed on the homepage, and here in the admin courses list."
                              }), React.createElement("input", {
                                className: "hidden",
                                id: "course-images-editor__thumbnail",
                                accept: ".jpg,.jpeg,.png,.gif,image/x-png,image/gif,image/jpeg",
                                disabled: state.updating,
                                multiple: false,
                                name: "course_thumbnail",
                                required: false,
                                type: "file",
                                onChange: (function (param) {
                                    return updateImage(send, false, param);
                                  })
                              }), React.createElement("label", {
                                className: "file-input-label mt-2",
                                htmlFor: "course-images-editor__thumbnail"
                              }, React.createElement("i", {
                                    className: "fas fa-upload"
                                  }), React.createElement("span", {
                                    className: "ml-2 truncate"
                                  }, optionalImageLabelText(thumbnail, state.filenameThumb))), React.createElement(School__InputGroupError.make, {
                                message: "must be a JPEG / PNG under 2 MB in size",
                                active: state.invalidThumb
                              })), React.createElement("div", {
                            key: "course-images-editor__cover",
                            className: "mt-4"
                          }, React.createElement("label", {
                                className: "tracking-wide text-gray-800 text-xs font-semibold",
                                htmlFor: "sc-images-editor__logo-on-400-bg-input"
                              }, "Cover Image"), React.createElement(HelpIcon.make, {
                                className: "text-xs ml-1",
                                link: "https://docs.pupilfirst.com/#/courses?id=course-images",
                                responsiveAlignment: /* NonResponsive */Block.__(0, [/* AlignLeft */0]),
                                children: "The cover will be displayed at the top of all student pages within the course, and as the header of some course emails."
                              }), React.createElement("input", {
                                className: "hidden",
                                id: "course-images-editor__cover",
                                accept: ".jpg,.jpeg,.png,.gif,image/x-png,image/gif,image/jpeg",
                                disabled: state.updating,
                                multiple: false,
                                name: "course_cover",
                                required: false,
                                type: "file",
                                onChange: (function (param) {
                                    return updateImage(send, true, param);
                                  })
                              }), React.createElement("label", {
                                className: "file-input-label mt-2",
                                htmlFor: "course-images-editor__cover"
                              }, React.createElement("i", {
                                    className: "fas fa-upload"
                                  }), React.createElement("span", {
                                    className: "ml-2 truncate"
                                  }, optionalImageLabelText(cover, state.filenameCover))), React.createElement(School__InputGroupError.make, {
                                message: "must be a JPEG / PNG under 2 MB in size",
                                active: state.invalidCover
                              })), React.createElement("button", {
                            key: "sc-images-editor__update-button",
                            className: "btn btn-primary btn-large mt-6",
                            disabled: updateButtonDisabled(state),
                            type: "submit"
                          }, state.updating ? "Updating..." : "Update Images")))
            });
}

var maxAllowedSize = 2097152;

var make = CourseEditor__ImagesForm;

exports.str = str;
exports.updateButtonText = updateButtonText;
exports.formId = formId;
exports.filename = filename;
exports.handleUpdateCB = handleUpdateCB;
exports.handleUpdateImages = handleUpdateImages;
exports.updateButtonDisabled = updateButtonDisabled;
exports.optionalImageLabelText = optionalImageLabelText;
exports.maxAllowedSize = maxAllowedSize;
exports.isInvalidImageFile = isInvalidImageFile;
exports.updateImage = updateImage;
exports.initialState = initialState;
exports.reducer = reducer;
exports.make = make;
/* Api Not a pure module */
