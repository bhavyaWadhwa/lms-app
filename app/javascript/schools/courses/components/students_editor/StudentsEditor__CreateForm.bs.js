// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Api = require("../../../../shared/Api.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var ListUtils = require("../../../../shared/utils/ListUtils.bs.js");
var ArrayUtils = require("../../../../shared/utils/ArrayUtils.bs.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var OptionUtils = require("../../../../shared/utils/OptionUtils.bs.js");
var $$Notification = require("../../../../shared/Notification.bs.js");
var AuthenticityToken = require("../../../../shared/utils/AuthenticityToken.bs.js");
var StudentsEditor__StudentInfo = require("../../types/students_editor/StudentsEditor__StudentInfo.bs.js");
var StudentsEditor__StudentInfoForm = require("./StudentsEditor__StudentInfoForm.bs.js");

function str(prim) {
  return prim;
}

function formInvalid(state) {
  return ArrayUtils.isEmpty(state.studentsToAdd);
}

function handleErrorCB(send, param) {
  return Curry._1(send, /* SetSaving */Block.__(2, [false]));
}

function appliedTags(students) {
  return $$Array.of_list(ListUtils.distinct(List.flatten($$Array.to_list($$Array.map((function (student) {
                                return $$Array.to_list(StudentsEditor__StudentInfo.tags(student));
                              }), students)))));
}

function allKnownTags(incomingTags, appliedTags) {
  return ArrayUtils.distinct($$Array.append(appliedTags, incomingTags));
}

function handleResponseCB(submitCB, state, json) {
  var match = Json_decode.field("studentCount", (function (param) {
          return Json_decode.pair(Json_decode.$$int, Json_decode.$$int, param);
        }), json);
  var studentsRequested = match[1];
  var studentsAdded = match[0];
  var tags = appliedTags(state.studentsToAdd);
  Curry._1(submitCB, tags);
  if (studentsAdded === studentsRequested) {
    return $$Notification.success("Success", "All users were created successfully.");
  } else {
    var message = String(studentsAdded) + (" of " + (String(studentsRequested) + " students were added. Remaining students are already a part of the course."));
    return $$Notification.notice("Partially successful", message);
  }
}

function saveStudents(state, send, courseId, responseCB, $$event) {
  $$event.preventDefault();
  Curry._1(send, /* SetSaving */Block.__(2, [true]));
  var payload = { };
  payload["authenticity_token"] = AuthenticityToken.fromHead(/* () */0);
  payload["students"] = Json_encode.array(StudentsEditor__StudentInfo.encode, state.studentsToAdd);
  var url = "/school/courses/" + (courseId + "/students");
  return Api.create(url, payload, responseCB, (function (param) {
                return Curry._1(send, /* SetSaving */Block.__(2, [false]));
              }));
}

function teamHeader(teamName, studentsCount) {
  return React.createElement("div", {
              className: "flex justify-between mb-1"
            }, React.createElement("span", {
                  className: "text-tiny font-semibold"
                }, OptionUtils.mapWithDefault((function (teamName) {
                        return React.createElement("span", undefined, "TEAM: " + teamName);
                      }), null, teamName)), studentsCount > 1 ? null : React.createElement("span", {
                    className: "text-tiny"
                  }, React.createElement("i", {
                        className: "fas fa-exclamation-triangle text-orange-600 mr-1"
                      }), "Add more team members!"));
}

function renderTitleAndAffiliation(title, affiliation) {
  var match = title === "";
  var match$1 = affiliation === "";
  var text = match ? (
      match$1 ? undefined : affiliation
    ) : (
      match$1 ? title : title + (", " + affiliation)
    );
  if (text !== undefined) {
    return React.createElement("div", {
                className: "flex items-center"
              }, React.createElement("div", {
                    className: "mr-1 text-xs text-gray-600"
                  }, text));
  } else {
    return null;
  }
}

function initialState(param) {
  return {
          studentsToAdd: [],
          saving: false
        };
}

function reducer(state, action) {
  switch (action.tag | 0) {
    case /* AddStudentInfo */0 :
        return {
                studentsToAdd: $$Array.append([action[0]], state.studentsToAdd),
                saving: state.saving
              };
    case /* RemoveStudentInfo */1 :
        var studentInfo = action[0];
        return {
                studentsToAdd: state.studentsToAdd.filter((function (s) {
                        return StudentsEditor__StudentInfo.email(s) !== StudentsEditor__StudentInfo.email(studentInfo);
                      })),
                saving: state.saving
              };
    case /* SetSaving */2 :
        return {
                studentsToAdd: state.studentsToAdd,
                saving: action[0]
              };
    
  }
}

function studentCard(studentInfo, send) {
  return React.createElement("div", {
              key: StudentsEditor__StudentInfo.email(studentInfo),
              className: "flex justify-between"
            }, React.createElement("div", {
                  className: "flex flex-col flex-1 flex-wrap p-3"
                }, React.createElement("div", {
                      className: "flex items-center"
                    }, React.createElement("div", {
                          className: "mr-1 font-semibold"
                        }, StudentsEditor__StudentInfo.name(studentInfo)), React.createElement("div", {
                          className: "text-xs text-gray-600"
                        }, " (" + (StudentsEditor__StudentInfo.email(studentInfo) + ")"))), renderTitleAndAffiliation(StudentsEditor__StudentInfo.title(studentInfo), StudentsEditor__StudentInfo.affiliation(studentInfo)), React.createElement("div", {
                      className: "flex flex-wrap"
                    }, $$Array.map((function (tag) {
                            return React.createElement("div", {
                                        key: tag,
                                        className: "flex items-center bg-gray-200 border border-gray-500 rounded-lg px-2 py-px mt-1 mr-1 text-xs text-gray-900 overflow-hidden"
                                      }, tag);
                          }), StudentsEditor__StudentInfo.tags(studentInfo)))), React.createElement("button", {
                  className: "p-3 text-gray-700 hover:text-gray-900 hover:bg-gray-100",
                  onClick: (function (_event) {
                      return Curry._1(send, /* RemoveStudentInfo */Block.__(1, [studentInfo]));
                    })
                }, React.createElement("i", {
                      className: "fas fa-trash-alt"
                    })));
}

function teamNames(studentsToAdd) {
  return ArrayUtils.distinct($$Array.map(StudentsEditor__StudentInfo.teamName, studentsToAdd).filter((function (teamName) {
                    return OptionUtils.mapWithDefault((function (param) {
                                  return true;
                                }), false, teamName);
                  })));
}

function findStudentsInTeam(teamName, studentsToAdd) {
  return studentsToAdd.filter((function (s) {
                return Caml_obj.caml_equal(StudentsEditor__StudentInfo.teamName(s), teamName);
              }));
}

function loneStudents(studentsToAdd, send) {
  var students = studentsToAdd.filter((function (s) {
          return OptionUtils.mapWithDefault((function (param) {
                        return false;
                      }), true, StudentsEditor__StudentInfo.teamName(s));
        }));
  if (ArrayUtils.isNotEmpty(students)) {
    return React.createElement("div", undefined, $$Array.map((function (studentInfo) {
                      return React.createElement("div", {
                                  className: "bg-white-100 border shadow rounded-lg mt-2 px-2"
                                }, studentCard(studentInfo, send));
                    }), students));
  } else {
    return null;
  }
}

function StudentsEditor__CreateForm(Props) {
  var courseId = Props.courseId;
  var submitFormCB = Props.submitFormCB;
  var studentTags = Props.studentTags;
  var match = React.useReducer(reducer, {
        studentsToAdd: [],
        saving: false
      });
  var send = match[1];
  var state = match[0];
  var appliedTags$1 = appliedTags(state.studentsToAdd);
  var studentInfos = state.studentsToAdd;
  return React.createElement("div", {
              className: "mx-auto bg-white"
            }, React.createElement("div", {
                  className: "max-w-2xl p-6 mx-auto"
                }, React.createElement("h5", {
                      className: "uppercase text-center border-b border-gray-400 pb-2 mb-4"
                    }, "User Details"), React.createElement(StudentsEditor__StudentInfoForm.make, {
                      addToListCB: (function (studentInfo) {
                          return Curry._1(send, /* AddStudentInfo */Block.__(0, [studentInfo]));
                        }),
                      studentTags: ArrayUtils.distinct($$Array.append(appliedTags$1, studentTags)),
                      emailsToAdd: $$Array.map(StudentsEditor__StudentInfo.email, state.studentsToAdd)
                    }), React.createElement("div", undefined, React.createElement("div", {
                          className: "mt-5"
                        }, React.createElement("div", {
                              className: "inline-block tracking-wide text-xs font-semibold"
                            }, "These new users will be added to the course:"), studentInfos.length !== 0 ? $$Array.append([loneStudents(studentInfos, send)], $$Array.map((function (teamName) {
                                      var studentsInTeam = findStudentsInTeam(teamName, studentInfos);
                                      return React.createElement("div", {
                                                  className: "mt-3"
                                                }, teamHeader(teamName, studentsInTeam.length), React.createElement("div", {
                                                      className: "bg-white-100 border shadow rounded-lg"
                                                    }, $$Array.map((function (studentInfo) {
                                                            return studentCard(studentInfo, send);
                                                          }), studentsInTeam)));
                                    }), teamNames(studentInfos))) : React.createElement("div", {
                                className: "flex items-center justify-between bg-gray-100 border rounded p-3 italic mt-2"
                              }, "This list is empty! Add some users using the form above."))), React.createElement("div", {
                      className: "flex mt-4"
                    }, React.createElement("button", {
                          className: "w-full btn btn-primary btn-large mt-3" + (
                            ArrayUtils.isEmpty(state.studentsToAdd) ? " disabled" : ""
                          ),
                          disabled: state.saving || ArrayUtils.isEmpty(state.studentsToAdd),
                          onClick: (function (param) {
                              return saveStudents(state, send, courseId, (function (param) {
                                            return handleResponseCB(submitFormCB, state, param);
                                          }), param);
                            })
                        }, state.saving ? "Saving..." : "Save List"))));
}

var make = StudentsEditor__CreateForm;

exports.str = str;
exports.formInvalid = formInvalid;
exports.handleErrorCB = handleErrorCB;
exports.appliedTags = appliedTags;
exports.allKnownTags = allKnownTags;
exports.handleResponseCB = handleResponseCB;
exports.saveStudents = saveStudents;
exports.teamHeader = teamHeader;
exports.renderTitleAndAffiliation = renderTitleAndAffiliation;
exports.initialState = initialState;
exports.reducer = reducer;
exports.studentCard = studentCard;
exports.teamNames = teamNames;
exports.findStudentsInTeam = findStudentsInTeam;
exports.loneStudents = loneStudents;
exports.make = make;
/* Api Not a pure module */
