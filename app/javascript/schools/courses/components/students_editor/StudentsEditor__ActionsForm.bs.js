// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FaIcon = require("../../../../shared/components/FaIcon.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var HelpIcon = require("../../../../shared/components/HelpIcon.bs.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../../shared/utils/GraphqlQuery.bs.js");
var StudentsEditor__Student = require("../../types/students_editor/StudentsEditor__Student.bs.js");

var ppx_printed_query = "mutation DropoutStudentMutation($id: ID!)  {\ndropoutStudent(id: $id)  {\nsuccess  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "dropoutStudent");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type DropoutStudentPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field dropoutStudent on type Mutation is missing");
  }
  return {
          dropoutStudent: tmp
        };
}

function make(id, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(id, param) {
  return Js_dict.fromArray([/* tuple */[
                  "id",
                  id
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, id, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "id",
                      id
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var DropoutStudentQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function dropoutStudent(id, setSaving, reloadTeamsCB, $$event) {
  $$event.preventDefault();
  Curry._1(setSaving, (function (param) {
          return true;
        }));
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make(id, /* () */0)).then((function (response) {
          if (response.dropoutStudent.success) {
            Curry._1(reloadTeamsCB, /* () */0);
          } else {
            Curry._1(setSaving, (function (param) {
                    return false;
                  }));
          }
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function str(prim) {
  return prim;
}

function submitButtonIcons(saving) {
  if (saving) {
    return "fas fa-spinner fa-spin";
  } else {
    return "fa fa-exclamation-triangle";
  }
}

function StudentsEditor__ActionsForm(Props) {
  var student = Props.student;
  var reloadTeamsCB = Props.reloadTeamsCB;
  var match = React.useState((function () {
          return false;
        }));
  var setSaving = match[1];
  var saving = match[0];
  var partial_arg = StudentsEditor__Student.id(student);
  return React.createElement("div", {
              className: "mt-5"
            }, React.createElement("label", {
                  className: "tracking-wide text-xs font-semibold",
                  htmlFor: "access-ends-at-input"
                }, "Has this student dropped out?"), React.createElement(HelpIcon.make, {
                  className: "ml-2",
                  link: "https://docs.pupilfirst.com/#/students?id=student-actions",
                  children: "Marking a student as dropped out will remove all of their access to the course."
                }), React.createElement("div", {
                  className: "mt-2"
                }, React.createElement("button", {
                      className: "btn btn-danger btn-large",
                      disabled: saving,
                      onClick: (function (param) {
                          return dropoutStudent(partial_arg, setSaving, reloadTeamsCB, param);
                        })
                    }, React.createElement(FaIcon.make, {
                          classes: saving ? "fas fa-spinner fa-spin" : "fa fa-exclamation-triangle"
                        }), React.createElement("span", {
                          className: "ml-2"
                        }, "Dropout Student"))));
}

var make$1 = StudentsEditor__ActionsForm;

exports.DropoutStudentQuery = DropoutStudentQuery;
exports.dropoutStudent = dropoutStudent;
exports.str = str;
exports.submitButtonIcons = submitButtonIcons;
exports.make = make$1;
/* react Not a pure module */
