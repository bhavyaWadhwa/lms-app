// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var MultiselectDropdown = require("../../../../packages/multiselect-dropdown/src/components/MultiselectDropdown.bs.js");
var StudentsEditor__Level = require("../../types/students_editor/StudentsEditor__Level.bs.js");
var StudentsEditor__Filter = require("../../types/students_editor/StudentsEditor__Filter.bs.js");

function str(prim) {
  return prim;
}

function label(t) {
  var tmp;
  switch (t.tag | 0) {
    case /* Level */0 :
        tmp = "Level " + String(StudentsEditor__Level.number(t[0]));
        break;
    case /* Tag */1 :
        tmp = "Tag";
        break;
    case /* NameOrEmail */2 :
        tmp = "Name or Email";
        break;
    
  }
  return tmp;
}

function value(t) {
  switch (t.tag | 0) {
    case /* Level */0 :
        return StudentsEditor__Level.name(t[0]);
    case /* Tag */1 :
    case /* NameOrEmail */2 :
        return t[0];
    
  }
}

function searchString(t) {
  switch (t.tag | 0) {
    case /* Level */0 :
        return StudentsEditor__Level.title(t[0]);
    case /* Tag */1 :
        return "tag " + t[0];
    case /* NameOrEmail */2 :
        return t[0];
    
  }
}

function color(t) {
  switch (t.tag | 0) {
    case /* Level */0 :
        return "orange";
    case /* Tag */1 :
        return "gray";
    case /* NameOrEmail */2 :
        return "purple";
    
  }
}

function makeLevel(level) {
  return /* Level */Block.__(0, [level]);
}

function makeTag(tag) {
  return /* Tag */Block.__(1, [tag]);
}

function makeNameOrEmail(input) {
  return /* NameOrEmail */Block.__(2, [input]);
}

var Selectable = {
  label: label,
  value: value,
  searchString: searchString,
  color: color,
  makeLevel: makeLevel,
  makeTag: makeTag,
  makeNameOrEmail: makeNameOrEmail
};

var MultiselectDropdown$1 = MultiselectDropdown.Make(Selectable);

function updateFilter(setSearchInput, updateFilterCB, filter) {
  Curry._1(updateFilterCB, filter);
  return Curry._1(setSearchInput, (function (param) {
                return "";
              }));
}

function selected(filter, levels) {
  var match = StudentsEditor__Filter.levelId(filter);
  var level = match !== undefined ? [/* Level */Block.__(0, [StudentsEditor__Level.unsafeFind(levels, "Search", match)])] : [];
  var match$1 = StudentsEditor__Filter.searchString(filter);
  var searchString;
  if (match$1 !== undefined) {
    var s = match$1;
    searchString = s.trim() === "" ? [] : [/* NameOrEmail */Block.__(2, [s])];
  } else {
    searchString = [];
  }
  var tags = $$Array.map((function (t) {
          return /* Tag */Block.__(1, [t]);
        }), StudentsEditor__Filter.tags(filter));
  return $$Array.append(level, $$Array.append(tags, searchString));
}

function unselected(tags, levels, filter, searchInput) {
  var tagSuggestions = $$Array.map((function (t) {
          return /* Tag */Block.__(1, [t]);
        }), tags.filter((function (t) {
              return !$$Array.mem(t, StudentsEditor__Filter.tags(filter));
            })));
  var match = StudentsEditor__Filter.levelId(filter);
  var tmp;
  if (match !== undefined) {
    var levelId = match;
    tmp = levels.filter((function (l) {
            return StudentsEditor__Level.id(l) !== levelId;
          }));
  } else {
    tmp = levels;
  }
  var levelSuggestions = $$Array.map((function (l) {
          return /* Level */Block.__(0, [l]);
        }), tmp);
  var searchSuggestion = searchInput.trim() === "" ? [] : [/* NameOrEmail */Block.__(2, [searchInput])];
  return $$Array.append(levelSuggestions, $$Array.append(tagSuggestions, searchSuggestion));
}

function select(filter, updateFilterCB, setSearchInput, selectable) {
  var filter$1;
  switch (selectable.tag | 0) {
    case /* Level */0 :
        filter$1 = StudentsEditor__Filter.changeLevelId(StudentsEditor__Level.id(selectable[0]), filter);
        break;
    case /* Tag */1 :
        filter$1 = StudentsEditor__Filter.addTag(selectable[0], filter);
        break;
    case /* NameOrEmail */2 :
        filter$1 = StudentsEditor__Filter.changeSearchString(selectable[0], filter);
        break;
    
  }
  Curry._1(updateFilterCB, filter$1);
  return Curry._1(setSearchInput, (function (param) {
                return "";
              }));
}

function deselect(filter, updateFilterCB, selectable) {
  var tmp;
  switch (selectable.tag | 0) {
    case /* Level */0 :
        tmp = StudentsEditor__Filter.removeLevelId(filter);
        break;
    case /* Tag */1 :
        tmp = StudentsEditor__Filter.removeTag(selectable[0], filter);
        break;
    case /* NameOrEmail */2 :
        tmp = StudentsEditor__Filter.removeSearchString(filter);
        break;
    
  }
  return Curry._1(updateFilterCB, tmp);
}

function updateSearchInput(setSearchInput, searchInput) {
  return Curry._1(setSearchInput, (function (param) {
                return searchInput;
              }));
}

function StudentsEditor__Search(Props) {
  var filter = Props.filter;
  var updateFilterCB = Props.updateFilterCB;
  var tags = Props.tags;
  var levels = Props.levels;
  var match = React.useState((function () {
          return "";
        }));
  var setSearchInput = match[1];
  var searchInput = match[0];
  var id = "search";
  return React.createElement("div", {
              className: "inline-block w-full"
            }, React.createElement("label", {
                  className: "block text-tiny font-semibold uppercase",
                  htmlFor: id
                }, "Filter by:"), React.createElement(MultiselectDropdown$1.make, {
                  id: id,
                  placeholder: "Type name, tag or level",
                  onChange: (function (param) {
                      return Curry._1(setSearchInput, (function (param$1) {
                                    return param;
                                  }));
                    }),
                  value: searchInput,
                  unselected: unselected(tags, levels, filter, searchInput),
                  selected: selected(filter, levels),
                  onSelect: (function (param) {
                      return select(filter, updateFilterCB, setSearchInput, param);
                    }),
                  onDeselect: (function (param) {
                      return deselect(filter, updateFilterCB, param);
                    })
                }));
}

var make = StudentsEditor__Search;

exports.str = str;
exports.Selectable = Selectable;
exports.MultiselectDropdown = MultiselectDropdown$1;
exports.updateFilter = updateFilter;
exports.selected = selected;
exports.unselected = unselected;
exports.select = select;
exports.deselect = deselect;
exports.updateSearchInput = updateSearchInput;
exports.make = make;
/* MultiselectDropdown Not a pure module */
