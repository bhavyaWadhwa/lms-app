// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Api = require("../../../../shared/Api.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var DateFns = require("../../../../shared/utils/DateFns.bs.js");
var HelpIcon = require("../../../../shared/components/HelpIcon.bs.js");
var DatePicker = require("../../../../shared/components/DatePicker.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var OptionUtils = require("../../../../shared/utils/OptionUtils.bs.js");
var $$Notification = require("../../../../shared/Notification.bs.js");
var DisablingCover = require("../../../../shared/components/DisablingCover.bs.js");
var AuthenticityToken = require("../../../../shared/utils/AuthenticityToken.bs.js");
var MultiselectInline = require("../../../../packages/multiselect-inline/src/components/MultiselectInline.bs.js");
var StudentsEditor__Team = require("../../types/students_editor/StudentsEditor__Team.bs.js");
var StudentsEditor__Coach = require("../../types/students_editor/StudentsEditor__Coach.bs.js");
var School__InputGroupError = require("../../../shared/components/School__InputGroupError.bs.js");
var StudentsEditor__Student = require("../../types/students_editor/StudentsEditor__Student.bs.js");
var StudentsEditor__SearchableTagList = require("./StudentsEditor__SearchableTagList.bs.js");

function str(prim) {
  return prim;
}

function stringInputInvalid(s) {
  return s.length < 2;
}

function updateName(send, name) {
  return Curry._1(send, /* UpdateName */Block.__(0, [name]));
}

function updateTeamName(send, teamName) {
  return Curry._1(send, /* UpdateTeamName */Block.__(1, [teamName]));
}

function updateTitle(send, title) {
  return Curry._1(send, /* UpdateTitle */Block.__(7, [title]));
}

function formInvalid(state) {
  if (state.name.length < 2 || state.teamName.length < 2) {
    return true;
  } else {
    return state.title.length < 2;
  }
}

function handleErrorCB(send, param) {
  return Curry._1(send, /* UpdateSaving */Block.__(9, [false]));
}

function successMessage(accessEndsAt, isSingleFounder) {
  if (accessEndsAt !== undefined) {
    var match = DateFns.isPast(Caml_option.valFromOption(accessEndsAt));
    if (match) {
      if (isSingleFounder) {
        return "Student has been updated, and moved to list of inactive students";
      } else {
        return "Team has been updated, and moved to list of inactive students";
      }
    } else {
      return "Student updated successfully";
    }
  } else {
    return "Student updated successfully";
  }
}

function enrolledCoachIds(teamCoaches) {
  return $$Array.map((function (param) {
                return param[0];
              }), teamCoaches.filter((function (param) {
                    return param[2] === true;
                  })));
}

function handleResponseCB(updateFormCB, state, student, oldTeam, _json) {
  var text = $$String.trim(state.affiliation);
  var affiliation = text === "" ? undefined : text;
  var newStudent = StudentsEditor__Student.update(state.name, state.tagsToApply, state.excludedFromLeaderboard, state.title, affiliation, student);
  var newTeam = StudentsEditor__Team.update(state.teamName, newStudent, state.teamCoaches, state.accessEndsAt, oldTeam);
  var team = StudentsEditor__Team.active(newTeam) ? newTeam : undefined;
  Curry._2(updateFormCB, state.tagsToApply, team);
  return $$Notification.success("Success", successMessage(state.accessEndsAt, StudentsEditor__Team.isSingleStudent(newTeam)));
}

function updateStudent(student, state, send, responseCB) {
  Curry._1(send, /* UpdateSaving */Block.__(9, [true]));
  var payload = { };
  payload["authenticity_token"] = AuthenticityToken.fromHead(/* () */0);
  var updatedStudent = StudentsEditor__Student.updateInfo(state.name, state.excludedFromLeaderboard, state.title, state.affiliation, student);
  payload["founder"] = StudentsEditor__Student.encode(state.teamName, updatedStudent);
  payload["tags"] = Json_encode.array((function (prim) {
          return prim;
        }), state.tagsToApply);
  payload["coach_ids"] = Json_encode.array((function (prim) {
          return prim;
        }), state.teamCoaches);
  payload["access_ends_at"] = Belt_Option.mapWithDefault(state.accessEndsAt, "", DateFns.encodeISO);
  var url = "/school/students/" + StudentsEditor__Student.id(student);
  return Api.update(url, payload, responseCB, (function (param) {
                return Curry._1(send, /* UpdateSaving */Block.__(9, [false]));
              }));
}

function boolBtnClasses(selected) {
  return "toggle-button__button" + (
          selected ? " toggle-button__button--active" : ""
        );
}

function handleTeamCoachList(schoolCoaches, team) {
  var selectedTeamCoachIds = StudentsEditor__Team.coachIds(team);
  return $$Array.map((function (coach) {
                var coachId = StudentsEditor__Coach.id(coach);
                var selected = selectedTeamCoachIds.findIndex((function (selectedCoachId) {
                        return coachId === selectedCoachId;
                      })) > -1;
                return /* tuple */[
                        StudentsEditor__Coach.id(coach),
                        StudentsEditor__Coach.name(coach),
                        selected
                      ];
              }), schoolCoaches);
}

var value = StudentsEditor__Coach.name;

function make(coach) {
  return coach;
}

var SelectablePrerequisiteTargets = {
  value: value,
  searchString: value,
  make: make
};

function setTeamCoachSearch(send, value) {
  return Curry._1(send, /* UpdateCoachSearchInput */Block.__(5, [value]));
}

function selectTeamCoach(send, state, coach) {
  var updatedTeamCoaches = state.teamCoaches.concat([StudentsEditor__Coach.id(coach)]);
  return Curry._1(send, /* UpdateCoachesList */Block.__(4, [updatedTeamCoaches]));
}

function deSelectTeamCoach(send, state, coach) {
  var updatedTeamCoaches = state.teamCoaches.filter((function (coachId) {
          return coachId !== StudentsEditor__Coach.id(coach);
        }));
  return Curry._1(send, /* UpdateCoachesList */Block.__(4, [updatedTeamCoaches]));
}

var MultiselectForTeamCoaches = MultiselectInline.Make(SelectablePrerequisiteTargets);

function teamCoachesEditor(courseCoaches, state, send) {
  var selected = $$Array.map((function (coach) {
          return coach;
        }), courseCoaches.filter((function (coach) {
              return $$Array.mem(StudentsEditor__Coach.id(coach), state.teamCoaches);
            })));
  var unselected = $$Array.map((function (coach) {
          return coach;
        }), courseCoaches.filter((function (coach) {
              return !$$Array.mem(StudentsEditor__Coach.id(coach), state.teamCoaches);
            })));
  return React.createElement("div", {
              className: "mt-2"
            }, React.createElement(MultiselectForTeamCoaches.make, {
                  placeholder: "Search coaches",
                  onChange: (function (param) {
                      return Curry._1(send, /* UpdateCoachSearchInput */Block.__(5, [param]));
                    }),
                  value: state.teamCoachSearchInput,
                  unselected: unselected,
                  selected: selected,
                  onSelect: (function (param) {
                      return selectTeamCoach(send, state, param);
                    }),
                  onDeselect: (function (param) {
                      return deSelectTeamCoach(send, state, param);
                    }),
                  emptySelectionMessage: "No coaches selected",
                  allItemsSelectedMessage: "You have selected all available coaches!"
                }));
}

function initialState(student, team) {
  return {
          name: StudentsEditor__Student.name(student),
          teamName: StudentsEditor__Team.name(team),
          tagsToApply: StudentsEditor__Student.tags(student),
          teamCoaches: StudentsEditor__Team.coachIds(team),
          teamCoachSearchInput: "",
          excludedFromLeaderboard: StudentsEditor__Student.excludedFromLeaderboard(student),
          title: StudentsEditor__Student.title(student),
          affiliation: OptionUtils.toString(StudentsEditor__Student.affiliation(student)),
          saving: false,
          accessEndsAt: StudentsEditor__Team.accessEndsAt(team)
        };
}

function reducer(state, action) {
  switch (action.tag | 0) {
    case /* UpdateName */0 :
        return {
                name: action[0],
                teamName: state.teamName,
                tagsToApply: state.tagsToApply,
                teamCoaches: state.teamCoaches,
                teamCoachSearchInput: state.teamCoachSearchInput,
                excludedFromLeaderboard: state.excludedFromLeaderboard,
                title: state.title,
                affiliation: state.affiliation,
                saving: state.saving,
                accessEndsAt: state.accessEndsAt
              };
    case /* UpdateTeamName */1 :
        return {
                name: state.name,
                teamName: action[0],
                tagsToApply: state.tagsToApply,
                teamCoaches: state.teamCoaches,
                teamCoachSearchInput: state.teamCoachSearchInput,
                excludedFromLeaderboard: state.excludedFromLeaderboard,
                title: state.title,
                affiliation: state.affiliation,
                saving: state.saving,
                accessEndsAt: state.accessEndsAt
              };
    case /* AddTag */2 :
        return {
                name: state.name,
                teamName: state.teamName,
                tagsToApply: $$Array.append([action[0]], state.tagsToApply),
                teamCoaches: state.teamCoaches,
                teamCoachSearchInput: state.teamCoachSearchInput,
                excludedFromLeaderboard: state.excludedFromLeaderboard,
                title: state.title,
                affiliation: state.affiliation,
                saving: state.saving,
                accessEndsAt: state.accessEndsAt
              };
    case /* RemoveTag */3 :
        var tag = action[0];
        return {
                name: state.name,
                teamName: state.teamName,
                tagsToApply: state.tagsToApply.filter((function (t) {
                        return t !== tag;
                      })),
                teamCoaches: state.teamCoaches,
                teamCoachSearchInput: state.teamCoachSearchInput,
                excludedFromLeaderboard: state.excludedFromLeaderboard,
                title: state.title,
                affiliation: state.affiliation,
                saving: state.saving,
                accessEndsAt: state.accessEndsAt
              };
    case /* UpdateCoachesList */4 :
        return {
                name: state.name,
                teamName: state.teamName,
                tagsToApply: state.tagsToApply,
                teamCoaches: action[0],
                teamCoachSearchInput: state.teamCoachSearchInput,
                excludedFromLeaderboard: state.excludedFromLeaderboard,
                title: state.title,
                affiliation: state.affiliation,
                saving: state.saving,
                accessEndsAt: state.accessEndsAt
              };
    case /* UpdateCoachSearchInput */5 :
        return {
                name: state.name,
                teamName: state.teamName,
                tagsToApply: state.tagsToApply,
                teamCoaches: state.teamCoaches,
                teamCoachSearchInput: action[0],
                excludedFromLeaderboard: state.excludedFromLeaderboard,
                title: state.title,
                affiliation: state.affiliation,
                saving: state.saving,
                accessEndsAt: state.accessEndsAt
              };
    case /* UpdateExcludedFromLeaderboard */6 :
        return {
                name: state.name,
                teamName: state.teamName,
                tagsToApply: state.tagsToApply,
                teamCoaches: state.teamCoaches,
                teamCoachSearchInput: state.teamCoachSearchInput,
                excludedFromLeaderboard: action[0],
                title: state.title,
                affiliation: state.affiliation,
                saving: state.saving,
                accessEndsAt: state.accessEndsAt
              };
    case /* UpdateTitle */7 :
        return {
                name: state.name,
                teamName: state.teamName,
                tagsToApply: state.tagsToApply,
                teamCoaches: state.teamCoaches,
                teamCoachSearchInput: state.teamCoachSearchInput,
                excludedFromLeaderboard: state.excludedFromLeaderboard,
                title: action[0],
                affiliation: state.affiliation,
                saving: state.saving,
                accessEndsAt: state.accessEndsAt
              };
    case /* UpdateAffiliation */8 :
        return {
                name: state.name,
                teamName: state.teamName,
                tagsToApply: state.tagsToApply,
                teamCoaches: state.teamCoaches,
                teamCoachSearchInput: state.teamCoachSearchInput,
                excludedFromLeaderboard: state.excludedFromLeaderboard,
                title: state.title,
                affiliation: action[0],
                saving: state.saving,
                accessEndsAt: state.accessEndsAt
              };
    case /* UpdateSaving */9 :
        return {
                name: state.name,
                teamName: state.teamName,
                tagsToApply: state.tagsToApply,
                teamCoaches: state.teamCoaches,
                teamCoachSearchInput: state.teamCoachSearchInput,
                excludedFromLeaderboard: state.excludedFromLeaderboard,
                title: state.title,
                affiliation: state.affiliation,
                saving: action[0],
                accessEndsAt: state.accessEndsAt
              };
    case /* UpdateAccessEndsAt */10 :
        return {
                name: state.name,
                teamName: state.teamName,
                tagsToApply: state.tagsToApply,
                teamCoaches: state.teamCoaches,
                teamCoachSearchInput: state.teamCoachSearchInput,
                excludedFromLeaderboard: state.excludedFromLeaderboard,
                title: state.title,
                affiliation: state.affiliation,
                saving: state.saving,
                accessEndsAt: action[0]
              };
    
  }
}

function StudentsEditor__UpdateDetailsForm(Props) {
  var student = Props.student;
  var team = Props.team;
  var studentTags = Props.studentTags;
  var courseCoaches = Props.courseCoaches;
  var updateFormCB = Props.updateFormCB;
  var match = React.useReducer(reducer, initialState(student, team));
  var send = match[1];
  var state = match[0];
  var isSingleStudent = StudentsEditor__Team.isSingleStudent(team);
  var tmp = {
    onChange: (function (date) {
        return Curry._1(send, /* UpdateAccessEndsAt */Block.__(10, [date]));
      }),
    id: "access-ends-at-input"
  };
  if (state.accessEndsAt !== undefined) {
    tmp.selected = Caml_option.valFromOption(state.accessEndsAt);
  }
  return React.createElement(DisablingCover.make, {
              disabled: state.saving,
              children: null
            }, React.createElement("div", undefined, React.createElement("div", {
                      className: "pt-5"
                    }, React.createElement("label", {
                          className: "inline-block tracking-wide text-xs font-semibold mb-2 leading-tight",
                          htmlFor: "name"
                        }, "Name"), React.createElement("input", {
                          className: "appearance-none block w-full bg-white border border-gray-400 rounded py-3 px-4 leading-snug focus:outline-none focus:bg-white focus:border-gray-500",
                          id: "name",
                          placeholder: "User name here",
                          type: "text",
                          value: state.name,
                          onChange: (function ($$event) {
                              var name = $$event.target.value;
                              return Curry._1(send, /* UpdateName */Block.__(0, [name]));
                            })
                        }), React.createElement(School__InputGroupError.make, {
                          message: "Name must have at least two characters",
                          active: state.name.length < 2
                        })), isSingleStudent ? null : React.createElement("div", {
                        className: "mt-5"
                      }, React.createElement("label", {
                            className: "inline-block tracking-wide text-xs font-semibold mb-2 leading-tight",
                            htmlFor: "team_name"
                          }, "Team Name"), React.createElement("input", {
                            className: "appearance-none block w-full bg-white border border-gray-400 rounded py-3 px-4 leading-snug focus:outline-none focus:bg-white focus:border-gray-500",
                            id: "team_name",
                            maxLength: 50,
                            placeholder: "Team name here",
                            type: "text",
                            value: state.teamName,
                            onChange: (function ($$event) {
                                var teamName = $$event.target.value;
                                return Curry._1(send, /* UpdateTeamName */Block.__(1, [teamName]));
                              })
                          }), React.createElement(School__InputGroupError.make, {
                            message: "Team Name must have at least two characters",
                            active: state.teamName.length < 2
                          })), React.createElement("div", {
                      className: "mt-5"
                    }, React.createElement("label", {
                          className: "inline-block tracking-wide text-xs font-semibold mb-2 leading-tight",
                          htmlFor: "title"
                        }, "Title"), React.createElement("input", {
                          className: "appearance-none block w-full bg-white border border-gray-400 rounded py-3 px-4 leading-snug focus:outline-none focus:bg-white focus:border-gray-500",
                          id: "title",
                          placeholder: "User, Coach, CEO, etc.",
                          type: "text",
                          value: state.title,
                          onChange: (function ($$event) {
                              var title = $$event.target.value;
                              return Curry._1(send, /* UpdateTitle */Block.__(7, [title]));
                            })
                        }), React.createElement(School__InputGroupError.make, {
                          message: "Title must have at least two characters",
                          active: state.title.length < 2
                        })), React.createElement("div", {
                      className: "mt-5"
                    }, React.createElement("label", {
                          className: "inline-block tracking-wide text-xs font-semibold mb-2 leading-tight",
                          htmlFor: "affiliation"
                        }, "Affiliation"), React.createElement("span", {
                          className: "text-xs ml-1"
                        }, "(optional)"), React.createElement("input", {
                          className: "appearance-none block w-full bg-white border border-gray-400 rounded py-3 px-4 leading-snug focus:outline-none focus:bg-white focus:border-gray-500",
                          id: "affiliation",
                          placeholder: "Acme Inc., Acme University, etc.",
                          type: "text",
                          value: state.affiliation,
                          onChange: (function ($$event) {
                              return Curry._1(send, /* UpdateAffiliation */Block.__(8, [$$event.target.value]));
                            })
                        })), React.createElement("div", {
                      className: "mt-5"
                    }, React.createElement("div", {
                          className: "border-b pb-4 mb-2 mt-5 "
                        }, React.createElement("span", {
                              className: "inline-block mr-1 text-xs font-semibold"
                            }, isSingleStudent ? "Personal Coaches" : "Team Coaches"), teamCoachesEditor(courseCoaches, state, send))), React.createElement("div", {
                      className: "mt-5"
                    }, React.createElement("div", {
                          className: "mb-2 text-xs font-semibold"
                        }, "Tags applied:"), React.createElement(StudentsEditor__SearchableTagList.make, {
                          unselectedTags: studentTags.filter((function (tag) {
                                  return !$$Array.mem(tag, state.tagsToApply);
                                })),
                          selectedTags: state.tagsToApply,
                          addTagCB: (function (tag) {
                              return Curry._1(send, /* AddTag */Block.__(2, [tag]));
                            }),
                          removeTagCB: (function (tag) {
                              return Curry._1(send, /* RemoveTag */Block.__(3, [tag]));
                            }),
                          allowNewTags: true
                        })), React.createElement("div", {
                      className: "mt-5"
                    }, React.createElement("div", {
                          className: "flex items-center flex-shrink-0"
                        }, React.createElement("label", {
                              className: "block tracking-wide text-xs font-semibold mr-3"
                            }, "Should this student be excluded from leaderboards?"), React.createElement("div", {
                              className: "flex flex-shrink-0 rounded-lg overflow-hidden border border-gray-400"
                            }, React.createElement("button", {
                                  className: boolBtnClasses(state.excludedFromLeaderboard),
                                  title: "Exclude this student from the leaderboard",
                                  onClick: (function ($$event) {
                                      $$event.preventDefault();
                                      return Curry._1(send, /* UpdateExcludedFromLeaderboard */Block.__(6, [true]));
                                    })
                                }, "Yes"), React.createElement("button", {
                                  className: boolBtnClasses(!state.excludedFromLeaderboard),
                                  title: "Include this student in the leaderboard",
                                  onClick: (function (_event) {
                                      _event.preventDefault();
                                      return Curry._1(send, /* UpdateExcludedFromLeaderboard */Block.__(6, [false]));
                                    })
                                }, "No")))), React.createElement("div", {
                      className: "mt-5"
                    }, React.createElement("label", {
                          className: "tracking-wide text-xs font-semibold",
                          htmlFor: "access-ends-at-input"
                        }, (
                          isSingleStudent ? "Student's" : "Team's"
                        ) + " Access Ends On"), React.createElement("span", {
                          className: "ml-1 text-xs"
                        }, "(optional)"), React.createElement(HelpIcon.make, {
                          className: "ml-2",
                          link: "https://docs.pupilfirst.com/#/students?id=editing-student-details",
                          children: "If set, students will not be able to complete targets after this date."
                        }), React.createElement(DatePicker.make, tmp))), React.createElement("div", {
                  className: "my-5 w-auto"
                }, React.createElement("button", {
                      className: "w-full btn btn-large btn-primary",
                      disabled: formInvalid(state),
                      onClick: (function (_e) {
                          return updateStudent(student, state, send, (function (param) {
                                        return handleResponseCB(updateFormCB, state, student, team, param);
                                      }));
                        })
                    }, "Update Student")));
}

var make$1 = StudentsEditor__UpdateDetailsForm;

exports.str = str;
exports.stringInputInvalid = stringInputInvalid;
exports.updateName = updateName;
exports.updateTeamName = updateTeamName;
exports.updateTitle = updateTitle;
exports.formInvalid = formInvalid;
exports.handleErrorCB = handleErrorCB;
exports.successMessage = successMessage;
exports.enrolledCoachIds = enrolledCoachIds;
exports.handleResponseCB = handleResponseCB;
exports.updateStudent = updateStudent;
exports.boolBtnClasses = boolBtnClasses;
exports.handleTeamCoachList = handleTeamCoachList;
exports.SelectablePrerequisiteTargets = SelectablePrerequisiteTargets;
exports.setTeamCoachSearch = setTeamCoachSearch;
exports.selectTeamCoach = selectTeamCoach;
exports.deSelectTeamCoach = deSelectTeamCoach;
exports.MultiselectForTeamCoaches = MultiselectForTeamCoaches;
exports.teamCoachesEditor = teamCoachesEditor;
exports.initialState = initialState;
exports.reducer = reducer;
exports.make = make$1;
/* MultiselectForTeamCoaches Not a pure module */
