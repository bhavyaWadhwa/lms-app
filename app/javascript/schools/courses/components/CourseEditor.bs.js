// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var CourseEditor__Form = require("./course_editor/CourseEditor__Form.bs.js");
var CourseEditor__Course = require("../types/course_editor/CourseEditor__Course.bs.js");
var CourseEditor__ImagesForm = require("./course_editor/CourseEditor__ImagesForm.bs.js");

((require("courses/shared/background_patterns.css")));

function str(prim) {
  return prim;
}

var ppx_printed_query = "query CoursesQuery  {\ncourses  {\n..." + CourseEditor__Course.Fragments.AllFields.name + "   \n}\n\n}\n" + CourseEditor__Course.Fragments.AllFields.query;

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "courses");
  return {
          courses: match !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match))).map((function (value) {
                    return Curry._1(CourseEditor__Course.Fragments.AllFields.parse, value);
                  })) : Js_exn.raiseError("graphql_ppx: Field courses on type Query is missing")
        };
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeVariables(param) {
  return null;
}

function definition_002(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var CoursesQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function reducer(state, action) {
  switch (action.tag | 0) {
    case /* UpdateEditorAction */0 :
        return {
                editorAction: action[0],
                courses: state.courses
              };
    case /* UpdateCourse */1 :
        var newCourses = CourseEditor__Course.updateList(state.courses, action[0]);
        return {
                editorAction: /* Hidden */0,
                courses: newCourses
              };
    case /* UpdateCourses */2 :
        return {
                editorAction: state.editorAction,
                courses: action[0]
              };
    
  }
}

function hideEditorAction(send, param) {
  return Curry._1(send, /* UpdateEditorAction */Block.__(0, [/* Hidden */0]));
}

function updateCourse(send, course) {
  return Curry._1(send, /* UpdateCourse */Block.__(1, [course]));
}

function courseLinks(course) {
  return React.createElement("div", {
              className: "flex"
            }, React.createElement("a", {
                  className: "text-primary-500 bg-gray-100 hover:bg-gray-200 border-l text-sm font-semibold items-center p-4 flex cursor-pointer",
                  href: "/school/courses/" + (CourseEditor__Course.id(course) + "/curriculum")
                }, "Curriculum"), React.createElement("a", {
                  className: "text-primary-500 bg-gray-100 hover:bg-gray-200 border-l text-sm font-semibold items-center p-4 flex cursor-pointer",
                  href: "/school/courses/" + (CourseEditor__Course.id(course) + "/students")
                }, "Users"), React.createElement("a", {
                  className: "text-primary-500 bg-gray-100 hover:bg-gray-200 border-l text-sm font-semibold items-center p-4 flex cursor-pointer",
                  href: "/school/courses/" + (CourseEditor__Course.id(course) + "/coaches")
                }, "Coaches"), React.createElement("a", {
                  className: "text-primary-500 bg-gray-100 hover:bg-gray-200 border-l text-sm font-semibold items-center p-4 flex cursor-pointer",
                  href: "/school/courses/" + (CourseEditor__Course.id(course) + "/exports")
                }, "Exports"));
}

function CourseEditor(Props) {
  var match = React.useReducer(reducer, {
        editorAction: /* Hidden */0,
        courses: /* [] */0
      });
  var send = match[1];
  var state = match[0];
  React.useEffect((function () {
          (function (eta) {
                  return GraphqlQuery.sendQuery(undefined, eta);
                })(make(/* () */0)).then((function (result) {
                  var courses = $$Array.to_list(result.courses.map(CourseEditor__Course.makeFromJs));
                  Curry._1(send, /* UpdateCourses */Block.__(2, [courses]));
                  return Promise.resolve(/* () */0);
                }));
          return ;
        }), ([]));
  var match$1 = state.editorAction;
  var tmp;
  tmp = typeof match$1 === "number" ? null : (
      match$1.tag ? React.createElement(CourseEditor__ImagesForm.make, {
              course: match$1[0],
              updateCourseCB: (function (param) {
                  return Curry._1(send, /* UpdateCourse */Block.__(1, [param]));
                }),
              closeDrawerCB: (function (param) {
                  return Curry._1(send, /* UpdateEditorAction */Block.__(0, [/* Hidden */0]));
                })
            }) : React.createElement(CourseEditor__Form.make, {
              course: match$1[0],
              hideEditorActionCB: (function (param) {
                  return Curry._1(send, /* UpdateEditorAction */Block.__(0, [/* Hidden */0]));
                }),
              updateCourseCB: (function (param) {
                  return Curry._1(send, /* UpdateCourse */Block.__(1, [param]));
                })
            })
    );
  return React.createElement("div", {
              className: "flex flex-1 h-full bg-gray-200 overflow-y-scroll"
            }, tmp, React.createElement("div", {
                  className: "flex-1 flex flex-col"
                }, React.createElement("div", {
                      className: "items-center justify-between max-w-3xl mx-auto mt-8 w-full px-2"
                    }, React.createElement("button", {
                          className: "w-full flex items-center justify-center relative bg-white text-primary-500 hover:bg-gray-100 hover:text-primary-600 hover:shadow-md focus:outline-none border-2 border-gray-400 border-dashed hover:border-primary-300 p-6 rounded-lg cursor-pointer",
                          onClick: (function (param) {
                              return Curry._1(send, /* UpdateEditorAction */Block.__(0, [/* ShowForm */Block.__(0, [undefined])]));
                            })
                        }, React.createElement("i", {
                              className: "fas fa-plus-circle text-lg"
                            }), React.createElement("span", {
                              className: "font-semibold ml-2"
                            }, "Add New Course"))), React.createElement("div", {
                      className: "px-6 pb-4 mt-5 flex flex-1"
                    }, React.createElement("div", {
                          className: "max-w-3xl flex flex-wrap mx-auto w-full"
                        }, $$Array.of_list(List.map((function (course) {
                                    var match = CourseEditor__Course.thumbnail(course);
                                    return React.createElement("div", {
                                                key: CourseEditor__Course.id(course),
                                                className: "px-2 w-1/2"
                                              }, React.createElement("div", {
                                                    key: CourseEditor__Course.id(course),
                                                    className: "flex items-center overflow-hidden shadow bg-white rounded-lg mb-4"
                                                  }, React.createElement("div", {
                                                        className: "w-full"
                                                      }, React.createElement("div", undefined, match !== undefined ? React.createElement("img", {
                                                                  className: "object-cover h-48 w-full",
                                                                  src: CourseEditor__Course.imageUrl(match)
                                                                }) : React.createElement("div", {
                                                                  className: "h-48 svg-bg-pattern-1"
                                                                })), React.createElement("div", {
                                                            key: CourseEditor__Course.id(course),
                                                            className: "flex w-full"
                                                          }, React.createElement("a", {
                                                                className: "cursor-pointer flex flex-1 items-center py-6 px-4 hover:bg-gray-100",
                                                                title: "Edit " + CourseEditor__Course.name(course),
                                                                onClick: (function (param) {
                                                                    return Curry._1(send, /* UpdateEditorAction */Block.__(0, [/* ShowForm */Block.__(0, [course])]));
                                                                  })
                                                              }, React.createElement("div", undefined, React.createElement("span", {
                                                                        className: "text-black font-semibold"
                                                                      }, CourseEditor__Course.name(course)))), React.createElement("a", {
                                                                className: "text-primary-500 bg-gray-100 hover:bg-gray-200 border-l text-sm font-semibold items-center p-4 flex cursor-pointer",
                                                                title: "Edit images for " + CourseEditor__Course.name(course),
                                                                onClick: (function (param) {
                                                                    return Curry._1(send, /* UpdateEditorAction */Block.__(0, [/* ShowCoverImageForm */Block.__(1, [course])]));
                                                                  })
                                                              }, "Edit Images")), React.createElement("div", {
                                                            className: "text-gray-800 bg-gray-300 text-sm font-semibold p-4 w-full"
                                                          }, React.createElement("span", undefined, CourseEditor__Course.description(course)), React.createElement("div", {
                                                                className: "mt-2"
                                                              }, React.createElement("i", {
                                                                    className: "fas fa-external-link-square-alt"
                                                                  }), React.createElement("a", {
                                                                    className: "text-sm font-semibold cursor-pointer ml-2 text-primary-500",
                                                                    href: "/courses/" + CourseEditor__Course.id(course),
                                                                    target: "_blank"
                                                                  }, "View public page"))), courseLinks(course))));
                                  }), CourseEditor__Course.sort(state.courses)))))));
}

var make$1 = CourseEditor;

exports.str = str;
exports.CoursesQuery = CoursesQuery;
exports.reducer = reducer;
exports.hideEditorAction = hideEditorAction;
exports.updateCourse = updateCourse;
exports.courseLinks = courseLinks;
exports.make = make$1;
/*  Not a pure module */
