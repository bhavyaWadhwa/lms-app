// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FaIcon = require("../../../shared/components/FaIcon.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var DateFns = require("../../../shared/utils/DateFns.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var MultiselectInline = require("../../../packages/multiselect-inline/src/components/MultiselectInline.bs.js");
var CourseExports__Tag = require("../types/course_exports/CourseExports__Tag.bs.js");
var CourseExports__Course = require("../types/course_exports/CourseExports__Course.bs.js");
var SchoolAdmin__EditorDrawer = require("../../components/SchoolAdmin__EditorDrawer.bs.js");
var CourseExports__CourseExport = require("../types/course_exports/CourseExports__CourseExport.bs.js");

function str(prim) {
  return prim;
}

function computeInitialState($$exports) {
  return {
          drawerOpen: false,
          selectedTags: [],
          saving: false,
          reviewedOnly: false,
          tagSearch: "",
          courseExports: $$exports,
          exportType: /* Students */1
        };
}

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* OpenDrawer */0 :
          return {
                  drawerOpen: true,
                  selectedTags: state.selectedTags,
                  saving: state.saving,
                  reviewedOnly: state.reviewedOnly,
                  tagSearch: state.tagSearch,
                  courseExports: state.courseExports,
                  exportType: state.exportType
                };
      case /* CloseDrawer */1 :
          return {
                  drawerOpen: false,
                  selectedTags: state.selectedTags,
                  saving: state.saving,
                  reviewedOnly: state.reviewedOnly,
                  tagSearch: state.tagSearch,
                  courseExports: state.courseExports,
                  exportType: state.exportType
                };
      case /* BeginSaving */2 :
          return {
                  drawerOpen: state.drawerOpen,
                  selectedTags: state.selectedTags,
                  saving: true,
                  reviewedOnly: state.reviewedOnly,
                  tagSearch: state.tagSearch,
                  courseExports: state.courseExports,
                  exportType: state.exportType
                };
      case /* FailSaving */3 :
          return {
                  drawerOpen: state.drawerOpen,
                  selectedTags: state.selectedTags,
                  saving: false,
                  reviewedOnly: state.reviewedOnly,
                  tagSearch: state.tagSearch,
                  courseExports: state.courseExports,
                  exportType: state.exportType
                };
      
    }
  } else {
    switch (action.tag | 0) {
      case /* FinishSaving */0 :
          return {
                  drawerOpen: false,
                  selectedTags: state.selectedTags,
                  saving: false,
                  reviewedOnly: state.reviewedOnly,
                  tagSearch: state.tagSearch,
                  courseExports: $$Array.append([action[0]], state.courseExports),
                  exportType: state.exportType
                };
      case /* SetReviewedOnly */1 :
          return {
                  drawerOpen: state.drawerOpen,
                  selectedTags: state.selectedTags,
                  saving: state.saving,
                  reviewedOnly: action[0],
                  tagSearch: state.tagSearch,
                  courseExports: state.courseExports,
                  exportType: state.exportType
                };
      case /* SelectTag */2 :
          return {
                  drawerOpen: state.drawerOpen,
                  selectedTags: $$Array.append([action[0]], state.selectedTags),
                  saving: state.saving,
                  reviewedOnly: state.reviewedOnly,
                  tagSearch: state.tagSearch,
                  courseExports: state.courseExports,
                  exportType: state.exportType
                };
      case /* DeselectTag */3 :
          var tag = action[0];
          return {
                  drawerOpen: state.drawerOpen,
                  selectedTags: state.selectedTags.filter((function (t) {
                          return CourseExports__Tag.id(t) !== CourseExports__Tag.id(tag);
                        })),
                  saving: state.saving,
                  reviewedOnly: state.reviewedOnly,
                  tagSearch: state.tagSearch,
                  courseExports: state.courseExports,
                  exportType: state.exportType
                };
      case /* SelectExportType */4 :
          return {
                  drawerOpen: state.drawerOpen,
                  selectedTags: state.selectedTags,
                  saving: state.saving,
                  reviewedOnly: state.reviewedOnly,
                  tagSearch: state.tagSearch,
                  courseExports: state.courseExports,
                  exportType: action[0]
                };
      case /* UpdateTagSearch */5 :
          return {
                  drawerOpen: state.drawerOpen,
                  selectedTags: state.selectedTags,
                  saving: state.saving,
                  reviewedOnly: state.reviewedOnly,
                  tagSearch: action[0],
                  courseExports: state.courseExports,
                  exportType: state.exportType
                };
      
    }
  }
}

function readinessString(courseExport) {
  var match = CourseExports__CourseExport.file(courseExport);
  if (match !== undefined) {
    var timeDistance = DateFns.formatDistanceToNow(CourseExports__CourseExport.fileCreatedAt(match), undefined, true, /* () */0);
    return "Prepared " + timeDistance;
  } else {
    var timeDistance$1 = DateFns.formatDistanceToNow(CourseExports__CourseExport.createdAt(courseExport), undefined, true, /* () */0);
    return "Requested " + timeDistance$1;
  }
}

var value = CourseExports__Tag.name;

var searchString = CourseExports__Tag.name;

var Selectable = {
  value: value,
  searchString: searchString
};

var TagsSelector = MultiselectInline.Make(Selectable);

function unselected(allTags, selectedTags) {
  var selectedTagIds = $$Array.map(CourseExports__Tag.id, selectedTags);
  return allTags.filter((function (t) {
                return !$$Array.mem(CourseExports__Tag.id(t), selectedTagIds);
              }));
}

var ppx_printed_query = "mutation CreateCourseExportMutation($courseId: ID!, $tagIds: [ID!]!, $reviewedOnly: Boolean!, $exportType: Export!)  {\ncreateCourseExport(courseId: $courseId, tagIds: $tagIds, reviewedOnly: $reviewedOnly, exportType: $exportType)  {\ncourseExport  {\nid  \ncreatedAt  \ntags  \nreviewedOnly  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createCourseExport");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "courseExport");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      if (match$2 !== undefined) {
        tmp$1 = undefined;
      } else {
        var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
        var match$3 = Js_dict.get(value$4, "id");
        var tmp$2;
        if (match$3 !== undefined) {
          var value$5 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeString(value$5);
          tmp$2 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        } else {
          tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type CourseExport is missing");
        }
        var match$5 = Js_dict.get(value$4, "createdAt");
        var match$6 = Js_dict.get(value$4, "tags");
        var match$7 = Js_dict.get(value$4, "reviewedOnly");
        var tmp$3;
        if (match$7 !== undefined) {
          var value$6 = Caml_option.valFromOption(match$7);
          var match$8 = Js_json.decodeBoolean(value$6);
          tmp$3 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$6));
        } else {
          tmp$3 = Js_exn.raiseError("graphql_ppx: Field reviewedOnly on type CourseExport is missing");
        }
        tmp$1 = {
          id: tmp$2,
          createdAt: match$5 !== undefined ? Caml_option.valFromOption(match$5) : Js_exn.raiseError("graphql_ppx: Field createdAt on type CourseExport is missing"),
          tags: match$6 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$6))).map((function (value) {
                    var match = Js_json.decodeString(value);
                    if (match !== undefined) {
                      return match;
                    } else {
                      return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                    }
                  })) : Js_exn.raiseError("graphql_ppx: Field tags on type CourseExport is missing"),
          reviewedOnly: tmp$3
        };
      }
    } else {
      tmp$1 = undefined;
    }
    tmp = {
      courseExport: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field createCourseExport on type Mutation is missing");
  }
  return {
          createCourseExport: tmp
        };
}

function json_of_Export(value) {
  if (value >= 548749590) {
    return "Teams";
  } else {
    return "Students";
  }
}

function make(courseId, tagIds, reviewedOnly, exportType, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "courseId",
                    courseId
                  ],
                  /* tuple */[
                    "tagIds",
                    tagIds.map((function (prim) {
                            return prim;
                          }))
                  ],
                  /* tuple */[
                    "reviewedOnly",
                    reviewedOnly
                  ],
                  /* tuple */[
                    "exportType",
                    json_of_Export(exportType)
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var courseId = variables.courseId;
  var tagIds = variables.tagIds;
  var reviewedOnly = variables.reviewedOnly;
  var exportType = variables.exportType;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "courseId",
                    courseId
                  ],
                  /* tuple */[
                    "tagIds",
                    tagIds.map((function (prim) {
                            return prim;
                          }))
                  ],
                  /* tuple */[
                    "reviewedOnly",
                    reviewedOnly
                  ],
                  /* tuple */[
                    "exportType",
                    json_of_Export(exportType)
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(courseId, tagIds, reviewedOnly, exportType, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "courseId",
                  courseId
                ],
                /* tuple */[
                  "tagIds",
                  tagIds.map((function (prim) {
                          return prim;
                        }))
                ],
                /* tuple */[
                  "reviewedOnly",
                  reviewedOnly
                ],
                /* tuple */[
                  "exportType",
                  json_of_Export(exportType)
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, courseId, tagIds, reviewedOnly, exportType, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "courseId",
                      courseId
                    ],
                    /* tuple */[
                      "tagIds",
                      tagIds.map((function (prim) {
                              return prim;
                            }))
                    ],
                    /* tuple */[
                      "reviewedOnly",
                      reviewedOnly
                    ],
                    /* tuple */[
                      "exportType",
                      json_of_Export(exportType)
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var CreateCourseExportQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  json_of_Export: json_of_Export,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function createCourseExport(state, send, course, $$event) {
  $$event.preventDefault();
  Curry._1(send, /* BeginSaving */2);
  var match = state.exportType;
  var match$1 = match ? /* tuple */[
      $$Array.map(CourseExports__Tag.id, state.selectedTags),
      /* Students */33452920
    ] : /* tuple */[
      [],
      /* Teams */548749590
    ];
  (function (eta) {
            return GraphqlQuery.sendQuery(undefined, eta);
          })(make(CourseExports__Course.id(course), match$1[0], state.reviewedOnly, match$1[1], /* () */0)).then((function (response) {
            var match = response.createCourseExport.courseExport;
            if (match !== undefined) {
              var $$export = Caml_option.valFromOption(match);
              var courseExport = CourseExports__CourseExport.make($$export.id, state.exportType, DateFns.decodeISO($$export.createdAt), $$export.tags, $$export.reviewedOnly);
              Curry._1(send, /* FinishSaving */Block.__(0, [courseExport]));
            } else {
              Curry._1(send, /* FailSaving */3);
            }
            return Promise.resolve(/* () */0);
          })).catch((function (e) {
          console.log(e);
          Curry._1(send, /* FailSaving */3);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function toggleChoiceClasses(value) {
  if (value) {
    return "relative flex flex-col items-center bg-white border border-gray-400 hover:bg-gray-200 text-sm font-semibold focus:outline-none rounded p-4 w-full bg-gray-200 text-primary-500 border-primary-500";
  } else {
    return "relative flex flex-col items-center bg-white border border-gray-400 hover:bg-gray-200 text-sm font-semibold focus:outline-none rounded p-4 w-full opacity-75 text-gray-900";
  }
}

function CourseExports__Root(Props) {
  var course = Props.course;
  var $$exports = Props.exports;
  var tags = Props.tags;
  var match = React.useReducer(reducer, $$exports, computeInitialState);
  var send = match[1];
  var state = match[0];
  var tmp;
  if (state.drawerOpen) {
    var match$1 = state.exportType;
    tmp = React.createElement(SchoolAdmin__EditorDrawer.make, {
          closeDrawerCB: (function (param) {
              return Curry._1(send, /* CloseDrawer */1);
            }),
          closeButtonTitle: "Close Export Form",
          children: React.createElement("div", {
                className: "mx-auto bg-white"
              }, React.createElement("div", {
                    className: "max-w-2xl pt-6 px-6 mx-auto"
                  }, React.createElement("h5", {
                        className: "uppercase text-center border-b border-gray-400 pb-2"
                      }, "Export course data"), React.createElement("div", {
                        className: "mt-4"
                      }, React.createElement("label", {
                            className: "block tracking-wide text-xs font-semibold mr-6 mb-2"
                          }, "Please select the kind of export you need:"), React.createElement("div", {
                            className: "flex -mx-2"
                          }, React.createElement("div", {
                                className: "w-1/2 px-2"
                              }, React.createElement("button", {
                                    className: toggleChoiceClasses(state.exportType === /* Students */1),
                                    onClick: (function (param) {
                                        return Curry._1(send, /* SelectExportType */Block.__(4, [/* Students */1]));
                                      })
                                  }, React.createElement("i", {
                                        className: "fas fa-user"
                                      }), React.createElement("div", {
                                        className: "mt-1"
                                      }, "Students"))), React.createElement("div", {
                                className: "w-1/2 px-2"
                              }, React.createElement("button", {
                                    className: toggleChoiceClasses(state.exportType === /* Teams */0),
                                    onClick: (function (param) {
                                        return Curry._1(send, /* SelectExportType */Block.__(4, [/* Teams */0]));
                                      })
                                  }, React.createElement("i", {
                                        className: "fas fa-user-friends"
                                      }), React.createElement("div", {
                                        className: "mt-1"
                                      }, "Teams"))))), match$1 ? React.createElement("div", {
                          className: "mt-4"
                        }, React.createElement("label", {
                              className: "block tracking-wide text-xs font-semibold mb-2"
                            }, "Export only Users with the following tags:"), React.createElement(TagsSelector.make, {
                              placeholder: "Search for a tag",
                              onChange: (function (tagSearch) {
                                  return Curry._1(send, /* UpdateTagSearch */Block.__(5, [tagSearch]));
                                }),
                              value: state.tagSearch,
                              unselected: unselected(tags, state.selectedTags),
                              selected: state.selectedTags,
                              onSelect: (function (tag) {
                                  return Curry._1(send, /* SelectTag */Block.__(2, [tag]));
                                }),
                              onDeselect: (function (tag) {
                                  return Curry._1(send, /* DeselectTag */Block.__(3, [tag]));
                                }),
                              emptySelectionMessage: "No tags selected"
                            })) : null, React.createElement("div", {
                        className: "mt-5"
                      }, React.createElement("label", {
                            className: "block tracking-wide text-xs font-semibold mr-6 mb-2",
                            htmlFor: "targets_filter"
                          }, "Which targets should the export include?"), React.createElement("div", {
                            className: "flex -mx-2",
                            id: "targets_filter"
                          }, React.createElement("div", {
                                className: "w-1/2 px-2"
                              }, React.createElement("button", {
                                    className: toggleChoiceClasses(!state.reviewedOnly),
                                    onClick: (function (param) {
                                        return Curry._1(send, /* SetReviewedOnly */Block.__(1, [false]));
                                      })
                                  }, React.createElement("i", {
                                        className: "fas fa-list"
                                      }), React.createElement("div", {
                                        className: "mt-1"
                                      }, "All targets"))), React.createElement("div", {
                                className: "w-1/2 px-2"
                              }, React.createElement("button", {
                                    className: toggleChoiceClasses(state.reviewedOnly),
                                    onClick: (function (_event) {
                                        return Curry._1(send, /* SetReviewedOnly */Block.__(1, [true]));
                                      })
                                  }, React.createElement("i", {
                                        className: "fas fa-tasks"
                                      }), React.createElement("div", {
                                        className: "mt-1"
                                      }, "Only targets with reviewed submissions"))))), React.createElement("div", {
                        className: "flex max-w-2xl w-full mt-5 pb-5 mx-auto"
                      }, React.createElement("button", {
                            className: "w-full btn btn-primary btn-large",
                            disabled: state.saving,
                            onClick: (function (param) {
                                return createCourseExport(state, send, course, param);
                              })
                          }, state.saving ? React.createElement("span", undefined, React.createElement(FaIcon.make, {
                                      classes: "fas fa-spinner fa-pulse"
                                    }), React.createElement("span", {
                                      className: "ml-2"
                                    }, "Setting up an export...")) : "Create Export"))))
        });
  } else {
    tmp = null;
  }
  return React.createElement("div", {
              key: "School admin coaches course index",
              className: "flex flex-1 h-screen overflow-y-scroll"
            }, tmp, React.createElement("div", {
                  className: "flex-1 flex flex-col bg-gray-100"
                }, React.createElement("div", {
                      className: "flex px-6 py-2 items-center justify-between"
                    }, React.createElement("button", {
                          className: "max-w-2xl w-full flex mx-auto items-center justify-center relative bg-white text-primary-500 hover:bg-gray-100 hover:text-primary-600 hover:shadow-lg focus:outline-none border-2 border-gray-400 border-dashed hover:border-primary-300 p-6 rounded-lg mt-20 cursor-pointer",
                          onClick: (function (param) {
                              return Curry._1(send, /* OpenDrawer */0);
                            })
                        }, React.createElement("i", {
                              className: "fas fa-file-export text-lg"
                            }), React.createElement("h5", {
                              className: "font-semibold ml-2"
                            }, "Create a new export"))), ArrayUtils.isEmpty(state.courseExports) ? React.createElement("div", {
                        className: "flex justify-center bg-gray-100 border rounded p-3 italic mx-auto max-w-2xl w-full"
                      }, "You haven't exported anything yet!") : React.createElement("div", {
                        className: "px-6 pb-4 mt-5 flex flex-1 bg-gray-100"
                      }, React.createElement("div", {
                            className: "max-w-2xl w-full mx-auto relative"
                          }, React.createElement("h4", {
                                className: "mt-5 w-full"
                              }, "Exports"), React.createElement("div", {
                                className: "flex mt-4 -mx-3 items-start flex-wrap"
                              }, $$Array.map((function (courseExport) {
                                      var match = CourseExports__CourseExport.exportType(courseExport);
                                      var match$1 = CourseExports__CourseExport.file(courseExport);
                                      return React.createElement("div", {
                                                  key: CourseExports__CourseExport.id(courseExport),
                                                  "aria-label": "Export " + CourseExports__CourseExport.id(courseExport),
                                                  className: "flex w-1/2 items-center mb-4 px-3"
                                                }, React.createElement("div", {
                                                      className: "course-faculty__list-item shadow bg-white overflow-hidden rounded-lg flex flex-col w-full"
                                                    }, React.createElement("div", {
                                                          className: "flex flex-1 justify-between"
                                                        }, React.createElement("div", {
                                                              className: "pt-4 pb-3 px-4"
                                                            }, React.createElement("div", {
                                                                  className: "text-sm"
                                                                }, React.createElement("p", {
                                                                      className: "text-black font-semibold"
                                                                    }, CourseExports__CourseExport.exportTypeToString(courseExport)), React.createElement("p", {
                                                                      className: "text-gray-600 font-semibold text-xs mt-px"
                                                                    }, readinessString(courseExport))), React.createElement("div", {
                                                                  className: "flex flex-wrap text-gray-600 font-semibold text-xs mt-1"
                                                                }, CourseExports__CourseExport.reviewedOnly(courseExport) ? React.createElement("span", {
                                                                        className: "px-2 py-1 border rounded bg-secondary-100 text-primary-600 mt-1 mr-1"
                                                                      }, "Reviewed Submissions Only") : null, match ? $$Array.map((function (tag) {
                                                                          return React.createElement("span", {
                                                                                      key: tag,
                                                                                      className: "px-2 py-1 border rounded bg-primary-100 text-primary-600 mt-1 mr-1"
                                                                                    }, tag);
                                                                        }), CourseExports__CourseExport.tags(courseExport)) : null)), match$1 !== undefined ? React.createElement("a", {
                                                                "aria-label": "Download Course Export " + CourseExports__CourseExport.id(courseExport),
                                                                className: "w-10 text-xs text-sm course-faculty__list-item-remove text-gray-700 hover:text-gray-900 cursor-pointer flex items-center justify-center hover:bg-gray-200",
                                                                href: CourseExports__CourseExport.filePath(match$1)
                                                              }, React.createElement(FaIcon.make, {
                                                                    classes: "fas fa-file-download"
                                                                  })) : null)));
                                    }), ArrayUtils.copyAndSort((function (x, y) {
                                          return DateFns.differenceInSeconds(CourseExports__CourseExport.createdAt(y), CourseExports__CourseExport.createdAt(x));
                                        }), state.courseExports)))))));
}

var make$1 = CourseExports__Root;

exports.str = str;
exports.computeInitialState = computeInitialState;
exports.reducer = reducer;
exports.readinessString = readinessString;
exports.Selectable = Selectable;
exports.TagsSelector = TagsSelector;
exports.unselected = unselected;
exports.CreateCourseExportQuery = CreateCourseExportQuery;
exports.createCourseExport = createCourseExport;
exports.toggleChoiceClasses = toggleChoiceClasses;
exports.make = make$1;
/* TagsSelector Not a pure module */
