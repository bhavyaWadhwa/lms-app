// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ListUtils = require("../../../shared/utils/ListUtils.bs.js");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.js");
var CurriculumEditor__Level = require("../types/curriculum_editor/CurriculumEditor__Level.bs.js");
var CurriculumEditor__Target = require("../types/curriculum_editor/CurriculumEditor__Target.bs.js");
var CurriculumEditor__LevelEditor = require("./curriculum_editor/CurriculumEditor__LevelEditor.bs.js");
var CurriculumEditor__TargetGroup = require("../types/curriculum_editor/CurriculumEditor__TargetGroup.bs.js");
var CurriculumEditor__TargetDrawer = require("./curriculum_editor/CurriculumEditor__TargetDrawer.bs.js");
var CurriculumEditor__TargetGroupShow = require("./curriculum_editor/CurriculumEditor__TargetGroupShow.bs.js");
var CurriculumEditor__TargetGroupEditor = require("./curriculum_editor/CurriculumEditor__TargetGroupEditor.bs.js");

function str(prim) {
  return prim;
}

function reducer(state, action) {
  if (typeof action === "number") {
    return {
            selectedLevel: state.selectedLevel,
            editorAction: state.editorAction,
            levels: state.levels,
            targetGroups: state.targetGroups,
            targets: state.targets,
            showArchived: !state.showArchived
          };
  } else {
    switch (action.tag | 0) {
      case /* SelectLevel */0 :
          return {
                  selectedLevel: action[0],
                  editorAction: state.editorAction,
                  levels: state.levels,
                  targetGroups: state.targetGroups,
                  targets: state.targets,
                  showArchived: state.showArchived
                };
      case /* UpdateEditorAction */1 :
          return {
                  selectedLevel: state.selectedLevel,
                  editorAction: action[0],
                  levels: state.levels,
                  targetGroups: state.targetGroups,
                  targets: state.targets,
                  showArchived: state.showArchived
                };
      case /* UpdateLevels */2 :
          var level = action[0];
          var newLevels = CurriculumEditor__Level.updateList(state.levels, level);
          return {
                  selectedLevel: level,
                  editorAction: /* Hidden */0,
                  levels: newLevels,
                  targetGroups: state.targetGroups,
                  targets: state.targets,
                  showArchived: state.showArchived
                };
      case /* UpdateTargetGroup */3 :
          var newtargetGroups = CurriculumEditor__TargetGroup.updateList(state.targetGroups, action[0]);
          return {
                  selectedLevel: state.selectedLevel,
                  editorAction: state.editorAction,
                  levels: state.levels,
                  targetGroups: newtargetGroups,
                  targets: state.targets,
                  showArchived: state.showArchived
                };
      case /* UpdateTargetGroups */4 :
          return {
                  selectedLevel: state.selectedLevel,
                  editorAction: state.editorAction,
                  levels: state.levels,
                  targetGroups: action[0],
                  targets: state.targets,
                  showArchived: state.showArchived
                };
      case /* UpdateTarget */5 :
          var newtargets = CurriculumEditor__Target.updateList(state.targets, action[0]);
          return {
                  selectedLevel: state.selectedLevel,
                  editorAction: state.editorAction,
                  levels: state.levels,
                  targetGroups: state.targetGroups,
                  targets: newtargets,
                  showArchived: state.showArchived
                };
      case /* UpdateTargets */6 :
          return {
                  selectedLevel: state.selectedLevel,
                  editorAction: state.editorAction,
                  levels: state.levels,
                  targetGroups: state.targetGroups,
                  targets: action[0],
                  showArchived: state.showArchived
                };
      
    }
  }
}

function showArchivedButton(targetGroupsInLevel, targets) {
  var tgIds = List.map(CurriculumEditor__TargetGroup.id, targetGroupsInLevel);
  var numberOfArchivedTargetGroupsInLevel = List.length(List.filter(CurriculumEditor__TargetGroup.archived)(targetGroupsInLevel));
  var numberOfArchivedTargetsInLevel = List.length(List.filter((function (target) {
                return CurriculumEditor__Target.visibility(target) === /* Archived */2;
              }))(List.filter((function (target) {
                    return List.mem(CurriculumEditor__Target.targetGroupId(target), tgIds);
                  }))(targets)));
  if (numberOfArchivedTargetGroupsInLevel > 0) {
    return true;
  } else {
    return numberOfArchivedTargetsInLevel > 0;
  }
}

function updateTargetSortIndex(state, send, sortedTargets) {
  var oldTargets = List.filter((function (t) {
            return !List.mem(t, sortedTargets);
          }))(state.targets);
  return Curry._1(send, /* UpdateTargets */Block.__(6, [List.append(CurriculumEditor__Target.updateSortIndex(sortedTargets), oldTargets)]));
}

function updateTargetGroupSortIndex(state, send, sortedTargetGroups) {
  var oldTargetGroups = List.filter((function (t) {
            return !List.mem(t, sortedTargetGroups);
          }))(state.targetGroups);
  return Curry._1(send, /* UpdateTargetGroups */Block.__(4, [List.append(CurriculumEditor__TargetGroup.updateSortIndex(sortedTargetGroups), oldTargetGroups)]));
}

function levelOfTarget(targetId, targets, levels, targetGroups) {
  var target = ListUtils.unsafeFind((function (target) {
          return CurriculumEditor__Target.id(target) === targetId;
        }), "Unable to find target with ID:" + (targetId + " in CurriculumEditor"), targets);
  var targetGroup = ListUtils.unsafeFind((function (tg) {
          return CurriculumEditor__TargetGroup.id(tg) === CurriculumEditor__Target.targetGroupId(target);
        }), "Unable to find target group with ID:" + (CurriculumEditor__Target.targetGroupId(target) + " in CurriculumEditor"), targetGroups);
  return ListUtils.unsafeFind((function (level) {
                return CurriculumEditor__Level.id(level) === CurriculumEditor__TargetGroup.levelId(targetGroup);
              }), "Unable to find level with ID:" + (CurriculumEditor__TargetGroup.levelId(targetGroup) + " in CurriculumEditor"), levels);
}

function computeIntialState(param) {
  var path = param[3];
  var targets = param[2];
  var targetGroups = param[1];
  var levels = param[0];
  var maxLevel = List.hd(List.sort((function (l1, l2) {
              return CurriculumEditor__Level.number(l2) - CurriculumEditor__Level.number(l1) | 0;
            }), levels));
  var selectedLevel;
  if (path && path[0] === "school") {
    var match = path[1];
    if (match && match[0] === "courses") {
      var match$1 = match[1];
      if (match$1) {
        var match$2 = match$1[1];
        if (match$2) {
          switch (match$2[0]) {
            case "curriculum" :
                selectedLevel = maxLevel;
                break;
            case "targets" :
                var match$3 = match$2[1];
                selectedLevel = match$3 ? levelOfTarget(match$3[0], targets, levels, targetGroups) : maxLevel;
                break;
            default:
              selectedLevel = maxLevel;
          }
        } else {
          selectedLevel = maxLevel;
        }
      } else {
        selectedLevel = maxLevel;
      }
    } else {
      selectedLevel = maxLevel;
    }
  } else {
    selectedLevel = maxLevel;
  }
  return {
          selectedLevel: selectedLevel,
          editorAction: /* Hidden */0,
          levels: levels,
          targetGroups: targetGroups,
          targets: targets,
          showArchived: false
        };
}

function CurriculumEditor(Props) {
  var course = Props.course;
  var evaluationCriteria = Props.evaluationCriteria;
  var levels = Props.levels;
  var targetGroups = Props.targetGroups;
  var targets = Props.targets;
  var authenticityToken = Props.authenticityToken;
  var path = ReasonReactRouter.useUrl(undefined, /* () */0).path;
  var match = React.useReducer(reducer, /* tuple */[
        levels,
        targetGroups,
        targets,
        path
      ], computeIntialState);
  var send = match[1];
  var state = match[0];
  var hideEditorActionCB = function (param) {
    return Curry._1(send, /* UpdateEditorAction */Block.__(1, [/* Hidden */0]));
  };
  var currentLevel = state.selectedLevel;
  var currentLevelId = CurriculumEditor__Level.id(currentLevel);
  var updateLevelsCB = function (level) {
    return Curry._1(send, /* UpdateLevels */Block.__(2, [level]));
  };
  var targetGroupsInLevel = CurriculumEditor__TargetGroup.sort(List.filter((function (targetGroup) {
                return CurriculumEditor__TargetGroup.levelId(targetGroup) === currentLevelId;
              }))(state.targetGroups));
  var targetGroupsToDisplay = state.showArchived ? targetGroupsInLevel : List.filter((function (tg) {
              return !CurriculumEditor__TargetGroup.archived(tg);
            }))(targetGroupsInLevel);
  var showTargetGroupEditorCB = function (targetGroup) {
    return Curry._1(send, /* UpdateEditorAction */Block.__(1, [/* ShowTargetGroupEditor */Block.__(0, [targetGroup])]));
  };
  var updateTargetCB = function (target) {
    var targetGroup = ListUtils.unsafeFind((function (tg) {
            return CurriculumEditor__TargetGroup.id(tg) === CurriculumEditor__Target.targetGroupId(target);
          }), "Unabltge to find target group with ID: " + CurriculumEditor__Target.targetGroupId(target), state.targetGroups);
    var match = CurriculumEditor__Target.visibility(target);
    var updatedTargetGroup = match >= 2 ? targetGroup : CurriculumEditor__TargetGroup.unarchive(targetGroup);
    Curry._1(send, /* UpdateTarget */Block.__(5, [target]));
    return Curry._1(send, /* UpdateTargetGroup */Block.__(3, [updatedTargetGroup]));
  };
  var updateTargetGroupsCB = function (targetGroup) {
    if (CurriculumEditor__TargetGroup.archived(targetGroup)) {
      var targetIdsInTargerGroup = CurriculumEditor__Target.targetIdsInTargetGroup(CurriculumEditor__TargetGroup.id(targetGroup), state.targets);
      var newTargets = List.map((function (target) {
              if (List.mem(CurriculumEditor__Target.id(target), targetIdsInTargerGroup)) {
                return CurriculumEditor__Target.archive(target);
              } else {
                return target;
              }
            }), state.targets);
      Curry._1(send, /* UpdateTargets */Block.__(6, [newTargets]));
    }
    Curry._1(send, /* UpdateTargetGroup */Block.__(3, [targetGroup]));
    return Curry._1(send, /* UpdateEditorAction */Block.__(1, [/* Hidden */0]));
  };
  var match$1 = state.editorAction;
  var tmp;
  tmp = typeof match$1 === "number" ? null : (
      match$1.tag ? React.createElement(CurriculumEditor__LevelEditor.make, {
              level: match$1[0],
              levels: $$Array.of_list(state.levels),
              course: course,
              hideEditorActionCB: hideEditorActionCB,
              updateLevelsCB: updateLevelsCB
            }) : React.createElement(CurriculumEditor__TargetGroupEditor.make, {
              targetGroup: match$1[0],
              currentLevelId: currentLevelId,
              authenticityToken: authenticityToken,
              updateTargetGroupsCB: updateTargetGroupsCB,
              hideEditorActionCB: hideEditorActionCB
            })
    );
  return React.createElement("div", {
              className: "flex-1 flex flex-col"
            }, React.createElement("div", {
                  className: "bg-white p-4 md:hidden shadow border-b"
                }, React.createElement("button", {
                      className: "sa-toggle__menu-btn sa-toggle__menu-btn--arrow hover:bg-gray-200 focus:outline-none"
                    }, React.createElement("span", {
                          className: "sa-toggle__menu-btn-box"
                        }, React.createElement("span", {
                              className: "sa-toggle__menu-btn-inner"
                            })))), React.createElement(CurriculumEditor__TargetDrawer.make, {
                  targets: state.targets,
                  targetGroups: targetGroups,
                  evaluationCriteria: evaluationCriteria,
                  course: course,
                  updateTargetCB: updateTargetCB
                }), tmp, React.createElement("div", {
                  className: "px-6 pb-4 flex-1 bg-gray-100 relative overflow-y-scroll"
                }, React.createElement("div", {
                      className: "w-full py-4 relative md:sticky top-0 z-20 bg-gray-100 border-b"
                    }, React.createElement("div", {
                          className: "max-w-3xl flex items-center justify-between mx-auto"
                        }, React.createElement("div", {
                              className: "flex"
                            }, React.createElement("div", {
                                  className: "inline-block relative w-auto md:w-64"
                                }, React.createElement("select", {
                                      className: "block appearance-none w-full bg-white border text-sm border-gray-400 hover:border-gray-500 px-4 py-3 pr-8 rounded-r-none leading-tight focus:outline-none",
                                      value: CurriculumEditor__Level.name(currentLevel),
                                      onChange: (function ($$event) {
                                          var level_name = $$event.target.value;
                                          return Curry._1(send, /* SelectLevel */Block.__(0, [CurriculumEditor__Level.selectLevel(state.levels, level_name)]));
                                        })
                                    }, $$Array.of_list(List.map((function (level) {
                                                return React.createElement("option", {
                                                            key: CurriculumEditor__Level.id(level),
                                                            value: CurriculumEditor__Level.name(level)
                                                          }, "Level " + (String(CurriculumEditor__Level.number(level)) + (": " + CurriculumEditor__Level.name(level))));
                                              }), CurriculumEditor__Level.sort(state.levels)))), React.createElement("div", {
                                      className: "pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-800"
                                    }, React.createElement("i", {
                                          className: "fas fa-chevron-down text-xs"
                                        }))), React.createElement("button", {
                                  className: "flex text-gray-600 hover:text-gray-900 text-sm font-bold border border-gray-400 border-l-0 py-1 px-2 rounded-r focus:outline-none",
                                  title: "Edit selected level",
                                  onClick: (function (param) {
                                      return Curry._1(send, /* UpdateEditorAction */Block.__(1, [/* ShowLevelEditor */Block.__(1, [state.selectedLevel])]));
                                    })
                                }, React.createElement("i", {
                                      className: "fas fa-pencil-alt"
                                    })), React.createElement("button", {
                                  className: "btn btn-primary ml-4",
                                  onClick: (function (param) {
                                      return Curry._1(send, /* UpdateEditorAction */Block.__(1, [/* ShowLevelEditor */Block.__(1, [undefined])]));
                                    })
                                }, React.createElement("i", {
                                      className: "fas fa-plus-square mr-2 text-lg"
                                    }), React.createElement("span", undefined, "Create Level"))), showArchivedButton(targetGroupsInLevel, state.targets) ? React.createElement("button", {
                                className: "btn btn-default",
                                onClick: (function (param) {
                                    return Curry._1(send, /* ToggleShowArchived */0);
                                  })
                              }, state.showArchived ? "Hide Archived" : "Show Archived") : null)), React.createElement("div", {
                      className: "target-group__container max-w-3xl mt-5 mx-auto relative"
                    }, $$Array.of_list(List.mapi((function (index, targetGroup) {
                                return React.createElement(CurriculumEditor__TargetGroupShow.make, {
                                            targetGroup: targetGroup,
                                            targetGroups: targetGroupsToDisplay,
                                            targets: state.targets,
                                            showTargetGroupEditorCB: showTargetGroupEditorCB,
                                            updateTargetCB: updateTargetCB,
                                            showArchived: state.showArchived,
                                            updateTargetSortIndexCB: (function (param) {
                                                return updateTargetSortIndex(state, send, param);
                                              }),
                                            updateTargetGroupSortIndexCB: (function (param) {
                                                return updateTargetGroupSortIndex(state, send, param);
                                              }),
                                            index: index,
                                            course: course,
                                            key: CurriculumEditor__TargetGroup.id(targetGroup)
                                          });
                              }), targetGroupsToDisplay)), React.createElement("div", {
                          className: "target-group__create flex flex-col items-center justify-center relative bg-white border-2 border-dashed border-gray-400 p-6 z-10 hover:text-primary-500 hover:shadow-lg hover:border-primary-400 hover:border-primary-400 rounded-lg mt-12 cursor-pointer",
                          onClick: (function (param) {
                              return Curry._1(send, /* UpdateEditorAction */Block.__(1, [/* ShowTargetGroupEditor */Block.__(0, [undefined])]));
                            })
                        }, React.createElement("span", {
                              className: "flex bg-gray-200 p-2 rounded-full"
                            }, React.createElement("i", {
                                  className: "fas fa-plus-circle text-2xl"
                                })), React.createElement("h4", {
                              className: "font-semibold ml-2"
                            }, "Create a Module")))));
}

var make = CurriculumEditor;

exports.str = str;
exports.reducer = reducer;
exports.showArchivedButton = showArchivedButton;
exports.updateTargetSortIndex = updateTargetSortIndex;
exports.updateTargetGroupSortIndex = updateTargetGroupSortIndex;
exports.levelOfTarget = levelOfTarget;
exports.computeIntialState = computeIntialState;
exports.make = make;
/* react Not a pure module */
