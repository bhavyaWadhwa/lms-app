// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Avatar = require("../../../shared/Avatar.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var WindowUtils = require("../../../shared/utils/WindowUtils.bs.js");
var GraphqlQuery = require("../../../shared/utils/GraphqlQuery.bs.js");
var DisablingCover = require("../../../shared/components/DisablingCover.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.js");
var CourseAuthors__Form = require("./course_authors/CourseAuthors__Form.bs.js");
var CourseAuthors__Author = require("../types/course_authors/CourseAuthors__Author.bs.js");
var SchoolAdmin__EditorDrawer = require("../../components/SchoolAdmin__EditorDrawer.bs.js");

var UnexpectedPathOnAuthorsInterface = Caml_exceptions.create("CourseAuthors__Root.UnexpectedPathOnAuthorsInterface");

function str(prim) {
  return prim;
}

function reducer(state, action) {
  if (typeof action === "number") {
    if (action === /* BeginDeleting */0) {
      return {
              authors: state.authors,
              deleting: true
            };
    } else {
      return {
              authors: state.authors,
              deleting: false
            };
    }
  } else {
    switch (action.tag | 0) {
      case /* FinishDeleting */0 :
          var author = action[0];
          return {
                  authors: state.authors.filter((function (a) {
                          return CourseAuthors__Author.id(a) !== CourseAuthors__Author.id(author);
                        })),
                  deleting: false
                };
      case /* AddAuthor */1 :
          return {
                  authors: state.authors.concat([action[0]]),
                  deleting: state.deleting
                };
      case /* UpdateAuthor */2 :
          var author$1 = action[0];
          return {
                  authors: $$Array.map((function (a) {
                          if (CourseAuthors__Author.id(a) === CourseAuthors__Author.id(author$1)) {
                            return author$1;
                          } else {
                            return a;
                          }
                        }), state.authors),
                  deleting: state.deleting
                };
      
    }
  }
}

var ppx_printed_query = "mutation DeleteCourseAuthorMutation($id: ID!)  {\ndeleteCourseAuthor(id: $id)  {\nsuccess  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "deleteCourseAuthor");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type DeleteCourseAuthorPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field deleteCourseAuthor on type Mutation is missing");
  }
  return {
          deleteCourseAuthor: tmp
        };
}

function make(id, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(id, param) {
  return Js_dict.fromArray([/* tuple */[
                  "id",
                  id
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, id, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "id",
                      id
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var DeleteCourseAuthorQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function removeCourseAuthor(send, author, $$event) {
  $$event.preventDefault();
  return WindowUtils.confirm(undefined, "Are you sure you want to remove " + (CourseAuthors__Author.name(author) + " from the list of authors?"), (function (param) {
                Curry._1(send, /* BeginDeleting */0);
                (function (eta) {
                          return GraphqlQuery.sendQuery(undefined, eta);
                        })(make(CourseAuthors__Author.id(author), /* () */0)).then((function (response) {
                          if (response.deleteCourseAuthor.success) {
                            Curry._1(send, /* FinishDeleting */Block.__(0, [author]));
                          } else {
                            Curry._1(send, /* FailToDelete */1);
                          }
                          return Promise.resolve(/* () */0);
                        })).catch((function (param) {
                        Curry._1(send, /* FailToDelete */1);
                        return Promise.resolve(/* () */0);
                      }));
                return /* () */0;
              }));
}

function renderAuthor(rootPath, author, send) {
  var authorPath = rootPath + ("/" + CourseAuthors__Author.id(author));
  var match = CourseAuthors__Author.avatarUrl(author);
  return React.createElement("div", {
              key: CourseAuthors__Author.id(author),
              className: "flex w-1/2 flex-shrink-0 mb-5 px-3"
            }, React.createElement("div", {
                  className: "shadow bg-white rounded-lg flex w-full border border-transparent overflow-hidden hover:border-primary-400 hover:bg-gray-100"
                }, React.createElement("a", {
                      className: "w-full cursor-pointer p-4 overflow-hidden",
                      href: authorPath,
                      onClick: (function ($$event) {
                          $$event.preventDefault();
                          return ReasonReactRouter.push(authorPath);
                        })
                    }, React.createElement("div", {
                          className: "flex"
                        }, React.createElement("span", {
                              className: "mr-4 flex-shrink-0"
                            }, match !== undefined ? React.createElement("img", {
                                    className: "w-10 h-10 rounded-full object-cover",
                                    src: match
                                  }) : React.createElement(Avatar.make, {
                                    name: CourseAuthors__Author.name(author),
                                    className: "w-10 h-10 rounded-full"
                                  })), React.createElement("div", {
                              className: "flex flex-col"
                            }, React.createElement("span", {
                                  className: "text-black font-semibold text-sm"
                                }, CourseAuthors__Author.name(author)), React.createElement("span", {
                                  className: "text-black font-normal text-xs"
                                }, CourseAuthors__Author.email(author))))), React.createElement("div", {
                      className: "w-10 text-sm course-faculty__list-item-remove text-gray-700 hover:text-gray-900 cursor-pointer flex items-center justify-center hover:bg-gray-200 hover:text-red-600",
                      title: "Delete " + CourseAuthors__Author.name(author),
                      onClick: (function (param) {
                          return removeCourseAuthor(send, author, param);
                        })
                    }, React.createElement("i", {
                          className: "fas fa-trash-alt"
                        }))));
}

function CourseAuthors__Root(Props) {
  var courseId = Props.courseId;
  var authors = Props.authors;
  var match = React.useReducer(reducer, {
        authors: authors,
        deleting: false
      });
  var send = match[1];
  var state = match[0];
  var rootPath = "/school/courses/" + (courseId + "/authors");
  var url = ReasonReactRouter.useUrl(undefined, /* () */0);
  var otherPath = url.path;
  var tmp;
  if (otherPath) {
    if (otherPath[0] === "school") {
      var match$1 = otherPath[1];
      if (match$1) {
        if (match$1[0] === "courses") {
          var match$2 = match$1[1];
          if (match$2) {
            var match$3 = match$2[1];
            if (match$3) {
              if (match$3[0] === "authors") {
                var match$4 = match$3[1];
                if (match$4) {
                  if (match$4[1]) {
                    throw [
                          UnexpectedPathOnAuthorsInterface,
                          otherPath
                        ];
                  }
                  var authorId = match$4[0];
                  var author = authorId === "new" ? undefined : ArrayUtils.unsafeFind((function (author) {
                            return CourseAuthors__Author.id(author) === authorId;
                          }), "Could not find author with ID " + (authorId + (" in the list of known authors for course with ID " + courseId)), state.authors);
                  tmp = React.createElement(SchoolAdmin__EditorDrawer.make, {
                        closeDrawerCB: (function (param) {
                            return ReasonReactRouter.push(rootPath);
                          }),
                        children: React.createElement(CourseAuthors__Form.make, {
                              courseId: courseId,
                              rootPath: rootPath,
                              author: author,
                              addAuthorCB: (function (author) {
                                  return Curry._1(send, /* AddAuthor */Block.__(1, [author]));
                                }),
                              updateAuthorCB: (function (author) {
                                  return Curry._1(send, /* UpdateAuthor */Block.__(2, [author]));
                                })
                            })
                      });
                } else {
                  tmp = null;
                }
              } else {
                throw [
                      UnexpectedPathOnAuthorsInterface,
                      otherPath
                    ];
              }
            } else {
              throw [
                    UnexpectedPathOnAuthorsInterface,
                    otherPath
                  ];
            }
          } else {
            throw [
                  UnexpectedPathOnAuthorsInterface,
                  otherPath
                ];
          }
        } else {
          throw [
                UnexpectedPathOnAuthorsInterface,
                otherPath
              ];
        }
      } else {
        throw [
              UnexpectedPathOnAuthorsInterface,
              otherPath
            ];
      }
    } else {
      throw [
            UnexpectedPathOnAuthorsInterface,
            otherPath
          ];
    }
  } else {
    throw [
          UnexpectedPathOnAuthorsInterface,
          otherPath
        ];
  }
  return React.createElement("div", {
              className: "flex flex-1 h-full overflow-y-scroll bg-gray-100"
            }, React.createElement("div", {
                  className: "flex-1 flex flex-col"
                }, tmp, React.createElement(DisablingCover.make, {
                      disabled: state.deleting,
                      message: "Deleting...",
                      children: null
                    }, React.createElement("div", {
                          className: "flex px-6 py-2 items-center justify-between"
                        }, React.createElement("button", {
                              className: "max-w-2xl w-full flex mx-auto items-center justify-center relative bg-white text-primary-500 hover:bg-gray-100 hover:text-primary-600 hover:shadow-lg focus:outline-none border-2 border-gray-400 border-dashed hover:border-primary-300 p-6 rounded-lg mt-8 cursor-pointer",
                              onClick: (function (param) {
                                  return ReasonReactRouter.push(rootPath + "/new");
                                })
                            }, React.createElement("i", {
                                  className: "fas fa-plus-circle"
                                }), React.createElement("h5", {
                                  className: "font-semibold ml-2"
                                }, "Add New Author"))), React.createElement("div", {
                          className: "px-6 pb-4 mt-5 flex"
                        }, React.createElement("div", {
                              className: "max-w-2xl w-full mx-auto"
                            }, React.createElement("div", {
                                  className: "flex -mx-3 flex-wrap"
                                }, $$Array.map((function (author) {
                                        return renderAuthor(rootPath, author, send);
                                      }), CourseAuthors__Author.sort(state.authors))))))));
}

var make$1 = CourseAuthors__Root;

exports.UnexpectedPathOnAuthorsInterface = UnexpectedPathOnAuthorsInterface;
exports.str = str;
exports.reducer = reducer;
exports.DeleteCourseAuthorQuery = DeleteCourseAuthorQuery;
exports.removeCourseAuthor = removeCourseAuthor;
exports.renderAuthor = renderAuthor;
exports.make = make$1;
/* react Not a pure module */
