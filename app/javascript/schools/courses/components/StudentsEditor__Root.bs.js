// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Api = require("../../../shared/Api.bs.js");
var Icon = require("../../../shared/Icon.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Avatar = require("../../../shared/Avatar.bs.js");
var $$String = require("bs-platform/lib/js/string.js");
var Dropdown = require("../../../shared/components/Dropdown.bs.js");
var ArrayUtils = require("../../../shared/utils/ArrayUtils.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var $$Notification = require("../../../shared/Notification.bs.js");
var LoadingSpinner = require("../../../shared/components/LoadingSpinner.bs.js");
var AuthenticityToken = require("../../../shared/utils/AuthenticityToken.bs.js");
var StudentsEditor__Page = require("../types/students_editor/StudentsEditor__Page.bs.js");
var StudentsEditor__Team = require("../types/students_editor/StudentsEditor__Team.bs.js");
var StudentsEditor__Coach = require("../types/students_editor/StudentsEditor__Coach.bs.js");
var StudentsEditor__Filter = require("../types/students_editor/StudentsEditor__Filter.bs.js");
var StudentsEditor__Search = require("./students_editor/StudentsEditor__Search.bs.js");
var StudentsEditor__Student = require("../types/students_editor/StudentsEditor__Student.bs.js");
var SchoolAdmin__EditorDrawer = require("../../components/SchoolAdmin__EditorDrawer.bs.js");
var StudentsEditor__TeamsList = require("./students_editor/StudentsEditor__TeamsList.bs.js");
var StudentsEditor__CreateForm = require("./students_editor/StudentsEditor__CreateForm.bs.js");
var StudentsEditor__UpdateForm = require("./students_editor/StudentsEditor__UpdateForm.bs.js");
var StudentsEditor__SelectedStudent = require("../types/students_editor/studentsEditor__SelectedStudent.bs.js");

function str(prim) {
  return prim;
}

function handleTeamUpResponse(send, _json) {
  Curry._1(send, /* RefreshData */Block.__(5, [[]]));
  return $$Notification.success("Success!", "Teams updated successfully");
}

function handleErrorCB(param) {
  return /* () */0;
}

function addTags(oldtags, newTags) {
  return ArrayUtils.sort_uniq($$String.compare, $$Array.append(newTags, oldtags));
}

function teamUp(selectedStudents, responseCB) {
  var studentIds = $$Array.map(StudentsEditor__SelectedStudent.id, selectedStudents);
  var payload = { };
  payload["authenticity_token"] = AuthenticityToken.fromHead(/* () */0);
  payload["founder_ids"] = Json_encode.array((function (prim) {
          return prim;
        }), studentIds);
  return Api.create("/school/students/team_up", payload, responseCB, handleErrorCB);
}

function initialState(tags) {
  return {
          pagedTeams: /* Unloaded */0,
          filter: StudentsEditor__Filter.empty(/* () */0),
          selectedStudents: [],
          formVisible: /* None */0,
          tags: tags,
          loading: /* NotLoading */0,
          refreshTeams: false
        };
}

function reducer(state, action) {
  switch (action.tag | 0) {
    case /* SelectStudent */0 :
        return {
                pagedTeams: state.pagedTeams,
                filter: state.filter,
                selectedStudents: $$Array.append([action[0]], state.selectedStudents),
                formVisible: state.formVisible,
                tags: state.tags,
                loading: state.loading,
                refreshTeams: state.refreshTeams
              };
    case /* DeselectStudent */1 :
        var id = action[0];
        return {
                pagedTeams: state.pagedTeams,
                filter: state.filter,
                selectedStudents: state.selectedStudents.filter((function (s) {
                        return StudentsEditor__SelectedStudent.id(s) !== id;
                      })),
                formVisible: state.formVisible,
                tags: state.tags,
                loading: state.loading,
                refreshTeams: state.refreshTeams
              };
    case /* UpdateFormVisible */2 :
        return {
                pagedTeams: state.pagedTeams,
                filter: state.filter,
                selectedStudents: state.selectedStudents,
                formVisible: action[0],
                tags: state.tags,
                loading: state.loading,
                refreshTeams: state.refreshTeams
              };
    case /* UpdateTeams */3 :
        return {
                pagedTeams: action[0],
                filter: state.filter,
                selectedStudents: state.selectedStudents,
                formVisible: state.formVisible,
                tags: state.tags,
                loading: /* NotLoading */0,
                refreshTeams: state.refreshTeams
              };
    case /* UpdateFilter */4 :
        return {
                pagedTeams: state.pagedTeams,
                filter: action[0],
                selectedStudents: state.selectedStudents,
                formVisible: state.formVisible,
                tags: state.tags,
                loading: state.loading,
                refreshTeams: !state.refreshTeams
              };
    case /* RefreshData */5 :
        return {
                pagedTeams: state.pagedTeams,
                filter: state.filter,
                selectedStudents: [],
                formVisible: /* None */0,
                tags: addTags(state.tags, action[0]),
                loading: state.loading,
                refreshTeams: !state.refreshTeams
              };
    case /* UpdateTeam */6 :
        return {
                pagedTeams: StudentsEditor__Page.updateTeam(action[0], state.pagedTeams),
                filter: state.filter,
                selectedStudents: [],
                formVisible: /* None */0,
                tags: addTags(state.tags, action[1]),
                loading: state.loading,
                refreshTeams: state.refreshTeams
              };
    case /* SetLoading */7 :
        return {
                pagedTeams: state.pagedTeams,
                filter: state.filter,
                selectedStudents: state.selectedStudents,
                formVisible: state.formVisible,
                tags: state.tags,
                loading: action[0],
                refreshTeams: state.refreshTeams
              };
    
  }
}

function selectStudent(send, student, team) {
  var selectedStudent = StudentsEditor__SelectedStudent.make(StudentsEditor__Student.name(student), StudentsEditor__Student.id(student), StudentsEditor__Team.id(team), student.avatarUrl, StudentsEditor__Team.levelId(team), StudentsEditor__Team.students(team).length);
  return Curry._1(send, /* SelectStudent */Block.__(0, [selectedStudent]));
}

function deselectStudent(send, studentId) {
  return Curry._1(send, /* DeselectStudent */Block.__(1, [studentId]));
}

function updateFilter(send, filter) {
  return Curry._1(send, /* UpdateFilter */Block.__(4, [filter]));
}

function dropDownContents(updateFilterCB, filter) {
  return $$Array.map((function (sortBy) {
                var title = StudentsEditor__Filter.sortByTitle(sortBy);
                return React.createElement("button", {
                            key: title,
                            className: "inline-flex items-center w-full font-semibold text-xs p-3 text-left focus:outline-none ",
                            title: "Order by " + title,
                            onClick: (function (param) {
                                return Curry._1(updateFilterCB, StudentsEditor__Filter.updateSortBy(sortBy, filter));
                              })
                          }, React.createElement(Icon.make, {
                                className: StudentsEditor__Filter.sortByIcon(sortBy)
                              }), React.createElement("span", {
                                className: "ml-2"
                              }, title));
              }), StudentsEditor__Filter.dropdownOptionsForSortBy(filter));
}

function dropDownSelected(filter) {
  var title = StudentsEditor__Filter.sortByTitle(StudentsEditor__Filter.sortBy(filter));
  return React.createElement("button", {
              className: "inline-flex items-center bg-white leading-relaxed font-semibold border border-gray-400 rounded focus:outline-none focus:bg-white focus:border-gray-500 px-3 py-2 text-xs ",
              title: "Order by " + title
            }, React.createElement(Icon.make, {
                  className: StudentsEditor__Filter.sortByIcon(StudentsEditor__Filter.sortBy(filter))
                }), React.createElement("span", {
                  className: "ml-2"
                }, title), React.createElement("i", {
                  className: "fas fa-caret-down ml-3"
                }));
}

function updateTeams(send, pagedTeams) {
  return Curry._1(send, /* UpdateTeams */Block.__(3, [pagedTeams]));
}

function showEditForm(send, student, teamId) {
  return Curry._1(send, /* UpdateFormVisible */Block.__(2, [/* UpdateForm */[
                  student,
                  teamId
                ]]));
}

function submitForm(send, tagsToApply) {
  return Curry._1(send, /* RefreshData */Block.__(5, [tagsToApply]));
}

function updateForm(send, tagsToApply, team) {
  if (team !== undefined) {
    return Curry._1(send, /* UpdateTeam */Block.__(6, [
                  team,
                  tagsToApply
                ]));
  } else {
    return Curry._1(send, /* RefreshData */Block.__(5, [tagsToApply]));
  }
}

function reloadTeams(send, param) {
  return Curry._1(send, /* RefreshData */Block.__(5, [[]]));
}

function setLoading(send, loading) {
  return Curry._1(send, /* SetLoading */Block.__(7, [loading]));
}

function StudentsEditor__Root(Props) {
  var courseId = Props.courseId;
  var courseCoachIds = Props.courseCoachIds;
  var schoolCoaches = Props.schoolCoaches;
  var levels = Props.levels;
  var studentTags = Props.studentTags;
  var match = React.useReducer(reducer, initialState(studentTags));
  var send = match[1];
  var state = match[0];
  var match$1 = state.formVisible;
  var tmp;
  if (typeof match$1 === "number") {
    tmp = match$1 !== 0 ? React.createElement(SchoolAdmin__EditorDrawer.make, {
            closeDrawerCB: (function (param) {
                return Curry._1(send, /* UpdateFormVisible */Block.__(2, [/* None */0]));
              }),
            children: React.createElement(StudentsEditor__CreateForm.make, {
                  courseId: courseId,
                  submitFormCB: (function (param) {
                      return Curry._1(send, /* RefreshData */Block.__(5, [param]));
                    }),
                  studentTags: state.tags
                })
          }) : null;
  } else {
    var team = StudentsEditor__Team.unsafeFind(StudentsEditor__Page.teams(state.pagedTeams), "Root", match$1[1]);
    var courseCoaches = schoolCoaches.filter((function (coach) {
            return $$Array.mem(StudentsEditor__Coach.id(coach), courseCoachIds);
          }));
    tmp = React.createElement(SchoolAdmin__EditorDrawer.make, {
          closeDrawerCB: (function (param) {
              return Curry._1(send, /* UpdateFormVisible */Block.__(2, [/* None */0]));
            }),
          children: React.createElement(StudentsEditor__UpdateForm.make, {
                student: match$1[0],
                team: team,
                studentTags: state.tags,
                courseCoaches: courseCoaches,
                updateFormCB: (function (param, param$1) {
                    return updateForm(send, param, param$1);
                  }),
                reloadTeamsCB: (function (param) {
                    return reloadTeams(send, param);
                  })
              })
        });
  }
  var match$2 = state.pagedTeams;
  var loading;
  if (typeof match$2 === "number") {
    loading = false;
  } else {
    var match$3 = state.loading;
    loading = match$3 === 1;
  }
  return React.createElement("div", {
              className: "flex flex-1 flex-col"
            }, tmp, React.createElement("div", {
                  className: "px-6 pb-4 flex-1 bg-gray-100 relative overflow-y-scroll"
                }, React.createElement("div", {
                      className: "max-w-3xl w-full mx-auto flex justify-between items-center border-b mt-4"
                    }, React.createElement("ul", {
                          className: "flex font-semibold text-sm"
                        }, React.createElement("li", {
                              className: "px-3 py-3 md:py-2 text-primary-500 border-b-3 border-primary-500 -mb-px"
                            }, React.createElement("span", undefined, "All Users")), React.createElement("li", {
                              className: "rounded-t-lg cursor-pointer border-b-3 border-transparent hover:bg-gray-200 hover:text-gray-900"
                            }, React.createElement("a", {
                                  className: "block px-3 py-3 md:py-2 text-gray-800",
                                  href: "/school/courses/" + (courseId + "/inactive_students")
                                }, "Inactive Users"))), state.selectedStudents.length !== 0 ? null : React.createElement("button", {
                            className: "btn btn-primary ml-4",
                            onClick: (function (_e) {
                                return Curry._1(send, /* UpdateFormVisible */Block.__(2, [/* CreateForm */1]));
                              })
                          }, React.createElement("i", {
                                className: "fas fa-user-plus mr-2"
                              }), React.createElement("span", undefined, "Add New Users"))), React.createElement("div", {
                      className: "bg-gray-100 sticky top-0 py-3"
                    }, React.createElement("div", {
                          className: "border rounded-lg mx-auto max-w-3xl bg-white "
                        }, React.createElement("div", undefined, React.createElement("div", {
                                  className: "flex w-full items-start p-4"
                                }, React.createElement(StudentsEditor__Search.make, {
                                      filter: state.filter,
                                      updateFilterCB: (function (param) {
                                          return Curry._1(send, /* UpdateFilter */Block.__(4, [param]));
                                        }),
                                      tags: state.tags,
                                      levels: levels
                                    }), React.createElement("div", {
                                      className: "ml-2 flex-shrink-0"
                                    }, React.createElement("label", {
                                          className: "block text-tiny uppercase font-semibold"
                                        }, "Sort by:"), React.createElement("div", {
                                          className: "mt-1"
                                        }, React.createElement(Dropdown.make, {
                                              selected: dropDownSelected(state.filter),
                                              contents: dropDownContents((function (param) {
                                                      return Curry._1(send, /* UpdateFilter */Block.__(4, [param]));
                                                    }), state.filter),
                                              right: true
                                            })))), ArrayUtils.isEmpty(state.selectedStudents) ? null : React.createElement("div", {
                                    className: "flex justify-between bg-gray-100 px-4 pb-3 pt-1 rounded-b-lg"
                                  }, React.createElement("div", {
                                        className: "flex flex-wrap"
                                      }, $$Array.map((function (selectedStudent) {
                                              var match = StudentsEditor__SelectedStudent.avatarUrl(selectedStudent);
                                              return React.createElement("div", {
                                                          className: "flex items-center bg-white border border-gray-400 rounded-full mr-2 mt-2 overflow-hidden"
                                                        }, match !== undefined ? React.createElement("img", {
                                                                className: "w-5 h-5 rounded-full mr-2 ml-px my-px object-cover",
                                                                src: match
                                                              }) : React.createElement(Avatar.make, {
                                                                name: StudentsEditor__SelectedStudent.name(selectedStudent),
                                                                className: "w-5 h-5 mr-2 ml-px my-px"
                                                              }), React.createElement("div", {
                                                              className: "flex h-full items-center"
                                                            }, React.createElement("span", {
                                                                  className: "text-xs font-semibold pr-2 leading-tight "
                                                                }, StudentsEditor__SelectedStudent.name(selectedStudent)), React.createElement("button", {
                                                                  className: "flex h-full text-xs text-red-700 px-2 py-px border-l focus:outline-none bg-gray-100 hover:bg-red-400 hover:text-white ",
                                                                  onClick: (function (param) {
                                                                      var studentId = StudentsEditor__SelectedStudent.id(selectedStudent);
                                                                      return Curry._1(send, /* DeselectStudent */Block.__(1, [studentId]));
                                                                    })
                                                                }, React.createElement(Icon.make, {
                                                                      className: "if i-times-regular"
                                                                    }))));
                                            }), state.selectedStudents)), React.createElement("div", {
                                        className: "pt-1"
                                      }, StudentsEditor__SelectedStudent.isGroupable(state.selectedStudents) ? React.createElement("button", {
                                              className: "btn btn-small btn-primary",
                                              onClick: (function (_e) {
                                                  return teamUp(state.selectedStudents, (function (param) {
                                                                return handleTeamUpResponse(send, param);
                                                              }));
                                                })
                                            }, "Group as Team") : null, StudentsEditor__SelectedStudent.isMoveOutable(state.selectedStudents) ? React.createElement("button", {
                                              className: "btn btn-small btn-danger",
                                              onClick: (function (_e) {
                                                  return teamUp(state.selectedStudents, (function (param) {
                                                                return handleTeamUpResponse(send, param);
                                                              }));
                                                })
                                            }, "Move out from Team") : null))))), React.createElement("div", undefined, React.createElement(StudentsEditor__TeamsList.make, {
                          levels: levels,
                          courseId: courseId,
                          updateTeamsCB: (function (param) {
                              return Curry._1(send, /* UpdateTeams */Block.__(3, [param]));
                            }),
                          filter: state.filter,
                          pagedTeams: state.pagedTeams,
                          selectedStudentIds: $$Array.map(StudentsEditor__SelectedStudent.id, state.selectedStudents),
                          selectStudentCB: (function (param, param$1) {
                              return selectStudent(send, param, param$1);
                            }),
                          deselectStudentCB: (function (param) {
                              return Curry._1(send, /* DeselectStudent */Block.__(1, [param]));
                            }),
                          showEditFormCB: (function (param, param$1) {
                              return showEditForm(send, param, param$1);
                            }),
                          loading: state.loading,
                          setLoadingCB: (function (param) {
                              return Curry._1(send, /* SetLoading */Block.__(7, [param]));
                            }),
                          updateFilterCB: (function (param) {
                              return Curry._1(send, /* UpdateFilter */Block.__(4, [param]));
                            }),
                          refreshTeams: state.refreshTeams
                        }))), React.createElement(LoadingSpinner.make, {
                  loading: loading
                }));
}

var make = StudentsEditor__Root;

exports.str = str;
exports.handleTeamUpResponse = handleTeamUpResponse;
exports.handleErrorCB = handleErrorCB;
exports.addTags = addTags;
exports.teamUp = teamUp;
exports.initialState = initialState;
exports.reducer = reducer;
exports.selectStudent = selectStudent;
exports.deselectStudent = deselectStudent;
exports.updateFilter = updateFilter;
exports.dropDownContents = dropDownContents;
exports.dropDownSelected = dropDownSelected;
exports.updateTeams = updateTeams;
exports.showEditForm = showEditForm;
exports.submitForm = submitForm;
exports.updateForm = updateForm;
exports.reloadTeams = reloadTeams;
exports.setLoading = setLoading;
exports.make = make;
/* Api Not a pure module */
