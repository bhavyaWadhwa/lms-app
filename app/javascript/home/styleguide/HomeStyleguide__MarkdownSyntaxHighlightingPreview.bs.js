// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var MarkdownBlock = require("../../shared/components/MarkdownBlock.bs.js");

function str(prim) {
  return prim;
}

var reasonCode = "\n```reason\n/* A sample fizzbuzz implementation. */\nlet fizzbuzz = (num) =>\n  switch (num mod 3, num mod 5) {\n  | (0, 0) => \"FizzBuzz\"\n  | (0, _) => \"Fizz\"\n  | (_, 0) => \"Buzz\"\n  | _ => string_of_int(num)\n  };\n\nfor (i in 1 to 100) {\n  Js.log(fizzbuzz(i))\n};\n```";

var rubyCode = "```ruby\n# A sample fizzbuzz implementation.\ndef fizzbuzz(num)\n  a = String.new\n  a << \"Fizz\" if num%3 == 0\n  a << \"Buzz\" if num%5 == 0\n  a << num.to_s if a.empty?\n  a\nend\n\n(1..100).each do |i|\n  puts fizzbuzz(i)\nend\n```";

var jsCode = "```js\n// A sample fizzbuzz implementation.\nconst fizzbuzz = (num) => {\n  if (i % (15) === 0){\n    return('fizzbuzz');\n  } else if (i % 3 === 0){\n    return('fizz');\n  } else if (i % 5 === 0){\n    return('buzz');\n  } else {\n    return(i);\n  }\n};\n\nfor(var i = 1; i <= 100; i++) {\n  console.log(fizzbuzz(i));\n}\n```";

var htmlCode = "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Fizzbuzz Demo</title>\n  </head>\n\n  <body>\n    <!-- Display for a JS implementation -->\n  </body>\n</html>\n";

var scssCode = "```scss\n/* Fizzbuzz with SCSS! */\n\n@import \"compass/css3\";\n\nul {\n  list-style-type:none;\n}\n\nli:nth-child(3n), li:nth-child(5n){\n  font-size:0px;\n}\n\nli:nth-child(3n):before{\n  font-size:16px;\n  content:\"Fizz\";\n}\n\nli:nth-child(5n):after{\n  font-size:16px;\n  content:\"Buzz\";\n}\n";

var cssCode = "```css\n/* Fizzbuzz with CSS! */\n\n.fizz-buzz {\n  counter-reset: fizzbuzz;\n}\n\n.fizz-buzz > div::before {\n  content: counter(fizzbuzz);\n  counter-increment: fizzbuzz;\n}\n\n.fizz-buzz > div:nth-of-type(3n+3)::before {\n  content: \"Fizz\";\n}\n\n.fizz-buzz > div:nth-of-type(5n+5)::before {\n  content: \"Buzz\";\n}\n\n.fizz-buzz > div:nth-of-type(3n+3):nth-of-type(5n+5)::before {\n  content: \"FizzBuzz\";\n}\n";

function renderedMarkdown(language) {
  var match;
  switch (language) {
    case /* ReasonML */0 :
        match = /* tuple */[
          "ReasonML",
          reasonCode
        ];
        break;
    case /* Ruby */1 :
        match = /* tuple */[
          "Ruby",
          rubyCode
        ];
        break;
    case /* Javascript */2 :
        match = /* tuple */[
          "Javascript",
          jsCode
        ];
        break;
    case /* Html */3 :
        match = /* tuple */[
          "HTML",
          htmlCode
        ];
        break;
    case /* Css */4 :
        match = /* tuple */[
          "CSS",
          cssCode
        ];
        break;
    case /* Scss */5 :
        match = /* tuple */[
          "SCSS",
          scssCode
        ];
        break;
    
  }
  return React.createElement("div", {
              className: "mt-4"
            }, React.createElement("p", {
                  className: "text-xs font-semibold"
                }, match[0]), React.createElement(MarkdownBlock.make, {
                  markdown: match[1],
                  className: "mt-2",
                  profile: /* Permissive */2
                }));
}

function handleChange(setLanguage, $$event) {
  var match = $$event.target.value;
  var language;
  switch (match) {
    case "css" :
        language = /* Css */4;
        break;
    case "html" :
        language = /* Html */3;
        break;
    case "javascript" :
        language = /* Javascript */2;
        break;
    case "reasonml" :
        language = /* ReasonML */0;
        break;
    case "ruby" :
        language = /* Ruby */1;
        break;
    case "scss" :
        language = /* Scss */5;
        break;
    default:
      language = /* ReasonML */0;
  }
  return Curry._1(setLanguage, (function (param) {
                return language;
              }));
}

function HomeStyleguide__MarkdownSyntaxHighlightingPreview(Props) {
  var match = React.useState((function () {
          return /* ReasonML */0;
        }));
  var setLanguage = match[1];
  return React.createElement("div", undefined, React.createElement("span", undefined, "Select a language to preview:"), React.createElement("select", {
                  className: "ml-2",
                  onChange: (function (param) {
                      return handleChange(setLanguage, param);
                    })
                }, React.createElement("option", {
                      value: "reasonml"
                    }, "ReasonML"), React.createElement("option", {
                      value: "ruby"
                    }, "Ruby"), React.createElement("option", {
                      value: "javascript"
                    }, "Javascript"), React.createElement("option", {
                      value: "html"
                    }, "HTML"), React.createElement("option", {
                      value: "css"
                    }, "CSS"), React.createElement("option", {
                      value: "scss"
                    }, "SCSS")), renderedMarkdown(match[0]));
}

var make = HomeStyleguide__MarkdownSyntaxHighlightingPreview;

exports.str = str;
exports.reasonCode = reasonCode;
exports.rubyCode = rubyCode;
exports.jsCode = jsCode;
exports.htmlCode = htmlCode;
exports.scssCode = scssCode;
exports.cssCode = cssCode;
exports.renderedMarkdown = renderedMarkdown;
exports.handleChange = handleChange;
exports.make = make;
/* react Not a pure module */
