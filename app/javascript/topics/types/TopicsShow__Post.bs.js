// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var User = require("../../shared/types/User.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var DateFns = require("../../shared/utils/DateFns.bs.js");
var ArrayUtils = require("../../shared/utils/ArrayUtils.bs.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");

function id(t) {
  return t.id;
}

function creatorId(t) {
  return t.creatorId;
}

function editorId(t) {
  return t.editorId;
}

function body(t) {
  return t.body;
}

function replies(t) {
  return t.replies;
}

function createdAt(t) {
  return t.createdAt;
}

function updatedAt(t) {
  return t.updatedAt;
}

function likedByUser(t) {
  return t.likedByUser;
}

function postNumber(t) {
  return t.postNumber;
}

function totalLikes(t) {
  return t.totalLikes;
}

function solution(t) {
  return t.solution;
}

function user(users, t) {
  return ArrayUtils.unsafeFind((function (user) {
                return User.id(user) === t.creatorId;
              }), "Unable to user with id: " + (t.creatorId + " in TopicsShow__Post"), users);
}

function sort(posts) {
  return ArrayUtils.copyAndSort((function (x, y) {
                return x.postNumber - y.postNumber | 0;
              }), posts);
}

function repliesToPost(posts, post) {
  return sort(posts.filter((function (p) {
                    return $$Array.mem(p.id, post.replies);
                  })));
}

function addReply(newReplyId, t) {
  return {
          id: t.id,
          body: t.body,
          creatorId: t.creatorId,
          editorId: t.editorId,
          postNumber: t.postNumber,
          createdAt: t.createdAt,
          updatedAt: t.updatedAt,
          totalLikes: t.totalLikes,
          likedByUser: t.likedByUser,
          replies: $$Array.append([newReplyId], t.replies),
          solution: t.solution
        };
}

function addLike(t) {
  return {
          id: t.id,
          body: t.body,
          creatorId: t.creatorId,
          editorId: t.editorId,
          postNumber: t.postNumber,
          createdAt: t.createdAt,
          updatedAt: t.updatedAt,
          totalLikes: t.totalLikes + 1 | 0,
          likedByUser: true,
          replies: t.replies,
          solution: t.solution
        };
}

function removeLike(t) {
  return {
          id: t.id,
          body: t.body,
          creatorId: t.creatorId,
          editorId: t.editorId,
          postNumber: t.postNumber,
          createdAt: t.createdAt,
          updatedAt: t.updatedAt,
          totalLikes: t.totalLikes - 1 | 0,
          likedByUser: false,
          replies: t.replies,
          solution: t.solution
        };
}

function markAsSolution(replyId, replies) {
  return replies.map((function (reply) {
                if (reply.id === replyId) {
                  return {
                          id: reply.id,
                          body: reply.body,
                          creatorId: reply.creatorId,
                          editorId: reply.editorId,
                          postNumber: reply.postNumber,
                          createdAt: reply.createdAt,
                          updatedAt: reply.updatedAt,
                          totalLikes: reply.totalLikes,
                          likedByUser: reply.likedByUser,
                          replies: reply.replies,
                          solution: true
                        };
                } else {
                  return {
                          id: reply.id,
                          body: reply.body,
                          creatorId: reply.creatorId,
                          editorId: reply.editorId,
                          postNumber: reply.postNumber,
                          createdAt: reply.createdAt,
                          updatedAt: reply.updatedAt,
                          totalLikes: reply.totalLikes,
                          likedByUser: reply.likedByUser,
                          replies: reply.replies,
                          solution: false
                        };
                }
              }));
}

function find(postId, posts) {
  return ArrayUtils.unsafeFind((function (post) {
                return post.id === postId;
              }), "Unable for find post with ID: " + (postId + " in TopicShow__Post"), posts);
}

function highestPostNumber(posts) {
  return posts.reduce((function (maxPostNumber, t) {
                if (t.postNumber > maxPostNumber) {
                  return t.postNumber;
                } else {
                  return maxPostNumber;
                }
              }), 0);
}

function make(id, body, creatorId, editorId, postNumber, createdAt, updatedAt, totalLikes, likedByUser, replies, solution) {
  return {
          id: id,
          body: body,
          creatorId: creatorId,
          editorId: editorId,
          postNumber: postNumber,
          createdAt: createdAt,
          updatedAt: updatedAt,
          totalLikes: totalLikes,
          likedByUser: likedByUser,
          replies: replies,
          solution: solution
        };
}

function decodeReplyId(json) {
  return Json_decode.field("id", Json_decode.string, json);
}

function decode(json) {
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          body: Json_decode.field("body", Json_decode.string, json),
          creatorId: Json_decode.field("creatorId", Json_decode.string, json),
          editorId: Json_decode.optional((function (param) {
                  return Json_decode.field("editorId", Json_decode.string, param);
                }), json),
          postNumber: Json_decode.field("postNumber", Json_decode.$$int, json),
          createdAt: Json_decode.field("createdAt", DateFns.decodeISO, json),
          updatedAt: Json_decode.field("updatedAt", DateFns.decodeISO, json),
          totalLikes: Json_decode.field("totalLikes", Json_decode.$$int, json),
          likedByUser: Json_decode.field("likedByUser", Json_decode.bool, json),
          replies: Json_decode.field("replies", (function (param) {
                  return Json_decode.array(decodeReplyId, param);
                }), json),
          solution: Json_decode.field("solution", Json_decode.bool, json)
        };
}

exports.id = id;
exports.creatorId = creatorId;
exports.editorId = editorId;
exports.body = body;
exports.replies = replies;
exports.createdAt = createdAt;
exports.updatedAt = updatedAt;
exports.likedByUser = likedByUser;
exports.postNumber = postNumber;
exports.totalLikes = totalLikes;
exports.solution = solution;
exports.user = user;
exports.sort = sort;
exports.repliesToPost = repliesToPost;
exports.addReply = addReply;
exports.addLike = addLike;
exports.removeLike = removeLike;
exports.markAsSolution = markAsSolution;
exports.find = find;
exports.highestPostNumber = highestPostNumber;
exports.make = make;
exports.decodeReplyId = decodeReplyId;
exports.decode = decode;
/* DateFns Not a pure module */
