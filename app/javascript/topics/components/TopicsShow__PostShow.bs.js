// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var User = require("../../shared/types/User.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FaIcon = require("../../shared/components/FaIcon.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var PfIcon = require("../../packages/pf-icon/src/PfIcon.bs.js");
var DateFns = require("../../shared/utils/DateFns.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Dropdown = require("../../shared/components/Dropdown.bs.js");
var Inflector = require("../../shared/utils/Inflector.bs.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ArrayUtils = require("../../shared/utils/ArrayUtils.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../../shared/utils/GraphqlQuery.bs.js");
var MarkdownBlock = require("../../shared/components/MarkdownBlock.bs.js");
var TopicsShow__Post = require("../types/TopicsShow__Post.bs.js");
var TopicsShow__UserShow = require("./TopicsShow__UserShow.bs.js");
var TopicsShow__PostReply = require("./TopicsShow__PostReply.bs.js");
var TopicsShow__PostEditor = require("./TopicsShow__PostEditor.bs.js");
var TopicsShow__LikeManager = require("./TopicsShow__LikeManager.bs.js");

function str(prim) {
  return prim;
}

((require("./TopicsShow__PostShow.css")));

var solutionIcon = React.createElement("div", {
      "aria-label": "Marked as solution icon",
      className: "flex lg:flex-col items-center px-2 lg:pl-0 py-1 lg:pr-1 lg:pr-4 lg:pb-4 lg:pt-2 bg-green-200 lg:bg-transparent rounded"
    }, React.createElement("div", {
          className: "flex items-center justify-center lg:w-8 lg:h-8 bg-green-200 text-green-800 rounded-full"
        }, React.createElement(PfIcon.make, {
              className: "if i-check-solid text-sm lg:text-base"
            })), React.createElement("div", {
          className: "text-xs lg:text-tiny font-semibold text-green-800 pl-2 lg:pl-0 lg:pt-1"
        }, "Solution"));

function findUser(users, userId) {
  return User.findById(userId, $$Array.to_list(users));
}

var ppx_printed_query = "mutation MarkAsSolutionMutation($id: ID!)  {\nmarkPostAsSolution(id: $id)  {\nsuccess  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "markPostAsSolution");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type MarkPostAsSolutionPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field markPostAsSolution on type Mutation is missing");
  }
  return {
          markPostAsSolution: tmp
        };
}

function make(id, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(id, param) {
  return Js_dict.fromArray([/* tuple */[
                  "id",
                  id
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, id, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "id",
                      id
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var MarkPostAsSolutionQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var ppx_printed_query$1 = "mutation ArchivePostMutation($id: ID!)  {\narchivePost(id: $id)  {\nsuccess  \n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "archivePost");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type ArchivePostPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field archivePost on type Mutation is missing");
  }
  return {
          archivePost: tmp
        };
}

function make$1(id, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeVariables$1(id, param) {
  return Js_dict.fromArray([/* tuple */[
                  "id",
                  id
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$1(graphql_ppx_use_json_variables_fn, id, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "id",
                      id
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$1 = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002$1
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var ArchivePostQuery = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  make: make$1,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

function markPostAsSolution(postId, markPostAsSolutionCB) {
  (function (eta) {
          return GraphqlQuery.sendQuery(undefined, eta);
        })(make(postId, /* () */0)).then((function (response) {
          if (response.markPostAsSolution.success) {
            Curry._1(markPostAsSolutionCB, /* () */0);
          }
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function archivePost(isFirstPost, postId, archivePostCB) {
  if (window.confirm((
          isFirstPost ? "Are you sure you want to delete the topic? " : "Are you sure you want to delete the post? "
        ) + "This cannot be undone.")) {
    (function (eta) {
            return GraphqlQuery.sendQuery(undefined, eta);
          })(make$1(postId, /* () */0)).then((function (response) {
            if (response.archivePost.success) {
              Curry._1(archivePostCB, /* () */0);
            }
            return Promise.resolve(/* () */0);
          }));
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function optionsDropdown(post, isPostCreator, isTopicCreator, isCoach, isFirstPost, replies, toggleShowPostEdit, markPostAsSolutionCB, archivePostCB) {
  var selected = React.createElement("div", {
        "aria-label": "Options for post " + TopicsShow__Post.id(post),
        className: "flex items-center justify-center w-8 h-8 rounded leading-tight border bg-gray-100 text-gray-800 cursor-pointer hover:bg-gray-200"
      }, React.createElement(PfIcon.make, {
            className: "if i-ellipsis-h-regular text-base"
          }));
  var postTypeString = isFirstPost ? "Post" : "Reply";
  var editPostButton = React.createElement("button", {
        className: "flex w-full px-3 py-2 font-semibold items-center text-gray-700 whitespace-no-wrap",
        onClick: (function (param) {
            return Curry._1(toggleShowPostEdit, (function (param) {
                          return true;
                        }));
          })
      }, React.createElement(FaIcon.make, {
            classes: "fas fa-edit fa-fw text-base"
          }), React.createElement("span", {
            className: "ml-2"
          }, "Edit " + postTypeString));
  var markAsSolutionButton = isFirstPost || TopicsShow__Post.solution(post) ? null : React.createElement("button", {
          className: "flex w-full px-3 py-2 font-semibold items-center text-gray-700 whitespace-no-wrap",
          onClick: (function (param) {
              return markPostAsSolution(TopicsShow__Post.id(post), markPostAsSolutionCB);
            })
        }, React.createElement(PfIcon.make, {
              className: "if i-check-circle-alt-regular if-fw text-base"
            }), React.createElement("span", {
              className: "ml-2"
            }, "Mark as solution"));
  var showDelete = isFirstPost ? isCoach || isPostCreator && ArrayUtils.isEmpty(replies) : isCoach || isPostCreator;
  var deletePostButton = showDelete ? React.createElement("button", {
          className: "flex w-full px-3 py-2 font-semibold items-center text-gray-700 whitespace-no-wrap",
          onClick: (function (param) {
              return archivePost(isFirstPost, TopicsShow__Post.id(post), archivePostCB);
            })
        }, React.createElement(FaIcon.make, {
              classes: "fas fa-trash-alt fa-fw text-base"
            }), React.createElement("span", {
              className: "ml-2"
            }, "Delete " + postTypeString)) : null;
  var match = TopicsShow__Post.editorId(post);
  var historyButton = match !== undefined ? React.createElement("a", {
          className: "flex w-full px-3 py-2 font-semibold items-center text-gray-700 whitespace-no-wrap",
          href: "/posts/" + (TopicsShow__Post.id(post) + "/versions")
        }, React.createElement(FaIcon.make, {
              classes: "fas fa-history fa-fw text-base"
            }), React.createElement("span", {
              className: "ml-2"
            }, "History")) : null;
  var contents = isCoach ? [
      editPostButton,
      markAsSolutionButton,
      historyButton,
      deletePostButton
    ] : (
      isTopicCreator ? (
          isPostCreator ? [
              editPostButton,
              markAsSolutionButton,
              historyButton,
              deletePostButton
            ] : [
              markAsSolutionButton,
              historyButton
            ]
        ) : (
          isPostCreator ? [
              editPostButton,
              historyButton,
              deletePostButton
            ] : []
        )
    );
  return React.createElement(Dropdown.make, {
              selected: selected,
              contents: contents,
              right: true
            });
}

function onBorderAnimationEnd($$event) {
  var element = $$event.target;
  element.className = "";
  return /* () */0;
}

function navigateToEditor(param) {
  var element = document.getElementById("add-reply-to-topic");
  setTimeout((function (param) {
          if (element == null) {
            Rollbar.error("Could not find the post to scroll to.");
            return /* () */0;
          } else {
            element.scrollIntoView();
            element.className = "w-full flex flex-col topics-show__highlighted-item";
            return /* () */0;
          }
        }), 50);
  return /* () */0;
}

function TopicsShow__PostShow(Props) {
  var post = Props.post;
  var topic = Props.topic;
  var users = Props.users;
  var posts = Props.posts;
  var currentUserId = Props.currentUserId;
  var isCoach = Props.isCoach;
  var isTopicCreator = Props.isTopicCreator;
  var updatePostCB = Props.updatePostCB;
  var addNewReplyCB = Props.addNewReplyCB;
  var addPostLikeCB = Props.addPostLikeCB;
  var removePostLikeCB = Props.removePostLikeCB;
  var markPostAsSolutionCB = Props.markPostAsSolutionCB;
  var archivePostCB = Props.archivePostCB;
  var isPostCreator = currentUserId === TopicsShow__Post.creatorId(post);
  var isFirstPost = TopicsShow__Post.postNumber(post) === 1;
  var repliesToPost = isFirstPost ? [] : TopicsShow__Post.repliesToPost(posts, post);
  var match = React.useState((function () {
          return false;
        }));
  var toggleShowPostEdit = match[1];
  var match$1 = React.useState((function () {
          return false;
        }));
  var toggleShowReplies = match$1[1];
  var showReplies = match$1[0];
  var userId = TopicsShow__Post.creatorId(post);
  var tmp;
  if (match[0]) {
    tmp = React.createElement("div", {
          className: "flex-1"
        }, React.createElement(TopicsShow__PostEditor.make, {
              id: "edit-post-" + TopicsShow__Post.id(post),
              topic: topic,
              currentUserId: currentUserId,
              handlePostCB: updatePostCB,
              replies: posts,
              users: users,
              post: post,
              handleCloseCB: (function (param) {
                  return Curry._1(toggleShowPostEdit, (function (param) {
                                return false;
                              }));
                })
            }));
  } else {
    var match$2 = TopicsShow__Post.editorId(post);
    tmp = React.createElement("div", {
          className: "flex items-start justify-between min-w-0"
        }, React.createElement("div", {
              className: "text-sm min-w-0"
            }, React.createElement(MarkdownBlock.make, {
                  markdown: TopicsShow__Post.body(post),
                  className: "leading-normal text-sm ",
                  profile: /* QuestionAndAnswer */1
                }), match$2 !== undefined ? React.createElement("div", undefined, React.createElement("div", {
                        className: "text-xs mt-1 inline-block px-2 py-1 rounded bg-gray-100 text-xs text-gray-800 "
                      }, React.createElement("span", undefined, "Last edited by "), React.createElement("span", {
                            className: "font-semibold"
                          }, User.name(User.findById(match$2, $$Array.to_list(users)))), React.createElement("span", undefined, " on " + DateFns.format(TopicsShow__Post.updatedAt(post), "do MMMM, yyyy HH:mm")))) : null), React.createElement("div", {
              className: "hidden lg:block flex-shrink-0 ml-3"
            }, isPostCreator || isCoach || isTopicCreator ? optionsDropdown(post, isPostCreator, isTopicCreator, isCoach, isFirstPost, posts, toggleShowPostEdit, markPostAsSolutionCB, archivePostCB) : null));
  }
  var userId$1 = TopicsShow__Post.creatorId(post);
  return React.createElement("div", {
              id: "post-show-" + TopicsShow__Post.id(post),
              onAnimationEnd: onBorderAnimationEnd
            }, React.createElement("div", {
                  key: TopicsShow__Post.id(post),
                  className: "flex pt-4"
                }, React.createElement("div", {
                      className: "hidden lg:flex flex-col"
                    }, TopicsShow__Post.solution(post) ? solutionIcon : null, React.createElement(TopicsShow__LikeManager.make, {
                          post: post,
                          addPostLikeCB: addPostLikeCB,
                          removePostLikeCB: removePostLikeCB
                        })), React.createElement("div", {
                      className: "flex-1 pb-6 lg:pb-8 topics-post-show__post-body min-w-0"
                    }, React.createElement("div", {
                          className: "pt-2",
                          id: "body"
                        }, React.createElement("div", {
                              className: "flex justify-between lg:hidden"
                            }, React.createElement(TopicsShow__UserShow.make, {
                                  user: User.findById(userId, $$Array.to_list(users)),
                                  createdAt: TopicsShow__Post.createdAt(post)
                                }), React.createElement("div", {
                                  className: "flex-shrink-0 mt-1"
                                }, isPostCreator || isCoach || isTopicCreator ? optionsDropdown(post, isPostCreator, isTopicCreator, isCoach, isFirstPost, posts, toggleShowPostEdit, markPostAsSolutionCB, archivePostCB) : null)), tmp), React.createElement("div", {
                          className: "flex justify-between lg:items-end pt-4"
                        }, React.createElement("div", {
                              className: "flex-1 lg:flex-initial mr-3"
                            }, React.createElement("div", {
                                  className: "hidden lg:block"
                                }, React.createElement(TopicsShow__UserShow.make, {
                                      user: User.findById(userId$1, $$Array.to_list(users)),
                                      createdAt: TopicsShow__Post.createdAt(post)
                                    })), React.createElement("div", {
                                  className: "flex items-center lg:items-start justify-between lg:hidden"
                                }, React.createElement("div", {
                                      className: "flex"
                                    }, React.createElement(TopicsShow__LikeManager.make, {
                                          post: post,
                                          addPostLikeCB: addPostLikeCB,
                                          removePostLikeCB: removePostLikeCB
                                        }), React.createElement("div", undefined, ArrayUtils.isNotEmpty(repliesToPost) ? React.createElement("button", {
                                                className: "cursor-pointer flex flex-col items-center justify-center",
                                                onClick: (function (param) {
                                                    return Curry._1(toggleShowReplies, (function (showReplies) {
                                                                  return !showReplies;
                                                                }));
                                                  })
                                              }, React.createElement("span", {
                                                    className: "flex items-center justify-center rounded-lg lg:bg-gray-100 hover:bg-gray-300 text-gray-700 hover:text-gray-900 h-8 w-8 md:h-10 md:w-10 p-1 md:p-2 mx-auto"
                                                  }, React.createElement(FaIcon.make, {
                                                        classes: "far fa-comment-alt"
                                                      })), React.createElement("span", {
                                                    className: "text-tiny lg:text-xs font-semibold"
                                                  }, String(TopicsShow__Post.replies(post).length))) : null)), TopicsShow__Post.solution(post) ? solutionIcon : null)), React.createElement("div", {
                              className: "flex items-center text-sm font-semibold lg:mb-1"
                            }, React.createElement("div", {
                                  className: "hidden lg:block"
                                }, ArrayUtils.isNotEmpty(repliesToPost) ? React.createElement("button", {
                                        "aria-label": "Show replies of post " + TopicsShow__Post.id(post),
                                        className: "border bg-white mr-3 p-2 rounded text-xs font-semibold",
                                        id: "show-replies-" + TopicsShow__Post.id(post),
                                        onClick: (function (param) {
                                            return Curry._1(toggleShowReplies, (function (showReplies) {
                                                          return !showReplies;
                                                        }));
                                          })
                                      }, Inflector.pluralize("Reply", TopicsShow__Post.replies(post).length, true, /* () */0), React.createElement(FaIcon.make, {
                                            classes: "ml-2 fas fa-chevron-" + (
                                              showReplies ? "up" : "down"
                                            )
                                          })) : null), React.createElement("button", {
                                  "aria-label": isFirstPost ? "Add reply to topic" : "Add reply to post " + TopicsShow__Post.id(post),
                                  className: "bg-gray-100 lg:border lg:bg-gray-200 p-2 rounded text-xs font-semibold",
                                  id: "reply-button-" + TopicsShow__Post.id(post),
                                  onClick: (function (param) {
                                      Curry._1(addNewReplyCB, /* () */0);
                                      return navigateToEditor(/* () */0);
                                    })
                                }, React.createElement(FaIcon.make, {
                                      classes: "fas fa-reply mr-2"
                                    }), "Reply"))), showReplies ? React.createElement("div", {
                            "aria-label": "Replies to post " + TopicsShow__Post.id(post),
                            className: "lg:pl-10 pt-2 topics-post-show__replies-container"
                          }, $$Array.map((function (post) {
                                  return React.createElement(TopicsShow__PostReply.make, {
                                              post: post,
                                              users: users,
                                              key: TopicsShow__Post.id(post)
                                            });
                                }), repliesToPost)) : null)));
}

var make$2 = TopicsShow__PostShow;

exports.str = str;
exports.solutionIcon = solutionIcon;
exports.findUser = findUser;
exports.MarkPostAsSolutionQuery = MarkPostAsSolutionQuery;
exports.ArchivePostQuery = ArchivePostQuery;
exports.markPostAsSolution = markPostAsSolution;
exports.archivePost = archivePost;
exports.optionsDropdown = optionsDropdown;
exports.onBorderAnimationEnd = onBorderAnimationEnd;
exports.navigateToEditor = navigateToEditor;
exports.make = make$2;
/*  Not a pure module */
