// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var User = require("../../shared/types/User.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Avatar = require("../../shared/Avatar.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var PfIcon = require("../../packages/pf-icon/src/PfIcon.bs.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ArrayUtils = require("../../shared/utils/ArrayUtils.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var OptionUtils = require("../../shared/utils/OptionUtils.bs.js");
var GraphqlQuery = require("../../shared/utils/GraphqlQuery.bs.js");
var $$Notification = require("../../shared/Notification.bs.js");
var MarkdownBlock = require("../../shared/components/MarkdownBlock.bs.js");
var DisablingCover = require("../../shared/components/DisablingCover.bs.js");
var MarkdownEditor = require("../../shared/components/MarkdownEditor.bs.js");
var TopicsShow__Post = require("../types/TopicsShow__Post.bs.js");
var TopicsShow__Topic = require("../types/TopicsShow__Topic.bs.js");

function str(prim) {
  return prim;
}

var ppx_printed_query = "mutation CreatePostMutation($body: String!, $topicId: ID!, $replyToPostId: ID)  {\ncreatePost(body: $body, topicId: $topicId, replyToPostId: $replyToPostId)  {\npostId  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createPost");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "postId");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$3);
      if (match$2 !== undefined) {
        tmp$1 = undefined;
      } else {
        var match$3 = Js_json.decodeString(value$3);
        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
      }
    } else {
      tmp$1 = undefined;
    }
    tmp = {
      postId: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field createPost on type Mutation is missing");
  }
  return {
          createPost: tmp
        };
}

function make(body, topicId, replyToPostId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "body",
                    body
                  ],
                  /* tuple */[
                    "topicId",
                    topicId
                  ],
                  /* tuple */[
                    "replyToPostId",
                    replyToPostId !== undefined ? replyToPostId : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var body = variables.body;
  var topicId = variables.topicId;
  var replyToPostId = variables.replyToPostId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "body",
                    body
                  ],
                  /* tuple */[
                    "topicId",
                    topicId
                  ],
                  /* tuple */[
                    "replyToPostId",
                    replyToPostId !== undefined ? replyToPostId : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(body, topicId, replyToPostId, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "body",
                  body
                ],
                /* tuple */[
                  "topicId",
                  topicId
                ],
                /* tuple */[
                  "replyToPostId",
                  replyToPostId !== undefined ? replyToPostId : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, body, topicId, replyToPostId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "body",
                      body
                    ],
                    /* tuple */[
                      "topicId",
                      topicId
                    ],
                    /* tuple */[
                      "replyToPostId",
                      replyToPostId !== undefined ? replyToPostId : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var CreatePostQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var ppx_printed_query$1 = "mutation UpdatePostMutation($id: ID!, $body: String!)  {\nupdatePost(id: $id, body: $body)  {\nsuccess  \n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updatePost");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type UpdatePostPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field updatePost on type Mutation is missing");
  }
  return {
          updatePost: tmp
        };
}

function make$1(id, body, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "body",
                    body
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var id = variables.id;
  var body = variables.body;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "body",
                    body
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeVariables$1(id, body, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "body",
                  body
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$1(graphql_ppx_use_json_variables_fn, id, body, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "id",
                      id
                    ],
                    /* tuple */[
                      "body",
                      body
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$1 = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002$1
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var UpdatePostQuery = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  make: make$1,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

var dateTime = new Date();

function handlePostCreateResponse(id, body, postNumber, currentUserId, setState, handlePostCB) {
  var post = TopicsShow__Post.make(id, body, currentUserId, undefined, postNumber, dateTime, dateTime, 0, false, [], false);
  Curry._1(setState, (function (param) {
          return {
                  body: "",
                  saving: false
                };
        }));
  return Curry._1(handlePostCB, post);
}

function handlePostUpdateResponse(id, body, currentUserId, setState, handleCloseCB, handlePostCB, post) {
  var updatedPost = TopicsShow__Post.make(id, body, TopicsShow__Post.creatorId(post), currentUserId, TopicsShow__Post.postNumber(post), TopicsShow__Post.createdAt(post), dateTime, TopicsShow__Post.totalLikes(post), TopicsShow__Post.likedByUser(post), TopicsShow__Post.replies(post), TopicsShow__Post.solution(post));
  Curry._1(setState, (function (param) {
          return {
                  body: "",
                  saving: false
                };
        }));
  OptionUtils.mapWithDefault((function (cb) {
          return Curry._1(cb, /* () */0);
        }), /* () */0, handleCloseCB);
  return Curry._1(handlePostCB, updatedPost);
}

function savePost(body, topic, setState, currentUserId, replyToPostId, handlePostCB, post, postNumber, handleCloseCB, $$event) {
  $$event.preventDefault();
  if (body !== "") {
    Curry._1(setState, (function (state) {
            return {
                    body: state.body,
                    saving: true
                  };
          }));
    if (post !== undefined) {
      var post$1 = post;
      var postId = TopicsShow__Post.id(post$1);
      (function (eta) {
                return GraphqlQuery.sendQuery(undefined, eta);
              })(make$1(postId, body, /* () */0)).then((function (response) {
                if (response.updatePost.success) {
                  handlePostUpdateResponse(postId, body, currentUserId, setState, handleCloseCB, handlePostCB, post$1);
                } else {
                  Curry._1(setState, (function (state) {
                          return {
                                  body: state.body,
                                  saving: false
                                };
                        }));
                }
                return Promise.resolve(/* () */0);
              })).catch((function (param) {
              Curry._1(setState, (function (state) {
                      return {
                              body: state.body,
                              saving: false
                            };
                    }));
              return Promise.resolve(/* () */0);
            }));
      return /* () */0;
    } else {
      (function (eta) {
                return GraphqlQuery.sendQuery(undefined, eta);
              })(make(body, TopicsShow__Topic.id(topic), replyToPostId, /* () */0)).then((function (response) {
                var match = response.createPost.postId;
                if (match !== undefined) {
                  handlePostCreateResponse(match, body, postNumber, currentUserId, setState, handlePostCB);
                } else {
                  Curry._1(setState, (function (state) {
                          return {
                                  body: state.body,
                                  saving: false
                                };
                        }));
                }
                return Promise.resolve(/* () */0);
              })).catch((function (param) {
              Curry._1(setState, (function (state) {
                      return {
                              body: state.body,
                              saving: false
                            };
                    }));
              return Promise.resolve(/* () */0);
            }));
      return /* () */0;
    }
  } else {
    return $$Notification.error("Empty", "Reply cant be blank");
  }
}

function onBorderAnimationEnd($$event) {
  var element = $$event.target;
  element.className = "w-full flex flex-col";
  return /* () */0;
}

function replyToUserInfo(user) {
  var match = User.avatarUrl(user);
  return React.createElement("div", {
              className: "flex items-center border bg-white px-2 py-1 rounded-lg"
            }, match !== undefined ? React.createElement("img", {
                    className: "w-6 h-6 text-xs border border-gray-400 rounded-full overflow-hidden flex-shrink-0 object-cover",
                    src: match
                  }) : React.createElement(Avatar.make, {
                    name: User.name(user),
                    className: "w-6 h-6 text-xs border border-gray-400 rounded-full overflow-hidden flex-shrink-0 object-cover"
                  }), React.createElement("span", {
                  className: "text-xs font-semibold ml-2"
                }, User.name(user)));
}

function TopicsShow__PostEditor(Props) {
  var id = Props.id;
  var topic = Props.topic;
  var currentUserId = Props.currentUserId;
  var handlePostCB = Props.handlePostCB;
  var replies = Props.replies;
  var users = Props.users;
  var replyToPostId = Props.replyToPostId;
  var post = Props.post;
  var handleCloseCB = Props.handleCloseCB;
  var removeReplyToPostCB = Props.removeReplyToPostCB;
  var match = React.useState((function () {
          return {
                  body: post !== undefined ? TopicsShow__Post.body(post) : "",
                  saving: false
                };
        }));
  var setState = match[1];
  var state = match[0];
  var updateMarkdownCB = function (body) {
    return Curry._1(setState, (function (state) {
                  return {
                          body: body,
                          saving: state.saving
                        };
                }));
  };
  var tmp;
  if (handleCloseCB !== undefined) {
    var handleCloseCB$1 = handleCloseCB;
    tmp = React.createElement("button", {
          className: "btn btn-subtle mr-2",
          disabled: state.saving,
          onClick: (function (param) {
              return Curry._1(handleCloseCB$1, /* () */0);
            })
        }, "Cancel");
  } else {
    tmp = null;
  }
  var newPostNumber = ArrayUtils.isNotEmpty(replies) ? TopicsShow__Post.highestPostNumber(replies) + 1 | 0 : 2;
  var partial_arg = state.body;
  return React.createElement(DisablingCover.make, {
              disabled: state.saving,
              children: React.createElement("div", {
                    "aria-label": "Add new reply",
                    className: "py-2 lg:px-0 max-w-4xl w-full flex mx-auto items-center justify-center relative"
                  }, React.createElement("div", {
                        className: "flex w-full"
                      }, React.createElement("div", {
                            className: "w-full flex flex-col",
                            id: id,
                            onAnimationEnd: onBorderAnimationEnd
                          }, React.createElement("label", {
                                className: "inline-block tracking-wide text-gray-900 text-sm font-semibold mb-2",
                                htmlFor: "new-reply"
                              }, replyToPostId !== undefined ? "Reply To" : "Your Reply"), Belt_Option.mapWithDefault(Belt_Option.flatMap(replyToPostId, (function (postId) {
                                      return Caml_option.undefined_to_opt(replies.find((function (reply) {
                                                        return postId === TopicsShow__Post.id(reply);
                                                      })));
                                    })), null, (function (reply) {
                                  return React.createElement("div", {
                                              className: "max-w-md rounded border border-primary-200 p-3 bg-gray-200 mb-3"
                                            }, React.createElement("div", {
                                                  className: "flex justify-between"
                                                }, replyToUserInfo(TopicsShow__Post.user(users, reply)), React.createElement("div", {
                                                      className: "flex w-6 h-6 p-2 items-center justify-center cursor-pointer border border-gray-400 rounded bg-gray-200 hover:bg-gray-400",
                                                      onClick: (function (param) {
                                                          return OptionUtils.mapWithDefault((function (cb) {
                                                                        return Curry._1(cb, /* () */0);
                                                                      }), /* () */0, removeReplyToPostCB);
                                                        })
                                                    }, React.createElement(PfIcon.make, {
                                                          className: "if i-times-regular text-base"
                                                        }))), React.createElement("p", {
                                                  className: "text-sm pt-2 max-w-sm"
                                                }, React.createElement(MarkdownBlock.make, {
                                                      markdown: TopicsShow__Post.body(reply),
                                                      className: "leading-normal text-sm truncate",
                                                      profile: /* QuestionAndAnswer */1
                                                    })));
                                })), React.createElement("div", undefined, React.createElement(MarkdownEditor.make, {
                                    value: state.body,
                                    onChange: updateMarkdownCB,
                                    profile: /* QuestionAndAnswer */1,
                                    textareaId: "new-reply",
                                    maxLength: 10000,
                                    placeholder: "Type in your reply. You can use Markdown to format your response."
                                  })), React.createElement("div", {
                                className: "flex justify-end pt-3"
                              }, tmp, React.createElement("button", {
                                    className: "btn btn-primary",
                                    disabled: state.saving || $$String.trim(state.body) === "",
                                    onClick: (function (param) {
                                        return savePost(partial_arg, topic, setState, currentUserId, replyToPostId, handlePostCB, post, newPostNumber, handleCloseCB, param);
                                      })
                                  }, post !== undefined ? (
                                      TopicsShow__Post.postNumber(post) === 1 ? "Update Post" : "Update Reply"
                                    ) : "Post Your Reply")))))
            });
}

var make$2 = TopicsShow__PostEditor;

exports.str = str;
exports.CreatePostQuery = CreatePostQuery;
exports.UpdatePostQuery = UpdatePostQuery;
exports.dateTime = dateTime;
exports.handlePostCreateResponse = handlePostCreateResponse;
exports.handlePostUpdateResponse = handlePostUpdateResponse;
exports.savePost = savePost;
exports.onBorderAnimationEnd = onBorderAnimationEnd;
exports.replyToUserInfo = replyToUserInfo;
exports.make = make$2;
/* dateTime Not a pure module */
