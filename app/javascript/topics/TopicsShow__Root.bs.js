// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Inflector = require("../shared/utils/Inflector.bs.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GraphqlQuery = require("../shared/utils/GraphqlQuery.bs.js");
var DisablingCover = require("../shared/components/DisablingCover.bs.js");
var TopicsShow__Post = require("./types/TopicsShow__Post.bs.js");
var TopicsShow__Topic = require("./types/TopicsShow__Topic.bs.js");
var TopicsShow__PostShow = require("./components/TopicsShow__PostShow.bs.js");
var TopicsShow__Community = require("./types/TopicsShow__Community.bs.js");
var TopicsShow__PostEditor = require("./components/TopicsShow__PostEditor.bs.js");
var TopicsShow__LinkedTarget = require("./types/TopicsShow__LinkedTarget.bs.js");

((require("./TopicsShow__Root.css")));

function str(prim) {
  return prim;
}

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* LikeFirstPost */0 :
          return {
                  topic: state.topic,
                  firstPost: TopicsShow__Post.addLike(state.firstPost),
                  replies: state.replies,
                  replyToPostId: state.replyToPostId,
                  topicTitle: state.topicTitle,
                  savingTopic: state.savingTopic,
                  showTopicEditor: state.showTopicEditor
                };
      case /* RemoveLikeFromFirstPost */1 :
          return {
                  topic: state.topic,
                  firstPost: TopicsShow__Post.removeLike(state.firstPost),
                  replies: state.replies,
                  replyToPostId: state.replyToPostId,
                  topicTitle: state.topicTitle,
                  savingTopic: state.savingTopic,
                  showTopicEditor: state.showTopicEditor
                };
      case /* RemoveReplyToPost */2 :
          return {
                  topic: state.topic,
                  firstPost: state.firstPost,
                  replies: state.replies,
                  replyToPostId: undefined,
                  topicTitle: state.topicTitle,
                  savingTopic: state.savingTopic,
                  showTopicEditor: state.showTopicEditor
                };
      
    }
  } else {
    switch (action.tag | 0) {
      case /* SaveReply */0 :
          var replyToPostId = action[1];
          var newReply = action[0];
          if (replyToPostId !== undefined) {
            var id = replyToPostId;
            var updatedParentPost = TopicsShow__Post.addReply(TopicsShow__Post.id(newReply), TopicsShow__Post.find(id, state.replies));
            return {
                    topic: state.topic,
                    firstPost: state.firstPost,
                    replies: $$Array.append([
                          newReply,
                          updatedParentPost
                        ], state.replies.filter((function (r) {
                                return TopicsShow__Post.id(r) !== id;
                              }))),
                    replyToPostId: undefined,
                    topicTitle: state.topicTitle,
                    savingTopic: state.savingTopic,
                    showTopicEditor: state.showTopicEditor
                  };
          } else {
            return {
                    topic: state.topic,
                    firstPost: state.firstPost,
                    replies: $$Array.append([newReply], state.replies),
                    replyToPostId: state.replyToPostId,
                    topicTitle: state.topicTitle,
                    savingTopic: state.savingTopic,
                    showTopicEditor: state.showTopicEditor
                  };
          }
      case /* AddNewReply */1 :
          return {
                  topic: state.topic,
                  firstPost: state.firstPost,
                  replies: state.replies,
                  replyToPostId: action[0],
                  topicTitle: state.topicTitle,
                  savingTopic: state.savingTopic,
                  showTopicEditor: state.showTopicEditor
                };
      case /* LikeReply */2 :
          var post = action[0];
          var updatedPost = TopicsShow__Post.addLike(post);
          return {
                  topic: state.topic,
                  firstPost: state.firstPost,
                  replies: $$Array.append([updatedPost], state.replies.filter((function (reply) {
                              return TopicsShow__Post.id(reply) !== TopicsShow__Post.id(post);
                            }))),
                  replyToPostId: state.replyToPostId,
                  topicTitle: state.topicTitle,
                  savingTopic: state.savingTopic,
                  showTopicEditor: state.showTopicEditor
                };
      case /* RemoveLikeFromReply */3 :
          var post$1 = action[0];
          var updatedPost$1 = TopicsShow__Post.removeLike(post$1);
          return {
                  topic: state.topic,
                  firstPost: state.firstPost,
                  replies: $$Array.append([updatedPost$1], state.replies.filter((function (reply) {
                              return TopicsShow__Post.id(reply) !== TopicsShow__Post.id(post$1);
                            }))),
                  replyToPostId: state.replyToPostId,
                  topicTitle: state.topicTitle,
                  savingTopic: state.savingTopic,
                  showTopicEditor: state.showTopicEditor
                };
      case /* UpdateFirstPost */4 :
          return {
                  topic: state.topic,
                  firstPost: action[0],
                  replies: state.replies,
                  replyToPostId: state.replyToPostId,
                  topicTitle: state.topicTitle,
                  savingTopic: state.savingTopic,
                  showTopicEditor: state.showTopicEditor
                };
      case /* UpdateReply */5 :
          var reply = action[0];
          return {
                  topic: state.topic,
                  firstPost: state.firstPost,
                  replies: $$Array.append([reply], state.replies.filter((function (r) {
                              return TopicsShow__Post.id(r) !== TopicsShow__Post.id(reply);
                            }))),
                  replyToPostId: state.replyToPostId,
                  topicTitle: state.topicTitle,
                  savingTopic: state.savingTopic,
                  showTopicEditor: state.showTopicEditor
                };
      case /* ArchivePost */6 :
          var postId = action[0];
          return {
                  topic: state.topic,
                  firstPost: state.firstPost,
                  replies: state.replies.filter((function (r) {
                          return TopicsShow__Post.id(r) !== postId;
                        })),
                  replyToPostId: state.replyToPostId,
                  topicTitle: state.topicTitle,
                  savingTopic: state.savingTopic,
                  showTopicEditor: state.showTopicEditor
                };
      case /* UpdateTopicTitle */7 :
          return {
                  topic: state.topic,
                  firstPost: state.firstPost,
                  replies: state.replies,
                  replyToPostId: state.replyToPostId,
                  topicTitle: action[0],
                  savingTopic: state.savingTopic,
                  showTopicEditor: state.showTopicEditor
                };
      case /* SaveTopic */8 :
          return {
                  topic: action[0],
                  firstPost: state.firstPost,
                  replies: state.replies,
                  replyToPostId: state.replyToPostId,
                  topicTitle: state.topicTitle,
                  savingTopic: false,
                  showTopicEditor: false
                };
      case /* ShowTopicEditor */9 :
          return {
                  topic: state.topic,
                  firstPost: state.firstPost,
                  replies: state.replies,
                  replyToPostId: state.replyToPostId,
                  topicTitle: state.topicTitle,
                  savingTopic: state.savingTopic,
                  showTopicEditor: action[0]
                };
      case /* UpdateSavingTopic */10 :
          return {
                  topic: state.topic,
                  firstPost: state.firstPost,
                  replies: state.replies,
                  replyToPostId: state.replyToPostId,
                  topicTitle: state.topicTitle,
                  savingTopic: action[0],
                  showTopicEditor: state.showTopicEditor
                };
      case /* MarkReplyAsSolution */11 :
          return {
                  topic: state.topic,
                  firstPost: state.firstPost,
                  replies: TopicsShow__Post.markAsSolution(action[0], state.replies),
                  replyToPostId: state.replyToPostId,
                  topicTitle: state.topicTitle,
                  savingTopic: state.savingTopic,
                  showTopicEditor: state.showTopicEditor
                };
      
    }
  }
}

function addNewReply(send, replyToPostId, param) {
  return Curry._1(send, /* AddNewReply */Block.__(1, [replyToPostId]));
}

function updateReply(send, reply) {
  return Curry._1(send, /* UpdateReply */Block.__(5, [reply]));
}

function updateFirstPost(send, post) {
  return Curry._1(send, /* UpdateFirstPost */Block.__(4, [post]));
}

function saveReply(send, replyToPostId, reply) {
  return Curry._1(send, /* SaveReply */Block.__(0, [
                reply,
                replyToPostId
              ]));
}

function isTopicCreator(firstPost, currentUserId) {
  return TopicsShow__Post.creatorId(firstPost) === currentUserId;
}

function archiveTopic(community) {
  window.location = TopicsShow__Community.path(community);
  return /* () */0;
}

var ppx_printed_query = "mutation UpdateTopicMutation($id: ID!, $title: String!)  {\nupdateTopic(id: $id, title: $title)  {\nsuccess  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updateTopic");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "success");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field success on type UpdateTopicPayload is missing");
    }
    tmp = {
      success: tmp$1
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field updateTopic on type Mutation is missing");
  }
  return {
          updateTopic: tmp
        };
}

function make(id, title, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "title",
                    title
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  var title = variables.title;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "title",
                    title
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(id, title, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "title",
                  title
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, id, title, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "id",
                      id
                    ],
                    /* tuple */[
                      "title",
                      title
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var UpdateTopicQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function updateTopic(state, send, $$event) {
  $$event.preventDefault();
  Curry._1(send, /* UpdateSavingTopic */Block.__(10, [true]));
  (function (eta) {
            return GraphqlQuery.sendQuery(undefined, eta);
          })(make(TopicsShow__Topic.id(state.topic), state.topicTitle, /* () */0)).then((function (response) {
            if (response.updateTopic.success) {
              var topic = TopicsShow__Topic.updateTitle(state.topicTitle, state.topic);
              Curry._1(send, /* SaveTopic */Block.__(8, [topic]));
            } else {
              Curry._1(send, /* UpdateSavingTopic */Block.__(10, [false]));
            }
            return Promise.resolve(/* () */0);
          })).catch((function (param) {
          Curry._1(send, /* UpdateSavingTopic */Block.__(10, [false]));
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function communityLink(community) {
  return React.createElement("a", {
              className: "btn btn-subtle",
              href: TopicsShow__Community.path(community)
            }, React.createElement("i", {
                  className: "fas fa-users"
                }), React.createElement("span", {
                  className: "ml-2"
                }, TopicsShow__Community.name(community)));
}

function TopicsShow__Root(Props) {
  var topic = Props.topic;
  var firstPost = Props.firstPost;
  var replies = Props.replies;
  var users = Props.users;
  var currentUserId = Props.currentUserId;
  var isCoach = Props.isCoach;
  var community = Props.community;
  var target = Props.target;
  var match = React.useReducer(reducer, topic, (function (topic) {
          return {
                  topic: topic,
                  firstPost: firstPost,
                  replies: replies,
                  replyToPostId: undefined,
                  topicTitle: TopicsShow__Topic.title(topic),
                  savingTopic: false,
                  showTopicEditor: false
                };
        }));
  var send = match[1];
  var state = match[0];
  var tmp;
  if (target !== undefined) {
    var target$1 = target;
    var match$1 = TopicsShow__LinkedTarget.id(target$1);
    tmp = React.createElement("div", {
          className: "max-w-4xl w-full mt-5 lg:x-4 mx-auto"
        }, React.createElement("div", {
              className: "flex py-4 px-4 md:px-5 mx-3 lg:mx-0 bg-white border border-primary-500 shadow-md rounded-lg justify-between items-center"
            }, React.createElement("p", {
                  className: "w-3/5 md:w-4/5 text-sm"
                }, React.createElement("span", {
                      className: "font-semibold block text-xs"
                    }, "Linked Target: "), React.createElement("span", undefined, TopicsShow__LinkedTarget.title(target$1))), match$1 !== undefined ? React.createElement("a", {
                    className: "btn btn-default",
                    href: "/targets/" + match$1
                  }, "View Target") : null));
  } else {
    tmp = null;
  }
  var partial_arg = state.replyToPostId;
  var tmp$1 = {
    id: "add-reply-to-topic",
    topic: topic,
    currentUserId: currentUserId,
    handlePostCB: (function (param) {
        return Curry._1(send, /* SaveReply */Block.__(0, [
                      param,
                      partial_arg
                    ]));
      }),
    replies: state.replies,
    users: users,
    removeReplyToPostCB: (function (param) {
        return Curry._1(send, /* RemoveReplyToPost */2);
      })
  };
  if (state.replyToPostId !== undefined) {
    tmp$1.replyToPostId = Caml_option.valFromOption(state.replyToPostId);
  }
  return React.createElement("div", {
              className: "bg-gray-100"
            }, React.createElement("div", {
                  className: "max-w-4xl w-full mt-5 pl-4 lg:pl-0 lg:mx-auto"
                }, communityLink(community)), React.createElement("div", {
                  className: "flex-col items-center justify-between"
                }, tmp, React.createElement("div", {
                      className: "max-w-4xl w-full mx-auto bg-white p-4 lg:p-8 my-4 border-t border-b md:border-0 lg:rounded-lg lg:shadow"
                    }, React.createElement("div", undefined, state.showTopicEditor ? React.createElement(DisablingCover.make, {
                                disabled: state.savingTopic,
                                children: React.createElement("div", {
                                      className: "flex flex-col lg:ml-14 bg-gray-100 p-2 rounded border border-primary-200"
                                    }, React.createElement("input", {
                                          className: "appearance-none block w-full bg-white text-gray-900 font-semibold border border-gray-400 rounded py-3 px-4 mb-2 leading-tight focus:outline-none focus:bg-white focus:border-gray-500",
                                          type: "text",
                                          value: state.topicTitle,
                                          onChange: (function ($$event) {
                                              return Curry._1(send, /* UpdateTopicTitle */Block.__(7, [$$event.target.value]));
                                            })
                                        }), React.createElement("div", {
                                          className: "flex justify-end"
                                        }, React.createElement("button", {
                                              className: "btn btn-subtle btn-small mr-2",
                                              onClick: (function (param) {
                                                  return Curry._1(send, /* ShowTopicEditor */Block.__(9, [false]));
                                                })
                                            }, "Cancel"), React.createElement("button", {
                                              className: "btn btn-primary btn-small",
                                              disabled: state.topicTitle.trim() === "",
                                              onClick: (function (param) {
                                                  return updateTopic(state, send, param);
                                                })
                                            }, "Update Topic")))
                              }) : React.createElement("div", {
                                className: "topics-show__title-container flex items-start justify-between"
                              }, React.createElement("h3", {
                                    "aria-label": "Topic Title",
                                    className: "leading-snug lg:pl-14 text-base lg:text-2xl w-5/6"
                                  }, TopicsShow__Topic.title(state.topic)), isCoach || currentUserId === TopicsShow__Post.creatorId(firstPost) ? React.createElement("button", {
                                      className: "topics-show__title-edit-button inline-flex items-center font-semibold p-2 md:py-1 bg-gray-100 hover:bg-gray-300 border rounded text-xs flex-shrink-0 mt-2 ml-3 lg:invisible",
                                      onClick: (function (param) {
                                          return Curry._1(send, /* ShowTopicEditor */Block.__(9, [true]));
                                        })
                                    }, React.createElement("i", {
                                          className: "far fa-edit"
                                        }), React.createElement("span", {
                                          className: "hidden md:inline-block ml-1"
                                        }, "Edit Title")) : null), React.createElement(TopicsShow__PostShow.make, {
                              post: state.firstPost,
                              topic: topic,
                              users: users,
                              posts: state.replies,
                              currentUserId: currentUserId,
                              isCoach: isCoach,
                              isTopicCreator: TopicsShow__Post.creatorId(firstPost) === currentUserId,
                              updatePostCB: (function (param) {
                                  return Curry._1(send, /* UpdateFirstPost */Block.__(4, [param]));
                                }),
                              addNewReplyCB: (function (param) {
                                  return Curry._1(send, /* AddNewReply */Block.__(1, [undefined]));
                                }),
                              addPostLikeCB: (function (param) {
                                  return Curry._1(send, /* LikeFirstPost */0);
                                }),
                              removePostLikeCB: (function (param) {
                                  return Curry._1(send, /* RemoveLikeFromFirstPost */1);
                                }),
                              markPostAsSolutionCB: (function (param) {
                                  return /* () */0;
                                }),
                              archivePostCB: (function (param) {
                                  return archiveTopic(community);
                                }),
                              key: TopicsShow__Post.id(state.firstPost)
                            })), React.createElement("h5", {
                          className: "pt-4 pb-2 lg:ml-14 border-b"
                        }, Inflector.pluralize("Reply", state.replies.length, true, /* () */0)), $$Array.map((function (reply) {
                            var partial_arg = TopicsShow__Post.id(reply);
                            return React.createElement("div", {
                                        key: TopicsShow__Post.id(reply),
                                        className: "topics-show__replies-wrapper"
                                      }, React.createElement(TopicsShow__PostShow.make, {
                                            post: reply,
                                            topic: topic,
                                            users: users,
                                            posts: state.replies,
                                            currentUserId: currentUserId,
                                            isCoach: isCoach,
                                            isTopicCreator: TopicsShow__Post.creatorId(firstPost) === currentUserId,
                                            updatePostCB: (function (param) {
                                                return Curry._1(send, /* UpdateReply */Block.__(5, [param]));
                                              }),
                                            addNewReplyCB: (function (param) {
                                                return Curry._1(send, /* AddNewReply */Block.__(1, [partial_arg]));
                                              }),
                                            addPostLikeCB: (function (param) {
                                                return Curry._1(send, /* LikeReply */Block.__(2, [reply]));
                                              }),
                                            removePostLikeCB: (function (param) {
                                                return Curry._1(send, /* RemoveLikeFromReply */Block.__(3, [reply]));
                                              }),
                                            markPostAsSolutionCB: (function (param) {
                                                return Curry._1(send, /* MarkReplyAsSolution */Block.__(11, [TopicsShow__Post.id(reply)]));
                                              }),
                                            archivePostCB: (function (param) {
                                                return Curry._1(send, /* ArchivePost */Block.__(6, [TopicsShow__Post.id(reply)]));
                                              })
                                          }));
                          }), TopicsShow__Post.sort(state.replies))), React.createElement("div", {
                      className: "mt-4 px-4"
                    }, React.createElement(TopicsShow__PostEditor.make, tmp$1))));
}

var make$1 = TopicsShow__Root;

exports.str = str;
exports.reducer = reducer;
exports.addNewReply = addNewReply;
exports.updateReply = updateReply;
exports.updateFirstPost = updateFirstPost;
exports.saveReply = saveReply;
exports.isTopicCreator = isTopicCreator;
exports.archiveTopic = archiveTopic;
exports.UpdateTopicQuery = UpdateTopicQuery;
exports.updateTopic = updateTopic;
exports.communityLink = communityLink;
exports.make = make$1;
/*  Not a pure module */
