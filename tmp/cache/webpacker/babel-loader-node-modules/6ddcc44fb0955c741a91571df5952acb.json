{"ast":null,"code":"'use strict';\n\nvar Caml_int64 = require(\"./caml_int64.js\");\n\nvar Caml_format = require(\"./caml_format.js\");\n\nvar Caml_js_exceptions = require(\"./caml_js_exceptions.js\");\n\nvar Caml_builtin_exceptions = require(\"./caml_builtin_exceptions.js\");\n\nfunction pred(n) {\n  return Caml_int64.sub(n,\n  /* int64 */\n  [\n  /* hi */\n  0,\n  /* lo */\n  1]);\n}\n\nfunction abs(n) {\n  if (Caml_int64.ge(n,\n  /* int64 */\n  [\n  /* hi */\n  0,\n  /* lo */\n  0])) {\n    return n;\n  } else {\n    return Caml_int64.neg(n);\n  }\n}\n\nfunction lognot(n) {\n  return Caml_int64.xor(n,\n  /* int64 */\n  [\n  /* hi */\n  -1,\n  /* lo */\n  4294967295]);\n}\n\nfunction of_string_opt(s) {\n  try {\n    return Caml_format.caml_int64_of_string(s);\n  } catch (raw_exn) {\n    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n\n    if (exn[0] === Caml_builtin_exceptions.failure) {\n      return;\n    } else {\n      throw exn;\n    }\n  }\n}\n\nvar compare = Caml_int64.compare;\n\nfunction equal(x, y) {\n  return Caml_int64.compare(x, y) === 0;\n}\n\nvar zero =\n/* int64 */\n[\n/* hi */\n0,\n/* lo */\n0];\nvar one =\n/* int64 */\n[\n/* hi */\n0,\n/* lo */\n1];\nvar minus_one =\n/* int64 */\n[\n/* hi */\n-1,\n/* lo */\n4294967295];\nvar succ = Caml_int64.succ;\nvar max_int =\n/* int64 */\n[\n/* hi */\n2147483647,\n/* lo */\n4294967295];\nvar min_int =\n/* int64 */\n[\n/* hi */\n-2147483648,\n/* lo */\n0];\nvar to_string = Caml_int64.to_string;\nexports.zero = zero;\nexports.one = one;\nexports.minus_one = minus_one;\nexports.succ = succ;\nexports.pred = pred;\nexports.abs = abs;\nexports.max_int = max_int;\nexports.min_int = min_int;\nexports.lognot = lognot;\nexports.of_string_opt = of_string_opt;\nexports.to_string = to_string;\nexports.compare = compare;\nexports.equal = equal;\n/* No side effect */","map":null,"metadata":{},"sourceType":"module"}