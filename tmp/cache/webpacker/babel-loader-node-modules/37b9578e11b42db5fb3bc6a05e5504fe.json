{"ast":null,"code":"'use strict';\n\nvar Caml_option = require(\"bs-platform/lib/js/caml_option.js\");\n\nvar Webapi__Dom__Node = require(\"./Webapi__Dom__Node.js\");\n\nvar Webapi__Dom__Types = require(\"./Webapi__Dom__Types.js\");\n\nvar Webapi__Dom__Slotable = require(\"./Webapi__Dom__Slotable.js\");\n\nvar Webapi__Dom__ChildNode = require(\"./Webapi__Dom__ChildNode.js\");\n\nvar Webapi__Dom__ParentNode = require(\"./Webapi__Dom__ParentNode.js\");\n\nvar Webapi__Dom__EventTarget = require(\"./Webapi__Dom__EventTarget.js\");\n\nvar Webapi__Dom__GlobalEventHandlers = require(\"./Webapi__Dom__GlobalEventHandlers.js\");\n\nvar Webapi__Dom__NonDocumentTypeChildNode = require(\"./Webapi__Dom__NonDocumentTypeChildNode.js\");\n\nfunction ofNode(node) {\n  if (Webapi__Dom__Node.nodeType(node) ===\n  /* Element */\n  0) {\n    return Caml_option.some(node);\n  }\n}\n\nfunction Impl(T) {\n  var asHtmlElement = function asHtmlElement(element) {\n    // BEWARE: Assumes \"contentEditable\" uniquely identifies an HTMLELement\n    return element.contentEditable !== undefined ? element : null;\n  };\n\n  var asHtmlElement$1 = function asHtmlElement$1(self) {\n    return Caml_option.null_to_opt(asHtmlElement(self));\n  };\n\n  var insertAdjacentElement = function insertAdjacentElement(position, element, self) {\n    self.insertAdjacentElement(Webapi__Dom__Types.encodeInsertPosition(position), element);\n    return (\n      /* () */\n      0\n    );\n  };\n\n  var insertAdjacentHTML = function insertAdjacentHTML(position, text, self) {\n    self.insertAdjacentHTML(Webapi__Dom__Types.encodeInsertPosition(position), text);\n    return (\n      /* () */\n      0\n    );\n  };\n\n  var insertAdjacentText = function insertAdjacentText(position, text, self) {\n    self.insertAdjacentText(Webapi__Dom__Types.encodeInsertPosition(position), text);\n    return (\n      /* () */\n      0\n    );\n  };\n\n  return {\n    asHtmlElement: asHtmlElement$1,\n    ofNode: ofNode,\n    insertAdjacentElement: insertAdjacentElement,\n    insertAdjacentHTML: insertAdjacentHTML,\n    insertAdjacentText: insertAdjacentText\n  };\n}\n\nvar include = Webapi__Dom__Node.Impl({});\nWebapi__Dom__EventTarget.Impl({});\nWebapi__Dom__GlobalEventHandlers.Impl({});\nWebapi__Dom__ParentNode.Impl({});\nWebapi__Dom__NonDocumentTypeChildNode.Impl({});\nWebapi__Dom__ChildNode.Impl({});\nWebapi__Dom__Slotable.Impl({});\n\nvar asHtmlElement = function asHtmlElement(element) {\n  // BEWARE: Assumes \"contentEditable\" uniquely identifies an HTMLELement\n  return element.contentEditable !== undefined ? element : null;\n};\n\nfunction asHtmlElement$1(self) {\n  return Caml_option.null_to_opt(asHtmlElement(self));\n}\n\nfunction insertAdjacentElement(position, element, self) {\n  self.insertAdjacentElement(Webapi__Dom__Types.encodeInsertPosition(position), element);\n  return (\n    /* () */\n    0\n  );\n}\n\nfunction insertAdjacentHTML(position, text, self) {\n  self.insertAdjacentHTML(Webapi__Dom__Types.encodeInsertPosition(position), text);\n  return (\n    /* () */\n    0\n  );\n}\n\nfunction insertAdjacentText(position, text, self) {\n  self.insertAdjacentText(Webapi__Dom__Types.encodeInsertPosition(position), text);\n  return (\n    /* () */\n    0\n  );\n}\n\nvar nodeType = include.nodeType;\nexports.Impl = Impl;\nexports.nodeType = nodeType;\nexports.asHtmlElement = asHtmlElement$1;\nexports.ofNode = ofNode;\nexports.insertAdjacentElement = insertAdjacentElement;\nexports.insertAdjacentHTML = insertAdjacentHTML;\nexports.insertAdjacentText = insertAdjacentText;\n/* include Not a pure module */","map":null,"metadata":{},"sourceType":"module"}