{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar Block = require(\"./block.js\");\n\nvar Caml_primitive = require(\"./caml_primitive.js\");\n\nvar Caml_builtin_exceptions = require(\"./caml_builtin_exceptions.js\");\n\nvar for_in = function for_in(o, foo) {\n  for (var x in o) {\n    foo(x);\n  }\n};\n\nfunction caml_obj_block(tag, size) {\n  var v = new Array(size);\n  v.tag = tag;\n  return v;\n}\n\nfunction caml_obj_dup(x) {\n  if (Array.isArray(x)) {\n    var len = x.length | 0;\n    var v = new Array(len);\n\n    for (var i = 0, i_finish = len - 1 | 0; i <= i_finish; ++i) {\n      v[i] = x[i];\n    }\n\n    v.tag = x.tag | 0;\n    return v;\n  } else {\n    return Object.assign({}, x);\n  }\n}\n\nfunction caml_obj_truncate(x, new_size) {\n  var len = x.length | 0;\n\n  if (new_size <= 0 || new_size > len) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"Obj.truncate\"];\n  }\n\n  if (len !== new_size) {\n    for (var i = new_size, i_finish = len - 1 | 0; i <= i_finish; ++i) {\n      x[i] = 0;\n    }\n\n    x.length = new_size;\n    return (\n      /* () */\n      0\n    );\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_lazy_make_forward(x) {\n  return Block.__(250, [x]);\n}\n\nfunction caml_lazy_make(fn) {\n  var block = [fn];\n  block.tag = 246;\n  return block;\n}\n\nvar caml_update_dummy = function caml_update_dummy(x, y) {\n  for (var k in y) {\n    x[k] = y[k];\n  }\n\n  return 0;\n};\n\nfunction caml_compare(_a, _b) {\n  while (true) {\n    var b = _b;\n    var a = _a;\n\n    if (a === b) {\n      return 0;\n    } else {\n      var a_type = _typeof(a);\n\n      var b_type = _typeof(b);\n\n      switch (a_type) {\n        case \"boolean\":\n          if (b_type === \"boolean\") {\n            return Caml_primitive.caml_bool_compare(a, b);\n          }\n\n          break;\n\n        case \"function\":\n          if (b_type === \"function\") {\n            throw [Caml_builtin_exceptions.invalid_argument, \"compare: functional value\"];\n          }\n\n          break;\n\n        case \"number\":\n          if (b_type === \"number\") {\n            return Caml_primitive.caml_int_compare(a, b);\n          }\n\n          break;\n\n        case \"string\":\n          if (b_type === \"string\") {\n            return Caml_primitive.caml_string_compare(a, b);\n          } else {\n            return 1;\n          }\n\n        case \"undefined\":\n          return -1;\n\n        default:\n      }\n\n      switch (b_type) {\n        case \"string\":\n          return -1;\n\n        case \"undefined\":\n          return 1;\n\n        default:\n          if (a_type === \"boolean\") {\n            return 1;\n          } else if (b_type === \"boolean\") {\n            return -1;\n          } else if (a_type === \"function\") {\n            return 1;\n          } else if (b_type === \"function\") {\n            return -1;\n          } else if (a_type === \"number\") {\n            if (b === null || b.tag === 256) {\n              return 1;\n            } else {\n              return -1;\n            }\n          } else if (b_type === \"number\") {\n            if (a === null || a.tag === 256) {\n              return -1;\n            } else {\n              return 1;\n            }\n          } else if (a === null) {\n            if (b.tag === 256) {\n              return 1;\n            } else {\n              return -1;\n            }\n          } else if (b === null) {\n            if (a.tag === 256) {\n              return -1;\n            } else {\n              return 1;\n            }\n          } else {\n            var tag_a = a.tag | 0;\n            var tag_b = b.tag | 0;\n\n            if (tag_a === 250) {\n              _a = a[0];\n              continue;\n            } else if (tag_b === 250) {\n              _b = b[0];\n              continue;\n            } else if (tag_a === 256) {\n              if (tag_b === 256) {\n                return Caml_primitive.caml_int_compare(a[1], b[1]);\n              } else {\n                return -1;\n              }\n            } else if (tag_a === 248) {\n              return Caml_primitive.caml_int_compare(a[1], b[1]);\n            } else {\n              if (tag_a === 251) {\n                throw [Caml_builtin_exceptions.invalid_argument, \"equal: abstract value\"];\n              }\n\n              if (tag_a !== tag_b) {\n                if (tag_a < tag_b) {\n                  return -1;\n                } else {\n                  return 1;\n                }\n              } else {\n                var len_a = a.length | 0;\n                var len_b = b.length | 0;\n\n                if (len_a === len_b) {\n                  if (Array.isArray(a)) {\n                    var a$1 = a;\n                    var b$1 = b;\n                    var _i = 0;\n                    var same_length = len_a;\n\n                    while (true) {\n                      var i = _i;\n\n                      if (i === same_length) {\n                        return 0;\n                      } else {\n                        var res = caml_compare(a$1[i], b$1[i]);\n\n                        if (res !== 0) {\n                          return res;\n                        } else {\n                          _i = i + 1 | 0;\n                          continue;\n                        }\n                      }\n                    }\n\n                    ;\n                  } else if (a instanceof Date && b instanceof Date) {\n                    return a - b;\n                  } else {\n                    var a$2 = a;\n                    var b$2 = b;\n                    var min_key_lhs = {\n                      contents: undefined\n                    };\n                    var min_key_rhs = {\n                      contents: undefined\n                    };\n\n                    var do_key = function do_key(param, key) {\n                      var min_key = param[2];\n                      var b = param[1];\n\n                      if (!b.hasOwnProperty(key) || caml_compare(param[0][key], b[key]) > 0) {\n                        var match = min_key.contents;\n\n                        if (match !== undefined && key >= match) {\n                          return 0;\n                        } else {\n                          min_key.contents = key;\n                          return (\n                            /* () */\n                            0\n                          );\n                        }\n                      } else {\n                        return 0;\n                      }\n                    };\n\n                    var partial_arg =\n                    /* tuple */\n                    [a$2, b$2, min_key_rhs];\n\n                    var do_key_a = function (partial_arg) {\n                      return function do_key_a(param) {\n                        return do_key(partial_arg, param);\n                      };\n                    }(partial_arg);\n\n                    var partial_arg$1 =\n                    /* tuple */\n                    [b$2, a$2, min_key_lhs];\n\n                    var do_key_b = function (partial_arg$1) {\n                      return function do_key_b(param) {\n                        return do_key(partial_arg$1, param);\n                      };\n                    }(partial_arg$1);\n\n                    for_in(a$2, do_key_a);\n                    for_in(b$2, do_key_b);\n                    var match = min_key_lhs.contents;\n                    var match$1 = min_key_rhs.contents;\n\n                    if (match !== undefined) {\n                      if (match$1 !== undefined) {\n                        return Caml_primitive.caml_string_compare(match, match$1);\n                      } else {\n                        return -1;\n                      }\n                    } else if (match$1 !== undefined) {\n                      return 1;\n                    } else {\n                      return 0;\n                    }\n                  }\n                } else if (len_a < len_b) {\n                  var a$3 = a;\n                  var b$3 = b;\n                  var _i$1 = 0;\n                  var short_length = len_a;\n\n                  while (true) {\n                    var i$1 = _i$1;\n\n                    if (i$1 === short_length) {\n                      return -1;\n                    } else {\n                      var res$1 = caml_compare(a$3[i$1], b$3[i$1]);\n\n                      if (res$1 !== 0) {\n                        return res$1;\n                      } else {\n                        _i$1 = i$1 + 1 | 0;\n                        continue;\n                      }\n                    }\n                  }\n\n                  ;\n                } else {\n                  var a$4 = a;\n                  var b$4 = b;\n                  var _i$2 = 0;\n                  var short_length$1 = len_b;\n\n                  while (true) {\n                    var i$2 = _i$2;\n\n                    if (i$2 === short_length$1) {\n                      return 1;\n                    } else {\n                      var res$2 = caml_compare(a$4[i$2], b$4[i$2]);\n\n                      if (res$2 !== 0) {\n                        return res$2;\n                      } else {\n                        _i$2 = i$2 + 1 | 0;\n                        continue;\n                      }\n                    }\n                  }\n\n                  ;\n                }\n              }\n            }\n          }\n\n      }\n    }\n  }\n\n  ;\n}\n\nfunction caml_equal(_a, _b) {\n  while (true) {\n    var b = _b;\n    var a = _a;\n\n    if (a === b) {\n      return true;\n    } else {\n      var a_type = _typeof(a);\n\n      if (a_type === \"string\" || a_type === \"number\" || a_type === \"boolean\" || a_type === \"undefined\" || a === null) {\n        return false;\n      } else {\n        var b_type = _typeof(b);\n\n        if (a_type === \"function\" || b_type === \"function\") {\n          throw [Caml_builtin_exceptions.invalid_argument, \"equal: functional value\"];\n        }\n\n        if (b_type === \"number\" || b_type === \"undefined\" || b === null) {\n          return false;\n        } else {\n          var tag_a = a.tag | 0;\n          var tag_b = b.tag | 0;\n\n          if (tag_a === 250) {\n            _a = a[0];\n            continue;\n          } else if (tag_b === 250) {\n            _b = b[0];\n            continue;\n          } else if (tag_a === 248) {\n            return a[1] === b[1];\n          } else {\n            if (tag_a === 251) {\n              throw [Caml_builtin_exceptions.invalid_argument, \"equal: abstract value\"];\n            }\n\n            if (tag_a !== tag_b) {\n              return false;\n            } else if (tag_a === 256) {\n              return a[1] === b[1];\n            } else {\n              var len_a = a.length | 0;\n              var len_b = b.length | 0;\n\n              if (len_a === len_b) {\n                if (Array.isArray(a)) {\n                  var a$1 = a;\n                  var b$1 = b;\n                  var _i = 0;\n                  var same_length = len_a;\n\n                  while (true) {\n                    var i = _i;\n\n                    if (i === same_length) {\n                      return true;\n                    } else if (caml_equal(a$1[i], b$1[i])) {\n                      _i = i + 1 | 0;\n                      continue;\n                    } else {\n                      return false;\n                    }\n                  }\n\n                  ;\n                } else if (a instanceof Date && b instanceof Date) {\n                  return !(a > b || a < b);\n                } else {\n                  var a$2 = a;\n                  var b$2 = b;\n                  var result = {\n                    contents: true\n                  };\n\n                  var do_key_a = function (b$2, result) {\n                    return function do_key_a(key) {\n                      if (b$2.hasOwnProperty(key)) {\n                        return 0;\n                      } else {\n                        result.contents = false;\n                        return (\n                          /* () */\n                          0\n                        );\n                      }\n                    };\n                  }(b$2, result);\n\n                  var do_key_b = function (a$2, b$2, result) {\n                    return function do_key_b(key) {\n                      if (!a$2.hasOwnProperty(key) || !caml_equal(b$2[key], a$2[key])) {\n                        result.contents = false;\n                        return (\n                          /* () */\n                          0\n                        );\n                      } else {\n                        return 0;\n                      }\n                    };\n                  }(a$2, b$2, result);\n\n                  for_in(a$2, do_key_a);\n\n                  if (result.contents) {\n                    for_in(b$2, do_key_b);\n                  }\n\n                  return result.contents;\n                }\n              } else {\n                return false;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ;\n}\n\nfunction caml_equal_null(x, y) {\n  if (y !== null) {\n    return caml_equal(x, y);\n  } else {\n    return x === y;\n  }\n}\n\nfunction caml_equal_undefined(x, y) {\n  if (y !== undefined) {\n    return caml_equal(x, y);\n  } else {\n    return x === y;\n  }\n}\n\nfunction caml_equal_nullable(x, y) {\n  if (y == null) {\n    return x === y;\n  } else {\n    return caml_equal(x, y);\n  }\n}\n\nfunction caml_notequal(a, b) {\n  return !caml_equal(a, b);\n}\n\nfunction caml_greaterequal(a, b) {\n  return caml_compare(a, b) >= 0;\n}\n\nfunction caml_greaterthan(a, b) {\n  return caml_compare(a, b) > 0;\n}\n\nfunction caml_lessequal(a, b) {\n  return caml_compare(a, b) <= 0;\n}\n\nfunction caml_lessthan(a, b) {\n  return caml_compare(a, b) < 0;\n}\n\nfunction caml_min(x, y) {\n  if (caml_compare(x, y) <= 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_max(x, y) {\n  if (caml_compare(x, y) >= 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_obj_set_tag(prim, prim$1) {\n  prim.tag = prim$1;\n  return (\n    /* () */\n    0\n  );\n}\n\nexports.caml_obj_block = caml_obj_block;\nexports.caml_obj_dup = caml_obj_dup;\nexports.caml_obj_truncate = caml_obj_truncate;\nexports.caml_lazy_make_forward = caml_lazy_make_forward;\nexports.caml_lazy_make = caml_lazy_make;\nexports.caml_update_dummy = caml_update_dummy;\nexports.caml_compare = caml_compare;\nexports.caml_equal = caml_equal;\nexports.caml_equal_null = caml_equal_null;\nexports.caml_equal_undefined = caml_equal_undefined;\nexports.caml_equal_nullable = caml_equal_nullable;\nexports.caml_notequal = caml_notequal;\nexports.caml_greaterequal = caml_greaterequal;\nexports.caml_greaterthan = caml_greaterthan;\nexports.caml_lessthan = caml_lessthan;\nexports.caml_lessequal = caml_lessequal;\nexports.caml_min = caml_min;\nexports.caml_max = caml_max;\nexports.caml_obj_set_tag = caml_obj_set_tag;\n/* No side effect */","map":null,"metadata":{},"sourceType":"module"}