{"ast":null,"code":"(function () {\n  if ((typeof self === 'undefined' || !self.Prism) && (typeof global === 'undefined' || !global.Prism)) {\n    return;\n  }\n  /**\n   * @callback ClassMapper\n   * @param {string} className\n   * @param {string} language\n   * @returns {string}\n   *\n   * @callback ClassAdder\n   * @param {ClassAdderEnvironment} env\n   * @returns {undefined | string | string[]}\n   *\n   * @typedef ClassAdderEnvironment\n   * @property {string} language\n   * @property {string} type\n   * @property {string} content\n   */\n  // options\n\n  /** @type {ClassAdder | undefined} */\n\n\n  var adder;\n  /** @type {ClassMapper | undefined} */\n\n  var mapper;\n  /** @type {string} */\n\n  var prefixString = '';\n  Prism.plugins.customClass = {\n    /**\n     * Sets the function which can be used to add custom aliases to any token.\n     *\n     * @param {ClassAdder} classAdder\n     */\n    add: function add(classAdder) {\n      adder = classAdder;\n    },\n\n    /**\n     * Maps all class names using the given object or map function.\n     *\n     * This does not affect the prefix.\n     *\n     * @param {Object<string, string> | ClassMapper} classMapper\n     */\n    map: function map(classMapper) {\n      if (typeof classMapper === 'function') {\n        mapper = classMapper;\n      } else {\n        mapper = function mapper(className) {\n          return classMapper[className] || className;\n        };\n      }\n    },\n\n    /**\n     * Adds the given prefix to all class names.\n     *\n     * @param {string} string\n     */\n    prefix: function prefix(string) {\n      prefixString = string || '';\n    }\n  };\n  Prism.hooks.add('wrap', function (env) {\n    if (adder) {\n      var result = adder({\n        content: env.content,\n        type: env.type,\n        language: env.language\n      });\n\n      if (Array.isArray(result)) {\n        env.classes.push.apply(env.classes, result);\n      } else if (result) {\n        env.classes.push(result);\n      }\n    }\n\n    if (!mapper && !prefixString) {\n      return;\n    }\n\n    env.classes = env.classes.map(function (c) {\n      return prefixString + (mapper ? mapper(c, env.language) : c);\n    });\n  });\n})();","map":null,"metadata":{},"sourceType":"module"}