{"ast":null,"code":"'use strict';\n\nvar Caml_format = require(\"./caml_format.js\");\n\nvar Caml_primitive = require(\"./caml_primitive.js\");\n\nvar Caml_js_exceptions = require(\"./caml_js_exceptions.js\");\n\nvar Caml_builtin_exceptions = require(\"./caml_builtin_exceptions.js\");\n\nfunction succ(n) {\n  return n + 1 | 0;\n}\n\nfunction pred(n) {\n  return n - 1 | 0;\n}\n\nfunction abs(n) {\n  if (n >= 0) {\n    return n;\n  } else {\n    return -n | 0;\n  }\n}\n\nfunction lognot(n) {\n  return n ^ -1;\n}\n\nfunction to_string(n) {\n  return Caml_format.caml_int32_format(\"%d\", n);\n}\n\nfunction of_string_opt(s) {\n  try {\n    return Caml_format.caml_int32_of_string(s);\n  } catch (raw_exn) {\n    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n\n    if (exn[0] === Caml_builtin_exceptions.failure) {\n      return;\n    } else {\n      throw exn;\n    }\n  }\n}\n\nvar compare = Caml_primitive.caml_int32_compare;\n\nfunction equal(x, y) {\n  return x === y;\n}\n\nvar zero = 0;\nvar one = 1;\nvar minus_one = -1;\nvar max_int = 2147483647;\nvar min_int = -2147483648;\nexports.zero = zero;\nexports.one = one;\nexports.minus_one = minus_one;\nexports.succ = succ;\nexports.pred = pred;\nexports.abs = abs;\nexports.max_int = max_int;\nexports.min_int = min_int;\nexports.lognot = lognot;\nexports.of_string_opt = of_string_opt;\nexports.to_string = to_string;\nexports.compare = compare;\nexports.equal = equal;\n/* No side effect */","map":null,"metadata":{},"sourceType":"module"}