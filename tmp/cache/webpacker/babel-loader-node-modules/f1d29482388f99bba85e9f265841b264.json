{"ast":null,"code":"'use strict';\n\nvar Char = require(\"./char.js\");\n\nvar $$String = require(\"./string.js\");\n\nvar Caml_md5 = require(\"./caml_md5.js\");\n\nvar Caml_bytes = require(\"./caml_bytes.js\");\n\nvar Pervasives = require(\"./pervasives.js\");\n\nvar Caml_string = require(\"./caml_string.js\");\n\nvar Caml_external_polyfill = require(\"./caml_external_polyfill.js\");\n\nvar Caml_builtin_exceptions = require(\"./caml_builtin_exceptions.js\");\n\nfunction string(str) {\n  return Caml_md5.caml_md5_string(str, 0, str.length);\n}\n\nfunction bytes(b) {\n  return string(Caml_bytes.bytes_to_string(b));\n}\n\nfunction substring(str, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (str.length - len | 0)) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"Digest.substring\"];\n  }\n\n  return Caml_md5.caml_md5_string(str, ofs, len);\n}\n\nfunction subbytes(b, ofs, len) {\n  return substring(Caml_bytes.bytes_to_string(b), ofs, len);\n}\n\nfunction file(filename) {\n  var ic = Pervasives.open_in_bin(filename);\n  var d;\n\n  try {\n    d = Caml_external_polyfill.resolve(\"caml_md5_chan\")(ic, -1);\n  } catch (e) {\n    Caml_external_polyfill.resolve(\"caml_ml_close_channel\")(ic);\n    throw e;\n  }\n\n  Caml_external_polyfill.resolve(\"caml_ml_close_channel\")(ic);\n  return d;\n}\n\nvar output = Pervasives.output_string;\n\nfunction input(chan) {\n  return Pervasives.really_input_string(chan, 16);\n}\n\nfunction char_hex(n) {\n  return n + (n < 10 ?\n  /* \"0\" */\n  48 : 87) | 0;\n}\n\nfunction to_hex(d) {\n  if (d.length !== 16) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"Digest.to_hex\"];\n  }\n\n  var result = Caml_bytes.caml_create_bytes(32);\n\n  for (var i = 0; i <= 15; ++i) {\n    var x = Caml_string.get(d, i);\n    result[i << 1] = char_hex(x >>> 4);\n    result[(i << 1) + 1 | 0] = char_hex(x & 15);\n  }\n\n  return Caml_bytes.bytes_to_string(result);\n}\n\nfunction from_hex(s) {\n  if (s.length !== 32) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"Digest.from_hex\"];\n  }\n\n  var digit = function digit(c) {\n    if (c >= 65) {\n      if (c >= 97) {\n        if (c >= 103) {\n          throw [Caml_builtin_exceptions.invalid_argument, \"Digest.from_hex\"];\n        }\n\n        return (c -\n        /* \"a\" */\n        97 | 0) + 10 | 0;\n      } else {\n        if (c >= 71) {\n          throw [Caml_builtin_exceptions.invalid_argument, \"Digest.from_hex\"];\n        }\n\n        return (c -\n        /* \"A\" */\n        65 | 0) + 10 | 0;\n      }\n    } else {\n      if (c > 57 || c < 48) {\n        throw [Caml_builtin_exceptions.invalid_argument, \"Digest.from_hex\"];\n      }\n\n      return c -\n      /* \"0\" */\n      48 | 0;\n    }\n  };\n\n  var $$byte = function $$byte(i) {\n    return (digit(Caml_string.get(s, i)) << 4) + digit(Caml_string.get(s, i + 1 | 0)) | 0;\n  };\n\n  var result = Caml_bytes.caml_create_bytes(16);\n\n  for (var i = 0; i <= 15; ++i) {\n    result[i] = Char.chr($$byte(i << 1));\n  }\n\n  return Caml_bytes.bytes_to_string(result);\n}\n\nvar compare = $$String.compare;\nvar equal = $$String.equal;\nexports.compare = compare;\nexports.equal = equal;\nexports.string = string;\nexports.bytes = bytes;\nexports.substring = substring;\nexports.subbytes = subbytes;\nexports.file = file;\nexports.output = output;\nexports.input = input;\nexports.to_hex = to_hex;\nexports.from_hex = from_hex;\n/* No side effect */","map":null,"metadata":{},"sourceType":"module"}