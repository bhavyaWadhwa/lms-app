{"ast":null,"code":"'use strict';\n\nvar Curry = require(\"./curry.js\");\n\nvar Belt_Array = require(\"./belt_Array.js\");\n\nvar Caml_option = require(\"./caml_option.js\");\n\nvar Belt_SortArray = require(\"./belt_SortArray.js\");\n\nfunction head(x) {\n  if (x) {\n    return Caml_option.some(x[0]);\n  }\n}\n\nfunction headExn(x) {\n  if (x) {\n    return x[0];\n  } else {\n    throw new Error(\"headExn\");\n  }\n}\n\nfunction tail(x) {\n  if (x) {\n    return x[1];\n  }\n}\n\nfunction tailExn(x) {\n  if (x) {\n    return x[1];\n  } else {\n    throw new Error(\"tailExn\");\n  }\n}\n\nfunction add(xs, x) {\n  return (\n    /* :: */\n    [x, xs]\n  );\n}\n\nfunction get(x, n) {\n  if (n < 0) {\n    return;\n  } else {\n    var _x = x;\n    var _n = n;\n\n    while (true) {\n      var n$1 = _n;\n      var x$1 = _x;\n\n      if (x$1) {\n        if (n$1 === 0) {\n          return Caml_option.some(x$1[0]);\n        } else {\n          _n = n$1 - 1 | 0;\n          _x = x$1[1];\n          continue;\n        }\n      } else {\n        return;\n      }\n    }\n\n    ;\n  }\n}\n\nfunction getExn(x, n) {\n  if (n < 0) {\n    throw new Error(\"getExn\");\n  }\n\n  var _x = x;\n  var _n = n;\n\n  while (true) {\n    var n$1 = _n;\n    var x$1 = _x;\n\n    if (x$1) {\n      if (n$1 === 0) {\n        return x$1[0];\n      } else {\n        _n = n$1 - 1 | 0;\n        _x = x$1[1];\n        continue;\n      }\n    } else {\n      throw new Error(\"getExn\");\n    }\n  }\n\n  ;\n}\n\nfunction partitionAux(p, _cell, _precX, _precY) {\n  while (true) {\n    var precY = _precY;\n    var precX = _precX;\n    var cell = _cell;\n\n    if (cell) {\n      var t = cell[1];\n      var h = cell[0];\n      var next =\n      /* :: */\n      [h,\n      /* [] */\n      0];\n\n      if (p(h)) {\n        precX[1] = next;\n        _precX = next;\n        _cell = t;\n        continue;\n      } else {\n        precY[1] = next;\n        _precY = next;\n        _cell = t;\n        continue;\n      }\n    } else {\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction splitAux(_cell, _precX, _precY) {\n  while (true) {\n    var precY = _precY;\n    var precX = _precX;\n    var cell = _cell;\n\n    if (cell) {\n      var match = cell[0];\n      var nextA =\n      /* :: */\n      [match[0],\n      /* [] */\n      0];\n      var nextB =\n      /* :: */\n      [match[1],\n      /* [] */\n      0];\n      precX[1] = nextA;\n      precY[1] = nextB;\n      _precY = nextB;\n      _precX = nextA;\n      _cell = cell[1];\n      continue;\n    } else {\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction copyAuxCont(_cellX, _prec) {\n  while (true) {\n    var prec = _prec;\n    var cellX = _cellX;\n\n    if (cellX) {\n      var next =\n      /* :: */\n      [cellX[0],\n      /* [] */\n      0];\n      prec[1] = next;\n      _prec = next;\n      _cellX = cellX[1];\n      continue;\n    } else {\n      return prec;\n    }\n  }\n\n  ;\n}\n\nfunction copyAuxWitFilter(f, _cellX, _prec) {\n  while (true) {\n    var prec = _prec;\n    var cellX = _cellX;\n\n    if (cellX) {\n      var t = cellX[1];\n      var h = cellX[0];\n\n      if (f(h)) {\n        var next =\n        /* :: */\n        [h,\n        /* [] */\n        0];\n        prec[1] = next;\n        _prec = next;\n        _cellX = t;\n        continue;\n      } else {\n        _cellX = t;\n        continue;\n      }\n    } else {\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction copyAuxWithFilterIndex(f, _cellX, _prec, _i) {\n  while (true) {\n    var i = _i;\n    var prec = _prec;\n    var cellX = _cellX;\n\n    if (cellX) {\n      var t = cellX[1];\n      var h = cellX[0];\n\n      if (f(h, i)) {\n        var next =\n        /* :: */\n        [h,\n        /* [] */\n        0];\n        prec[1] = next;\n        _i = i + 1 | 0;\n        _prec = next;\n        _cellX = t;\n        continue;\n      } else {\n        _i = i + 1 | 0;\n        _cellX = t;\n        continue;\n      }\n    } else {\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction copyAuxWitFilterMap(f, _cellX, _prec) {\n  while (true) {\n    var prec = _prec;\n    var cellX = _cellX;\n\n    if (cellX) {\n      var t = cellX[1];\n      var match = f(cellX[0]);\n\n      if (match !== undefined) {\n        var next =\n        /* :: */\n        [Caml_option.valFromOption(match),\n        /* [] */\n        0];\n        prec[1] = next;\n        _prec = next;\n        _cellX = t;\n        continue;\n      } else {\n        _cellX = t;\n        continue;\n      }\n    } else {\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction removeAssocAuxWithMap(_cellX, x, _prec, f) {\n  while (true) {\n    var prec = _prec;\n    var cellX = _cellX;\n\n    if (cellX) {\n      var t = cellX[1];\n      var h = cellX[0];\n\n      if (f(h[0], x)) {\n        prec[1] = t;\n        return true;\n      } else {\n        var next =\n        /* :: */\n        [h,\n        /* [] */\n        0];\n        prec[1] = next;\n        _prec = next;\n        _cellX = t;\n        continue;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  ;\n}\n\nfunction setAssocAuxWithMap(_cellX, x, k, _prec, eq) {\n  while (true) {\n    var prec = _prec;\n    var cellX = _cellX;\n\n    if (cellX) {\n      var t = cellX[1];\n      var h = cellX[0];\n\n      if (eq(h[0], x)) {\n        prec[1] =\n        /* :: */\n        [\n        /* tuple */\n        [x, k], t];\n        return true;\n      } else {\n        var next =\n        /* :: */\n        [h,\n        /* [] */\n        0];\n        prec[1] = next;\n        _prec = next;\n        _cellX = t;\n        continue;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  ;\n}\n\nfunction copyAuxWithMap(_cellX, _prec, f) {\n  while (true) {\n    var prec = _prec;\n    var cellX = _cellX;\n\n    if (cellX) {\n      var next =\n      /* :: */\n      [f(cellX[0]),\n      /* [] */\n      0];\n      prec[1] = next;\n      _prec = next;\n      _cellX = cellX[1];\n      continue;\n    } else {\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction zipAux(_cellX, _cellY, _prec) {\n  while (true) {\n    var prec = _prec;\n    var cellY = _cellY;\n    var cellX = _cellX;\n\n    if (cellX && cellY) {\n      var next =\n      /* :: */\n      [\n      /* tuple */\n      [cellX[0], cellY[0]],\n      /* [] */\n      0];\n      prec[1] = next;\n      _prec = next;\n      _cellY = cellY[1];\n      _cellX = cellX[1];\n      continue;\n    } else {\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction copyAuxWithMap2(f, _cellX, _cellY, _prec) {\n  while (true) {\n    var prec = _prec;\n    var cellY = _cellY;\n    var cellX = _cellX;\n\n    if (cellX && cellY) {\n      var next =\n      /* :: */\n      [f(cellX[0], cellY[0]),\n      /* [] */\n      0];\n      prec[1] = next;\n      _prec = next;\n      _cellY = cellY[1];\n      _cellX = cellX[1];\n      continue;\n    } else {\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction copyAuxWithMapI(f, _i, _cellX, _prec) {\n  while (true) {\n    var prec = _prec;\n    var cellX = _cellX;\n    var i = _i;\n\n    if (cellX) {\n      var next =\n      /* :: */\n      [f(i, cellX[0]),\n      /* [] */\n      0];\n      prec[1] = next;\n      _prec = next;\n      _cellX = cellX[1];\n      _i = i + 1 | 0;\n      continue;\n    } else {\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction takeAux(_n, _cell, _prec) {\n  while (true) {\n    var prec = _prec;\n    var cell = _cell;\n    var n = _n;\n\n    if (n === 0) {\n      return true;\n    } else if (cell) {\n      var cell$1 =\n      /* :: */\n      [cell[0],\n      /* [] */\n      0];\n      prec[1] = cell$1;\n      _prec = cell$1;\n      _cell = cell[1];\n      _n = n - 1 | 0;\n      continue;\n    } else {\n      return false;\n    }\n  }\n\n  ;\n}\n\nfunction splitAtAux(_n, _cell, _prec) {\n  while (true) {\n    var prec = _prec;\n    var cell = _cell;\n    var n = _n;\n\n    if (n === 0) {\n      return cell;\n    } else if (cell) {\n      var cell$1 =\n      /* :: */\n      [cell[0],\n      /* [] */\n      0];\n      prec[1] = cell$1;\n      _prec = cell$1;\n      _cell = cell[1];\n      _n = n - 1 | 0;\n      continue;\n    } else {\n      return;\n    }\n  }\n\n  ;\n}\n\nfunction take(lst, n) {\n  if (n < 0) {\n    return;\n  } else if (n === 0) {\n    return (\n      /* [] */\n      0\n    );\n  } else if (lst) {\n    var cell =\n    /* :: */\n    [lst[0],\n    /* [] */\n    0];\n    var has = takeAux(n - 1 | 0, lst[1], cell);\n\n    if (has) {\n      return cell;\n    } else {\n      return;\n    }\n  } else {\n    return;\n  }\n}\n\nfunction drop(lst, n) {\n  if (n < 0) {\n    return;\n  } else {\n    var _l = lst;\n    var _n = n;\n\n    while (true) {\n      var n$1 = _n;\n      var l = _l;\n\n      if (n$1 === 0) {\n        return l;\n      } else if (l) {\n        _n = n$1 - 1 | 0;\n        _l = l[1];\n        continue;\n      } else {\n        return;\n      }\n    }\n\n    ;\n  }\n}\n\nfunction splitAt(lst, n) {\n  if (n < 0) {\n    return;\n  } else if (n === 0) {\n    return (\n      /* tuple */\n      [\n      /* [] */\n      0, lst]\n    );\n  } else if (lst) {\n    var cell =\n    /* :: */\n    [lst[0],\n    /* [] */\n    0];\n    var rest = splitAtAux(n - 1 | 0, lst[1], cell);\n\n    if (rest !== undefined) {\n      return (\n        /* tuple */\n        [cell, rest]\n      );\n    } else {\n      return;\n    }\n  } else {\n    return;\n  }\n}\n\nfunction concat(xs, ys) {\n  if (xs) {\n    var cell =\n    /* :: */\n    [xs[0],\n    /* [] */\n    0];\n    copyAuxCont(xs[1], cell)[1] = ys;\n    return cell;\n  } else {\n    return ys;\n  }\n}\n\nfunction mapU(xs, f) {\n  if (xs) {\n    var cell =\n    /* :: */\n    [f(xs[0]),\n    /* [] */\n    0];\n    copyAuxWithMap(xs[1], cell, f);\n    return cell;\n  } else {\n    return (\n      /* [] */\n      0\n    );\n  }\n}\n\nfunction map(xs, f) {\n  return mapU(xs, Curry.__1(f));\n}\n\nfunction zipByU(l1, l2, f) {\n  if (l1 && l2) {\n    var cell =\n    /* :: */\n    [f(l1[0], l2[0]),\n    /* [] */\n    0];\n    copyAuxWithMap2(f, l1[1], l2[1], cell);\n    return cell;\n  } else {\n    return (\n      /* [] */\n      0\n    );\n  }\n}\n\nfunction zipBy(l1, l2, f) {\n  return zipByU(l1, l2, Curry.__2(f));\n}\n\nfunction mapWithIndexU(xs, f) {\n  if (xs) {\n    var cell =\n    /* :: */\n    [f(0, xs[0]),\n    /* [] */\n    0];\n    copyAuxWithMapI(f, 1, xs[1], cell);\n    return cell;\n  } else {\n    return (\n      /* [] */\n      0\n    );\n  }\n}\n\nfunction mapWithIndex(xs, f) {\n  return mapWithIndexU(xs, Curry.__2(f));\n}\n\nfunction makeByU(n, f) {\n  if (n <= 0) {\n    return (\n      /* [] */\n      0\n    );\n  } else {\n    var headX =\n    /* :: */\n    [f(0),\n    /* [] */\n    0];\n    var cur = headX;\n    var i = 1;\n\n    while (i < n) {\n      var v =\n      /* :: */\n      [f(i),\n      /* [] */\n      0];\n      cur[1] = v;\n      cur = v;\n      i = i + 1 | 0;\n    }\n\n    ;\n    return headX;\n  }\n}\n\nfunction makeBy(n, f) {\n  return makeByU(n, Curry.__1(f));\n}\n\nfunction make(n, v) {\n  if (n <= 0) {\n    return (\n      /* [] */\n      0\n    );\n  } else {\n    var headX =\n    /* :: */\n    [v,\n    /* [] */\n    0];\n    var cur = headX;\n    var i = 1;\n\n    while (i < n) {\n      var v$1 =\n      /* :: */\n      [v,\n      /* [] */\n      0];\n      cur[1] = v$1;\n      cur = v$1;\n      i = i + 1 | 0;\n    }\n\n    ;\n    return headX;\n  }\n}\n\nfunction length(xs) {\n  var _x = xs;\n  var _acc = 0;\n\n  while (true) {\n    var acc = _acc;\n    var x = _x;\n\n    if (x) {\n      _acc = acc + 1 | 0;\n      _x = x[1];\n      continue;\n    } else {\n      return acc;\n    }\n  }\n\n  ;\n}\n\nfunction fillAux(arr, _i, _x) {\n  while (true) {\n    var x = _x;\n    var i = _i;\n\n    if (x) {\n      arr[i] = x[0];\n      _x = x[1];\n      _i = i + 1 | 0;\n      continue;\n    } else {\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction fromArray(a) {\n  var a$1 = a;\n\n  var _i = a.length - 1 | 0;\n\n  var _res =\n  /* [] */\n  0;\n\n  while (true) {\n    var res = _res;\n    var i = _i;\n\n    if (i < 0) {\n      return res;\n    } else {\n      _res =\n      /* :: */\n      [a$1[i], res];\n      _i = i - 1 | 0;\n      continue;\n    }\n  }\n\n  ;\n}\n\nfunction toArray(x) {\n  var len = length(x);\n  var arr = new Array(len);\n  fillAux(arr, 0, x);\n  return arr;\n}\n\nfunction shuffle(xs) {\n  var v = toArray(xs);\n  Belt_Array.shuffleInPlace(v);\n  return fromArray(v);\n}\n\nfunction reverseConcat(_l1, _l2) {\n  while (true) {\n    var l2 = _l2;\n    var l1 = _l1;\n\n    if (l1) {\n      _l2 =\n      /* :: */\n      [l1[0], l2];\n      _l1 = l1[1];\n      continue;\n    } else {\n      return l2;\n    }\n  }\n\n  ;\n}\n\nfunction reverse(l) {\n  return reverseConcat(l,\n  /* [] */\n  0);\n}\n\nfunction flattenAux(_prec, _xs) {\n  while (true) {\n    var xs = _xs;\n    var prec = _prec;\n\n    if (xs) {\n      _xs = xs[1];\n      _prec = copyAuxCont(xs[0], prec);\n      continue;\n    } else {\n      prec[1] =\n      /* [] */\n      0;\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction flatten(_xs) {\n  while (true) {\n    var xs = _xs;\n\n    if (xs) {\n      var match = xs[0];\n\n      if (match) {\n        var cell =\n        /* :: */\n        [match[0],\n        /* [] */\n        0];\n        flattenAux(copyAuxCont(match[1], cell), xs[1]);\n        return cell;\n      } else {\n        _xs = xs[1];\n        continue;\n      }\n    } else {\n      return (\n        /* [] */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction concatMany(xs) {\n  var len = xs.length;\n\n  if (len !== 1) {\n    if (len !== 0) {\n      var len$1 = xs.length;\n      var v = xs[len$1 - 1 | 0];\n\n      for (var i = len$1 - 2 | 0; i >= 0; --i) {\n        v = concat(xs[i], v);\n      }\n\n      return v;\n    } else {\n      return (\n        /* [] */\n        0\n      );\n    }\n  } else {\n    return xs[0];\n  }\n}\n\nfunction mapReverseU(l, f) {\n  var f$1 = f;\n  var _accu =\n  /* [] */\n  0;\n  var _xs = l;\n\n  while (true) {\n    var xs = _xs;\n    var accu = _accu;\n\n    if (xs) {\n      _xs = xs[1];\n      _accu =\n      /* :: */\n      [f$1(xs[0]), accu];\n      continue;\n    } else {\n      return accu;\n    }\n  }\n\n  ;\n}\n\nfunction mapReverse(l, f) {\n  return mapReverseU(l, Curry.__1(f));\n}\n\nfunction forEachU(_xs, f) {\n  while (true) {\n    var xs = _xs;\n\n    if (xs) {\n      f(xs[0]);\n      _xs = xs[1];\n      continue;\n    } else {\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction forEach(xs, f) {\n  return forEachU(xs, Curry.__1(f));\n}\n\nfunction forEachWithIndexU(l, f) {\n  var _xs = l;\n  var _i = 0;\n  var f$1 = f;\n\n  while (true) {\n    var i = _i;\n    var xs = _xs;\n\n    if (xs) {\n      f$1(i, xs[0]);\n      _i = i + 1 | 0;\n      _xs = xs[1];\n      continue;\n    } else {\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction forEachWithIndex(l, f) {\n  return forEachWithIndexU(l, Curry.__2(f));\n}\n\nfunction reduceU(_l, _accu, f) {\n  while (true) {\n    var accu = _accu;\n    var l = _l;\n\n    if (l) {\n      _accu = f(accu, l[0]);\n      _l = l[1];\n      continue;\n    } else {\n      return accu;\n    }\n  }\n\n  ;\n}\n\nfunction reduce(l, accu, f) {\n  return reduceU(l, accu, Curry.__2(f));\n}\n\nfunction reduceReverseUnsafeU(l, accu, f) {\n  if (l) {\n    return f(reduceReverseUnsafeU(l[1], accu, f), l[0]);\n  } else {\n    return accu;\n  }\n}\n\nfunction reduceReverseU(l, acc, f) {\n  var len = length(l);\n\n  if (len < 1000) {\n    return reduceReverseUnsafeU(l, acc, f);\n  } else {\n    return Belt_Array.reduceReverseU(toArray(l), acc, f);\n  }\n}\n\nfunction reduceReverse(l, accu, f) {\n  return reduceReverseU(l, accu, Curry.__2(f));\n}\n\nfunction reduceWithIndexU(l, acc, f) {\n  var _l = l;\n  var _acc = acc;\n  var f$1 = f;\n  var _i = 0;\n\n  while (true) {\n    var i = _i;\n    var acc$1 = _acc;\n    var l$1 = _l;\n\n    if (l$1) {\n      _i = i + 1 | 0;\n      _acc = f$1(acc$1, l$1[0], i);\n      _l = l$1[1];\n      continue;\n    } else {\n      return acc$1;\n    }\n  }\n\n  ;\n}\n\nfunction reduceWithIndex(l, acc, f) {\n  return reduceWithIndexU(l, acc, Curry.__3(f));\n}\n\nfunction mapReverse2U(l1, l2, f) {\n  var _l1 = l1;\n  var _l2 = l2;\n  var _accu =\n  /* [] */\n  0;\n  var f$1 = f;\n\n  while (true) {\n    var accu = _accu;\n    var l2$1 = _l2;\n    var l1$1 = _l1;\n\n    if (l1$1 && l2$1) {\n      _accu =\n      /* :: */\n      [f$1(l1$1[0], l2$1[0]), accu];\n      _l2 = l2$1[1];\n      _l1 = l1$1[1];\n      continue;\n    } else {\n      return accu;\n    }\n  }\n\n  ;\n}\n\nfunction mapReverse2(l1, l2, f) {\n  return mapReverse2U(l1, l2, Curry.__2(f));\n}\n\nfunction forEach2U(_l1, _l2, f) {\n  while (true) {\n    var l2 = _l2;\n    var l1 = _l1;\n\n    if (l1 && l2) {\n      f(l1[0], l2[0]);\n      _l2 = l2[1];\n      _l1 = l1[1];\n      continue;\n    } else {\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction forEach2(l1, l2, f) {\n  return forEach2U(l1, l2, Curry.__2(f));\n}\n\nfunction reduce2U(_l1, _l2, _accu, f) {\n  while (true) {\n    var accu = _accu;\n    var l2 = _l2;\n    var l1 = _l1;\n\n    if (l1 && l2) {\n      _accu = f(accu, l1[0], l2[0]);\n      _l2 = l2[1];\n      _l1 = l1[1];\n      continue;\n    } else {\n      return accu;\n    }\n  }\n\n  ;\n}\n\nfunction reduce2(l1, l2, acc, f) {\n  return reduce2U(l1, l2, acc, Curry.__3(f));\n}\n\nfunction reduceReverse2UnsafeU(l1, l2, accu, f) {\n  if (l1 && l2) {\n    return f(reduceReverse2UnsafeU(l1[1], l2[1], accu, f), l1[0], l2[0]);\n  } else {\n    return accu;\n  }\n}\n\nfunction reduceReverse2U(l1, l2, acc, f) {\n  var len = length(l1);\n\n  if (len < 1000) {\n    return reduceReverse2UnsafeU(l1, l2, acc, f);\n  } else {\n    return Belt_Array.reduceReverse2U(toArray(l1), toArray(l2), acc, f);\n  }\n}\n\nfunction reduceReverse2(l1, l2, acc, f) {\n  return reduceReverse2U(l1, l2, acc, Curry.__3(f));\n}\n\nfunction everyU(_xs, p) {\n  while (true) {\n    var xs = _xs;\n\n    if (xs) {\n      if (p(xs[0])) {\n        _xs = xs[1];\n        continue;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  }\n\n  ;\n}\n\nfunction every(xs, p) {\n  return everyU(xs, Curry.__1(p));\n}\n\nfunction someU(_xs, p) {\n  while (true) {\n    var xs = _xs;\n\n    if (xs) {\n      if (p(xs[0])) {\n        return true;\n      } else {\n        _xs = xs[1];\n        continue;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  ;\n}\n\nfunction some(xs, p) {\n  return someU(xs, Curry.__1(p));\n}\n\nfunction every2U(_l1, _l2, p) {\n  while (true) {\n    var l2 = _l2;\n    var l1 = _l1;\n\n    if (l1 && l2) {\n      if (p(l1[0], l2[0])) {\n        _l2 = l2[1];\n        _l1 = l1[1];\n        continue;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  }\n\n  ;\n}\n\nfunction every2(l1, l2, p) {\n  return every2U(l1, l2, Curry.__2(p));\n}\n\nfunction cmpByLength(_l1, _l2) {\n  while (true) {\n    var l2 = _l2;\n    var l1 = _l1;\n\n    if (l1) {\n      if (l2) {\n        _l2 = l2[1];\n        _l1 = l1[1];\n        continue;\n      } else {\n        return 1;\n      }\n    } else if (l2) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n  ;\n}\n\nfunction cmpU(_l1, _l2, p) {\n  while (true) {\n    var l2 = _l2;\n    var l1 = _l1;\n\n    if (l1) {\n      if (l2) {\n        var c = p(l1[0], l2[0]);\n\n        if (c === 0) {\n          _l2 = l2[1];\n          _l1 = l1[1];\n          continue;\n        } else {\n          return c;\n        }\n      } else {\n        return 1;\n      }\n    } else if (l2) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n  ;\n}\n\nfunction cmp(l1, l2, f) {\n  return cmpU(l1, l2, Curry.__2(f));\n}\n\nfunction eqU(_l1, _l2, p) {\n  while (true) {\n    var l2 = _l2;\n    var l1 = _l1;\n\n    if (l1) {\n      if (l2 && p(l1[0], l2[0])) {\n        _l2 = l2[1];\n        _l1 = l1[1];\n        continue;\n      } else {\n        return false;\n      }\n    } else if (l2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  ;\n}\n\nfunction eq(l1, l2, f) {\n  return eqU(l1, l2, Curry.__2(f));\n}\n\nfunction some2U(_l1, _l2, p) {\n  while (true) {\n    var l2 = _l2;\n    var l1 = _l1;\n\n    if (l1 && l2) {\n      if (p(l1[0], l2[0])) {\n        return true;\n      } else {\n        _l2 = l2[1];\n        _l1 = l1[1];\n        continue;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  ;\n}\n\nfunction some2(l1, l2, p) {\n  return some2U(l1, l2, Curry.__2(p));\n}\n\nfunction hasU(_xs, x, eq) {\n  while (true) {\n    var xs = _xs;\n\n    if (xs) {\n      if (eq(xs[0], x)) {\n        return true;\n      } else {\n        _xs = xs[1];\n        continue;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  ;\n}\n\nfunction has(xs, x, eq) {\n  return hasU(xs, x, Curry.__2(eq));\n}\n\nfunction getAssocU(_xs, x, eq) {\n  while (true) {\n    var xs = _xs;\n\n    if (xs) {\n      var match = xs[0];\n\n      if (eq(match[0], x)) {\n        return Caml_option.some(match[1]);\n      } else {\n        _xs = xs[1];\n        continue;\n      }\n    } else {\n      return;\n    }\n  }\n\n  ;\n}\n\nfunction getAssoc(xs, x, eq) {\n  return getAssocU(xs, x, Curry.__2(eq));\n}\n\nfunction hasAssocU(_xs, x, eq) {\n  while (true) {\n    var xs = _xs;\n\n    if (xs) {\n      if (eq(xs[0][0], x)) {\n        return true;\n      } else {\n        _xs = xs[1];\n        continue;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  ;\n}\n\nfunction hasAssoc(xs, x, eq) {\n  return hasAssocU(xs, x, Curry.__2(eq));\n}\n\nfunction removeAssocU(xs, x, eq) {\n  if (xs) {\n    var l = xs[1];\n    var pair = xs[0];\n\n    if (eq(pair[0], x)) {\n      return l;\n    } else {\n      var cell =\n      /* :: */\n      [pair,\n      /* [] */\n      0];\n      var removed = removeAssocAuxWithMap(l, x, cell, eq);\n\n      if (removed) {\n        return cell;\n      } else {\n        return xs;\n      }\n    }\n  } else {\n    return (\n      /* [] */\n      0\n    );\n  }\n}\n\nfunction removeAssoc(xs, x, eq) {\n  return removeAssocU(xs, x, Curry.__2(eq));\n}\n\nfunction setAssocU(xs, x, k, eq) {\n  if (xs) {\n    var l = xs[1];\n    var pair = xs[0];\n\n    if (eq(pair[0], x)) {\n      return (\n        /* :: */\n        [\n        /* tuple */\n        [x, k], l]\n      );\n    } else {\n      var cell =\n      /* :: */\n      [pair,\n      /* [] */\n      0];\n      var replaced = setAssocAuxWithMap(l, x, k, cell, eq);\n\n      if (replaced) {\n        return cell;\n      } else {\n        return (\n          /* :: */\n          [\n          /* tuple */\n          [x, k], xs]\n        );\n      }\n    }\n  } else {\n    return (\n      /* :: */\n      [\n      /* tuple */\n      [x, k],\n      /* [] */\n      0]\n    );\n  }\n}\n\nfunction setAssoc(xs, x, k, eq) {\n  return setAssocU(xs, x, k, Curry.__2(eq));\n}\n\nfunction sortU(xs, cmp) {\n  var arr = toArray(xs);\n  Belt_SortArray.stableSortInPlaceByU(arr, cmp);\n  return fromArray(arr);\n}\n\nfunction sort(xs, cmp) {\n  return sortU(xs, Curry.__2(cmp));\n}\n\nfunction getByU(_xs, p) {\n  while (true) {\n    var xs = _xs;\n\n    if (xs) {\n      var x = xs[0];\n\n      if (p(x)) {\n        return Caml_option.some(x);\n      } else {\n        _xs = xs[1];\n        continue;\n      }\n    } else {\n      return;\n    }\n  }\n\n  ;\n}\n\nfunction getBy(xs, p) {\n  return getByU(xs, Curry.__1(p));\n}\n\nfunction keepU(_xs, p) {\n  while (true) {\n    var xs = _xs;\n\n    if (xs) {\n      var t = xs[1];\n      var h = xs[0];\n\n      if (p(h)) {\n        var cell =\n        /* :: */\n        [h,\n        /* [] */\n        0];\n        copyAuxWitFilter(p, t, cell);\n        return cell;\n      } else {\n        _xs = t;\n        continue;\n      }\n    } else {\n      return (\n        /* [] */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction keep(xs, p) {\n  return keepU(xs, Curry.__1(p));\n}\n\nfunction keepWithIndexU(xs, p) {\n  var _xs = xs;\n  var p$1 = p;\n  var _i = 0;\n\n  while (true) {\n    var i = _i;\n    var xs$1 = _xs;\n\n    if (xs$1) {\n      var t = xs$1[1];\n      var h = xs$1[0];\n\n      if (p$1(h, i)) {\n        var cell =\n        /* :: */\n        [h,\n        /* [] */\n        0];\n        copyAuxWithFilterIndex(p$1, t, cell, i + 1 | 0);\n        return cell;\n      } else {\n        _i = i + 1 | 0;\n        _xs = t;\n        continue;\n      }\n    } else {\n      return (\n        /* [] */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction keepWithIndex(xs, p) {\n  return keepWithIndexU(xs, Curry.__2(p));\n}\n\nfunction keepMapU(_xs, p) {\n  while (true) {\n    var xs = _xs;\n\n    if (xs) {\n      var t = xs[1];\n      var match = p(xs[0]);\n\n      if (match !== undefined) {\n        var cell =\n        /* :: */\n        [Caml_option.valFromOption(match),\n        /* [] */\n        0];\n        copyAuxWitFilterMap(p, t, cell);\n        return cell;\n      } else {\n        _xs = t;\n        continue;\n      }\n    } else {\n      return (\n        /* [] */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction keepMap(xs, p) {\n  return keepMapU(xs, Curry.__1(p));\n}\n\nfunction partitionU(l, p) {\n  if (l) {\n    var h = l[0];\n    var nextX =\n    /* :: */\n    [h,\n    /* [] */\n    0];\n    var nextY =\n    /* :: */\n    [h,\n    /* [] */\n    0];\n    var b = p(h);\n    partitionAux(p, l[1], nextX, nextY);\n\n    if (b) {\n      return (\n        /* tuple */\n        [nextX, nextY[1]]\n      );\n    } else {\n      return (\n        /* tuple */\n        [nextX[1], nextY]\n      );\n    }\n  } else {\n    return (\n      /* tuple */\n      [\n      /* [] */\n      0,\n      /* [] */\n      0]\n    );\n  }\n}\n\nfunction partition(l, p) {\n  return partitionU(l, Curry.__1(p));\n}\n\nfunction unzip(xs) {\n  if (xs) {\n    var match = xs[0];\n    var cellX =\n    /* :: */\n    [match[0],\n    /* [] */\n    0];\n    var cellY =\n    /* :: */\n    [match[1],\n    /* [] */\n    0];\n    splitAux(xs[1], cellX, cellY);\n    return (\n      /* tuple */\n      [cellX, cellY]\n    );\n  } else {\n    return (\n      /* tuple */\n      [\n      /* [] */\n      0,\n      /* [] */\n      0]\n    );\n  }\n}\n\nfunction zip(l1, l2) {\n  if (l1 && l2) {\n    var cell =\n    /* :: */\n    [\n    /* tuple */\n    [l1[0], l2[0]],\n    /* [] */\n    0];\n    zipAux(l1[1], l2[1], cell);\n    return cell;\n  } else {\n    return (\n      /* [] */\n      0\n    );\n  }\n}\n\nvar size = length;\nvar filter = keep;\nvar filterWithIndex = keepWithIndex;\nexports.length = length;\nexports.size = size;\nexports.head = head;\nexports.headExn = headExn;\nexports.tail = tail;\nexports.tailExn = tailExn;\nexports.add = add;\nexports.get = get;\nexports.getExn = getExn;\nexports.make = make;\nexports.makeByU = makeByU;\nexports.makeBy = makeBy;\nexports.shuffle = shuffle;\nexports.drop = drop;\nexports.take = take;\nexports.splitAt = splitAt;\nexports.concat = concat;\nexports.concatMany = concatMany;\nexports.reverseConcat = reverseConcat;\nexports.flatten = flatten;\nexports.mapU = mapU;\nexports.map = map;\nexports.zip = zip;\nexports.zipByU = zipByU;\nexports.zipBy = zipBy;\nexports.mapWithIndexU = mapWithIndexU;\nexports.mapWithIndex = mapWithIndex;\nexports.fromArray = fromArray;\nexports.toArray = toArray;\nexports.reverse = reverse;\nexports.mapReverseU = mapReverseU;\nexports.mapReverse = mapReverse;\nexports.forEachU = forEachU;\nexports.forEach = forEach;\nexports.forEachWithIndexU = forEachWithIndexU;\nexports.forEachWithIndex = forEachWithIndex;\nexports.reduceU = reduceU;\nexports.reduce = reduce;\nexports.reduceWithIndexU = reduceWithIndexU;\nexports.reduceWithIndex = reduceWithIndex;\nexports.reduceReverseU = reduceReverseU;\nexports.reduceReverse = reduceReverse;\nexports.mapReverse2U = mapReverse2U;\nexports.mapReverse2 = mapReverse2;\nexports.forEach2U = forEach2U;\nexports.forEach2 = forEach2;\nexports.reduce2U = reduce2U;\nexports.reduce2 = reduce2;\nexports.reduceReverse2U = reduceReverse2U;\nexports.reduceReverse2 = reduceReverse2;\nexports.everyU = everyU;\nexports.every = every;\nexports.someU = someU;\nexports.some = some;\nexports.every2U = every2U;\nexports.every2 = every2;\nexports.some2U = some2U;\nexports.some2 = some2;\nexports.cmpByLength = cmpByLength;\nexports.cmpU = cmpU;\nexports.cmp = cmp;\nexports.eqU = eqU;\nexports.eq = eq;\nexports.hasU = hasU;\nexports.has = has;\nexports.getByU = getByU;\nexports.getBy = getBy;\nexports.keepU = keepU;\nexports.keep = keep;\nexports.filter = filter;\nexports.keepWithIndexU = keepWithIndexU;\nexports.keepWithIndex = keepWithIndex;\nexports.filterWithIndex = filterWithIndex;\nexports.keepMapU = keepMapU;\nexports.keepMap = keepMap;\nexports.partitionU = partitionU;\nexports.partition = partition;\nexports.unzip = unzip;\nexports.getAssocU = getAssocU;\nexports.getAssoc = getAssoc;\nexports.hasAssocU = hasAssocU;\nexports.hasAssoc = hasAssoc;\nexports.removeAssocU = removeAssocU;\nexports.removeAssoc = removeAssoc;\nexports.setAssocU = setAssocU;\nexports.setAssoc = setAssoc;\nexports.sortU = sortU;\nexports.sort = sort;\n/* No side effect */","map":null,"metadata":{},"sourceType":"module"}