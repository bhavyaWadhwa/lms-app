{"ast":null,"code":"'use strict';\n\nvar Block = require(\"./block.js\");\n\nfunction erase_rel(param) {\n  if (typeof param === \"number\") {\n    return (\n      /* End_of_fmtty */\n      0\n    );\n  } else {\n    switch (param.tag | 0) {\n      case\n      /* Char_ty */\n      0:\n        return (\n          /* Char_ty */\n          Block.__(0, [erase_rel(param[0])])\n        );\n\n      case\n      /* String_ty */\n      1:\n        return (\n          /* String_ty */\n          Block.__(1, [erase_rel(param[0])])\n        );\n\n      case\n      /* Int_ty */\n      2:\n        return (\n          /* Int_ty */\n          Block.__(2, [erase_rel(param[0])])\n        );\n\n      case\n      /* Int32_ty */\n      3:\n        return (\n          /* Int32_ty */\n          Block.__(3, [erase_rel(param[0])])\n        );\n\n      case\n      /* Nativeint_ty */\n      4:\n        return (\n          /* Nativeint_ty */\n          Block.__(4, [erase_rel(param[0])])\n        );\n\n      case\n      /* Int64_ty */\n      5:\n        return (\n          /* Int64_ty */\n          Block.__(5, [erase_rel(param[0])])\n        );\n\n      case\n      /* Float_ty */\n      6:\n        return (\n          /* Float_ty */\n          Block.__(6, [erase_rel(param[0])])\n        );\n\n      case\n      /* Bool_ty */\n      7:\n        return (\n          /* Bool_ty */\n          Block.__(7, [erase_rel(param[0])])\n        );\n\n      case\n      /* Format_arg_ty */\n      8:\n        return (\n          /* Format_arg_ty */\n          Block.__(8, [param[0], erase_rel(param[1])])\n        );\n\n      case\n      /* Format_subst_ty */\n      9:\n        var ty1 = param[0];\n        return (\n          /* Format_subst_ty */\n          Block.__(9, [ty1, ty1, erase_rel(param[2])])\n        );\n\n      case\n      /* Alpha_ty */\n      10:\n        return (\n          /* Alpha_ty */\n          Block.__(10, [erase_rel(param[0])])\n        );\n\n      case\n      /* Theta_ty */\n      11:\n        return (\n          /* Theta_ty */\n          Block.__(11, [erase_rel(param[0])])\n        );\n\n      case\n      /* Any_ty */\n      12:\n        return (\n          /* Any_ty */\n          Block.__(12, [erase_rel(param[0])])\n        );\n\n      case\n      /* Reader_ty */\n      13:\n        return (\n          /* Reader_ty */\n          Block.__(13, [erase_rel(param[0])])\n        );\n\n      case\n      /* Ignored_reader_ty */\n      14:\n        return (\n          /* Ignored_reader_ty */\n          Block.__(14, [erase_rel(param[0])])\n        );\n    }\n  }\n}\n\nfunction concat_fmtty(fmtty1, fmtty2) {\n  if (typeof fmtty1 === \"number\") {\n    return fmtty2;\n  } else {\n    switch (fmtty1.tag | 0) {\n      case\n      /* Char_ty */\n      0:\n        return (\n          /* Char_ty */\n          Block.__(0, [concat_fmtty(fmtty1[0], fmtty2)])\n        );\n\n      case\n      /* String_ty */\n      1:\n        return (\n          /* String_ty */\n          Block.__(1, [concat_fmtty(fmtty1[0], fmtty2)])\n        );\n\n      case\n      /* Int_ty */\n      2:\n        return (\n          /* Int_ty */\n          Block.__(2, [concat_fmtty(fmtty1[0], fmtty2)])\n        );\n\n      case\n      /* Int32_ty */\n      3:\n        return (\n          /* Int32_ty */\n          Block.__(3, [concat_fmtty(fmtty1[0], fmtty2)])\n        );\n\n      case\n      /* Nativeint_ty */\n      4:\n        return (\n          /* Nativeint_ty */\n          Block.__(4, [concat_fmtty(fmtty1[0], fmtty2)])\n        );\n\n      case\n      /* Int64_ty */\n      5:\n        return (\n          /* Int64_ty */\n          Block.__(5, [concat_fmtty(fmtty1[0], fmtty2)])\n        );\n\n      case\n      /* Float_ty */\n      6:\n        return (\n          /* Float_ty */\n          Block.__(6, [concat_fmtty(fmtty1[0], fmtty2)])\n        );\n\n      case\n      /* Bool_ty */\n      7:\n        return (\n          /* Bool_ty */\n          Block.__(7, [concat_fmtty(fmtty1[0], fmtty2)])\n        );\n\n      case\n      /* Format_arg_ty */\n      8:\n        return (\n          /* Format_arg_ty */\n          Block.__(8, [fmtty1[0], concat_fmtty(fmtty1[1], fmtty2)])\n        );\n\n      case\n      /* Format_subst_ty */\n      9:\n        return (\n          /* Format_subst_ty */\n          Block.__(9, [fmtty1[0], fmtty1[1], concat_fmtty(fmtty1[2], fmtty2)])\n        );\n\n      case\n      /* Alpha_ty */\n      10:\n        return (\n          /* Alpha_ty */\n          Block.__(10, [concat_fmtty(fmtty1[0], fmtty2)])\n        );\n\n      case\n      /* Theta_ty */\n      11:\n        return (\n          /* Theta_ty */\n          Block.__(11, [concat_fmtty(fmtty1[0], fmtty2)])\n        );\n\n      case\n      /* Any_ty */\n      12:\n        return (\n          /* Any_ty */\n          Block.__(12, [concat_fmtty(fmtty1[0], fmtty2)])\n        );\n\n      case\n      /* Reader_ty */\n      13:\n        return (\n          /* Reader_ty */\n          Block.__(13, [concat_fmtty(fmtty1[0], fmtty2)])\n        );\n\n      case\n      /* Ignored_reader_ty */\n      14:\n        return (\n          /* Ignored_reader_ty */\n          Block.__(14, [concat_fmtty(fmtty1[0], fmtty2)])\n        );\n    }\n  }\n}\n\nfunction concat_fmt(fmt1, fmt2) {\n  if (typeof fmt1 === \"number\") {\n    return fmt2;\n  } else {\n    switch (fmt1.tag | 0) {\n      case\n      /* Char */\n      0:\n        return (\n          /* Char */\n          Block.__(0, [concat_fmt(fmt1[0], fmt2)])\n        );\n\n      case\n      /* Caml_char */\n      1:\n        return (\n          /* Caml_char */\n          Block.__(1, [concat_fmt(fmt1[0], fmt2)])\n        );\n\n      case\n      /* String */\n      2:\n        return (\n          /* String */\n          Block.__(2, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n        );\n\n      case\n      /* Caml_string */\n      3:\n        return (\n          /* Caml_string */\n          Block.__(3, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n        );\n\n      case\n      /* Int */\n      4:\n        return (\n          /* Int */\n          Block.__(4, [fmt1[0], fmt1[1], fmt1[2], concat_fmt(fmt1[3], fmt2)])\n        );\n\n      case\n      /* Int32 */\n      5:\n        return (\n          /* Int32 */\n          Block.__(5, [fmt1[0], fmt1[1], fmt1[2], concat_fmt(fmt1[3], fmt2)])\n        );\n\n      case\n      /* Nativeint */\n      6:\n        return (\n          /* Nativeint */\n          Block.__(6, [fmt1[0], fmt1[1], fmt1[2], concat_fmt(fmt1[3], fmt2)])\n        );\n\n      case\n      /* Int64 */\n      7:\n        return (\n          /* Int64 */\n          Block.__(7, [fmt1[0], fmt1[1], fmt1[2], concat_fmt(fmt1[3], fmt2)])\n        );\n\n      case\n      /* Float */\n      8:\n        return (\n          /* Float */\n          Block.__(8, [fmt1[0], fmt1[1], fmt1[2], concat_fmt(fmt1[3], fmt2)])\n        );\n\n      case\n      /* Bool */\n      9:\n        return (\n          /* Bool */\n          Block.__(9, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n        );\n\n      case\n      /* Flush */\n      10:\n        return (\n          /* Flush */\n          Block.__(10, [concat_fmt(fmt1[0], fmt2)])\n        );\n\n      case\n      /* String_literal */\n      11:\n        return (\n          /* String_literal */\n          Block.__(11, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n        );\n\n      case\n      /* Char_literal */\n      12:\n        return (\n          /* Char_literal */\n          Block.__(12, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n        );\n\n      case\n      /* Format_arg */\n      13:\n        return (\n          /* Format_arg */\n          Block.__(13, [fmt1[0], fmt1[1], concat_fmt(fmt1[2], fmt2)])\n        );\n\n      case\n      /* Format_subst */\n      14:\n        return (\n          /* Format_subst */\n          Block.__(14, [fmt1[0], fmt1[1], concat_fmt(fmt1[2], fmt2)])\n        );\n\n      case\n      /* Alpha */\n      15:\n        return (\n          /* Alpha */\n          Block.__(15, [concat_fmt(fmt1[0], fmt2)])\n        );\n\n      case\n      /* Theta */\n      16:\n        return (\n          /* Theta */\n          Block.__(16, [concat_fmt(fmt1[0], fmt2)])\n        );\n\n      case\n      /* Formatting_lit */\n      17:\n        return (\n          /* Formatting_lit */\n          Block.__(17, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n        );\n\n      case\n      /* Formatting_gen */\n      18:\n        return (\n          /* Formatting_gen */\n          Block.__(18, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n        );\n\n      case\n      /* Reader */\n      19:\n        return (\n          /* Reader */\n          Block.__(19, [concat_fmt(fmt1[0], fmt2)])\n        );\n\n      case\n      /* Scan_char_set */\n      20:\n        return (\n          /* Scan_char_set */\n          Block.__(20, [fmt1[0], fmt1[1], concat_fmt(fmt1[2], fmt2)])\n        );\n\n      case\n      /* Scan_get_counter */\n      21:\n        return (\n          /* Scan_get_counter */\n          Block.__(21, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n        );\n\n      case\n      /* Scan_next_char */\n      22:\n        return (\n          /* Scan_next_char */\n          Block.__(22, [concat_fmt(fmt1[0], fmt2)])\n        );\n\n      case\n      /* Ignored_param */\n      23:\n        return (\n          /* Ignored_param */\n          Block.__(23, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n        );\n\n      case\n      /* Custom */\n      24:\n        return (\n          /* Custom */\n          Block.__(24, [fmt1[0], fmt1[1], concat_fmt(fmt1[2], fmt2)])\n        );\n    }\n  }\n}\n\nexports.concat_fmtty = concat_fmtty;\nexports.erase_rel = erase_rel;\nexports.concat_fmt = concat_fmt;\n/* No side effect */","map":null,"metadata":{},"sourceType":"module"}