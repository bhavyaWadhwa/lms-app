{"ast":null,"code":"'use strict'; // constructor\n\nfunction DFA() {\n  // alphabets are encoded by numbers in 16^N form, presenting its precedence\n  this.__highest_alphabet__ = 0x0;\n  this.__match_alphabets__ = {}; // states are union (bitwise OR) of its accepted alphabets\n\n  this.__initial_state__ = 0x0;\n  this.__accept_states__ = {}; // transitions are in the form: {prev_state: {alphabet: next_state}}\n\n  this.__transitions__ = {}; // actions take two parameters: step (line number), prev_state and alphabet\n\n  this.__actions__ = {};\n} // setters\n\n\nDFA.prototype.set_highest_alphabet = function (alphabet) {\n  this.__highest_alphabet__ = alphabet;\n};\n\nDFA.prototype.set_match_alphabets = function (matches) {\n  this.__match_alphabets__ = matches;\n};\n\nDFA.prototype.set_initial_state = function (initial) {\n  this.__initial_state__ = initial;\n};\n\nDFA.prototype.set_accept_states = function (accepts) {\n  for (var i = 0; i < accepts.length; i++) {\n    this.__accept_states__[accepts[i]] = true;\n  }\n};\n\nDFA.prototype.set_transitions = function (transitions) {\n  this.__transitions__ = transitions;\n};\n\nDFA.prototype.set_actions = function (actions) {\n  this.__actions__ = actions;\n};\n\nDFA.prototype.update_transition = function (state, alphabets) {\n  this.__transitions__[state] = Object.assign(this.__transitions__[state] || Object(), alphabets);\n}; // methods\n\n\nDFA.prototype.execute = function (start, end) {\n  var state, step, alphabet;\n\n  for (state = this.__initial_state__, step = start; state && step < end; step++) {\n    for (alphabet = this.__highest_alphabet__; alphabet > 0x0; alphabet >>= 4) {\n      if (state & alphabet && this.__match_alphabets__[alphabet].call(this, step, state, alphabet)) {\n        break;\n      }\n    }\n\n    this.__actions__(step, state, alphabet);\n\n    if (alphabet === 0x0) {\n      break;\n    }\n\n    state = this.__transitions__[state][alphabet] || 0x0;\n  }\n\n  return !!this.__accept_states__[state];\n};\n\nmodule.exports = DFA;\n/* vim: set ts=2 sw=2 et: */","map":null,"metadata":{},"sourceType":"module"}