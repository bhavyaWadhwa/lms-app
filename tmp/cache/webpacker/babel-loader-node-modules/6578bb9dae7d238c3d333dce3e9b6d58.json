{"ast":null,"code":"'use strict';\n\nvar Js_exn = require(\"bs-platform/lib/js/js_exn.js\");\n\nvar Caml_option = require(\"bs-platform/lib/js/caml_option.js\");\n\nvar Caml_exceptions = require(\"bs-platform/lib/js/caml_exceptions.js\");\n\nvar Caml_js_exceptions = require(\"bs-platform/lib/js/caml_js_exceptions.js\");\n\nvar ParseError = Caml_exceptions.create(\"Json.ParseError\");\n\nfunction parse(s) {\n  try {\n    return Caml_option.some(JSON.parse(s));\n  } catch (exn) {\n    return;\n  }\n}\n\nfunction parseOrRaise(s) {\n  try {\n    return JSON.parse(s);\n  } catch (raw_exn) {\n    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n\n    if (exn[0] === Js_exn.$$Error) {\n      var match = exn[1].message;\n      var message = match !== undefined ? match : \"Unknown error\";\n      throw [ParseError, message];\n    } else {\n      throw exn;\n    }\n  }\n}\n\nvar Decode =\n/* alias */\n0;\nvar Encode =\n/* alias */\n0;\n\nfunction stringify(prim) {\n  return JSON.stringify(prim);\n}\n\nexports.Decode = Decode;\nexports.Encode = Encode;\nexports.ParseError = ParseError;\nexports.parse = parse;\nexports.parseOrRaise = parseOrRaise;\nexports.stringify = stringify;\n/* No side effect */","map":null,"metadata":{},"sourceType":"module"}