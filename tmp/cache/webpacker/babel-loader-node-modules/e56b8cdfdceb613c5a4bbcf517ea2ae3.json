{"ast":null,"code":"'use strict';\n\nvar Belt_internalAVLset = require(\"./belt_internalAVLset.js\");\n\nvar Belt_SortArrayString = require(\"./belt_SortArrayString.js\");\n\nfunction has(_t, x) {\n  while (true) {\n    var t = _t;\n\n    if (t !== null) {\n      var v = t.value;\n\n      if (x === v) {\n        return true;\n      } else {\n        _t = x < v ? t.left : t.right;\n        continue;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  ;\n}\n\nfunction compareAux(_e1, _e2) {\n  while (true) {\n    var e2 = _e2;\n    var e1 = _e1;\n\n    if (e1 && e2) {\n      var h2 = e2[0];\n      var h1 = e1[0];\n      var k1 = h1.value;\n      var k2 = h2.value;\n\n      if (k1 === k2) {\n        _e2 = Belt_internalAVLset.stackAllLeft(h2.right, e2[1]);\n        _e1 = Belt_internalAVLset.stackAllLeft(h1.right, e1[1]);\n        continue;\n      } else if (k1 < k2) {\n        return -1;\n      } else {\n        return 1;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  ;\n}\n\nfunction cmp(s1, s2) {\n  var len1 = Belt_internalAVLset.size(s1);\n  var len2 = Belt_internalAVLset.size(s2);\n\n  if (len1 === len2) {\n    return compareAux(Belt_internalAVLset.stackAllLeft(s1,\n    /* [] */\n    0), Belt_internalAVLset.stackAllLeft(s2,\n    /* [] */\n    0));\n  } else if (len1 < len2) {\n    return -1;\n  } else {\n    return 1;\n  }\n}\n\nfunction eq(s1, s2) {\n  return cmp(s1, s2) === 0;\n}\n\nfunction subset(_s1, _s2) {\n  while (true) {\n    var s2 = _s2;\n    var s1 = _s1;\n\n    if (s1 !== null) {\n      if (s2 !== null) {\n        var l1 = s1.left;\n        var v1 = s1.value;\n        var r1 = s1.right;\n        var l2 = s2.left;\n        var v2 = s2.value;\n        var r2 = s2.right;\n\n        if (v1 === v2) {\n          if (subset(l1, l2)) {\n            _s2 = r2;\n            _s1 = r1;\n            continue;\n          } else {\n            return false;\n          }\n        } else if (v1 < v2) {\n          if (subset(Belt_internalAVLset.create(l1, v1, null), l2)) {\n            _s1 = r1;\n            continue;\n          } else {\n            return false;\n          }\n        } else if (subset(Belt_internalAVLset.create(null, v1, r1), r2)) {\n          _s1 = l1;\n          continue;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  }\n\n  ;\n}\n\nfunction get(_n, x) {\n  while (true) {\n    var n = _n;\n\n    if (n !== null) {\n      var v = n.value;\n\n      if (x === v) {\n        return v;\n      } else {\n        _n = x < v ? n.left : n.right;\n        continue;\n      }\n    } else {\n      return;\n    }\n  }\n\n  ;\n}\n\nfunction getUndefined(_n, x) {\n  while (true) {\n    var n = _n;\n\n    if (n !== null) {\n      var v = n.value;\n\n      if (x === v) {\n        return v;\n      } else {\n        _n = x < v ? n.left : n.right;\n        continue;\n      }\n    } else {\n      return;\n    }\n  }\n\n  ;\n}\n\nfunction getExn(_n, x) {\n  while (true) {\n    var n = _n;\n\n    if (n !== null) {\n      var v = n.value;\n\n      if (x === v) {\n        return v;\n      } else {\n        _n = x < v ? n.left : n.right;\n        continue;\n      }\n    } else {\n      throw new Error(\"getExn\");\n    }\n  }\n\n  ;\n}\n\nfunction addMutate(t, x) {\n  if (t !== null) {\n    var k = t.value;\n\n    if (x === k) {\n      return t;\n    } else {\n      var l = t.left;\n      var r = t.right;\n\n      if (x < k) {\n        t.left = addMutate(l, x);\n      } else {\n        t.right = addMutate(r, x);\n      }\n\n      return Belt_internalAVLset.balMutate(t);\n    }\n  } else {\n    return Belt_internalAVLset.singleton(x);\n  }\n}\n\nfunction fromArray(xs) {\n  var len = xs.length;\n\n  if (len === 0) {\n    return null;\n  } else {\n    var next = Belt_SortArrayString.strictlySortedLength(xs);\n    var result;\n\n    if (next >= 0) {\n      result = Belt_internalAVLset.fromSortedArrayAux(xs, 0, next);\n    } else {\n      next = -next | 0;\n      result = Belt_internalAVLset.fromSortedArrayRevAux(xs, next - 1 | 0, next);\n    }\n\n    for (var i = next, i_finish = len - 1 | 0; i <= i_finish; ++i) {\n      result = addMutate(result, xs[i]);\n    }\n\n    return result;\n  }\n}\n\nvar S =\n/* alias */\n0;\nvar N =\n/* alias */\n0;\nvar A =\n/* alias */\n0;\nexports.S = S;\nexports.N = N;\nexports.A = A;\nexports.has = has;\nexports.compareAux = compareAux;\nexports.cmp = cmp;\nexports.eq = eq;\nexports.subset = subset;\nexports.get = get;\nexports.getUndefined = getUndefined;\nexports.getExn = getExn;\nexports.addMutate = addMutate;\nexports.fromArray = fromArray;\n/* No side effect */","map":null,"metadata":{},"sourceType":"module"}