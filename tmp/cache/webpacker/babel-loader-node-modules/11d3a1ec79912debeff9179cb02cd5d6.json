{"ast":null,"code":"'use strict';\n\nvar Caml_option = require(\"./caml_option.js\");\n\nfunction get(dict, k) {\n  if (k in dict) {\n    return Caml_option.some(dict[k]);\n  }\n}\n\nvar unsafeDeleteKey = function unsafeDeleteKey(dict, key) {\n  delete dict[key];\n  return 0;\n};\n\nfunction entries(dict) {\n  var keys = Object.keys(dict);\n  var l = keys.length;\n  var values = new Array(l);\n\n  for (var i = 0, i_finish = l - 1 | 0; i <= i_finish; ++i) {\n    var key = keys[i];\n    values[i] =\n    /* tuple */\n    [key, dict[key]];\n  }\n\n  return values;\n}\n\nfunction values(dict) {\n  var keys = Object.keys(dict);\n  var l = keys.length;\n  var values$1 = new Array(l);\n\n  for (var i = 0, i_finish = l - 1 | 0; i <= i_finish; ++i) {\n    values$1[i] = dict[keys[i]];\n  }\n\n  return values$1;\n}\n\nfunction fromList(entries) {\n  var dict = {};\n  var _param = entries;\n\n  while (true) {\n    var param = _param;\n\n    if (param) {\n      var match = param[0];\n      dict[match[0]] = match[1];\n      _param = param[1];\n      continue;\n    } else {\n      return dict;\n    }\n  }\n\n  ;\n}\n\nfunction fromArray(entries) {\n  var dict = {};\n  var l = entries.length;\n\n  for (var i = 0, i_finish = l - 1 | 0; i <= i_finish; ++i) {\n    var match = entries[i];\n    dict[match[0]] = match[1];\n  }\n\n  return dict;\n}\n\nfunction map(f, source) {\n  var target = {};\n  var keys = Object.keys(source);\n  var l = keys.length;\n\n  for (var i = 0, i_finish = l - 1 | 0; i <= i_finish; ++i) {\n    var key = keys[i];\n    target[key] = f(source[key]);\n  }\n\n  return target;\n}\n\nexports.get = get;\nexports.unsafeDeleteKey = unsafeDeleteKey;\nexports.entries = entries;\nexports.values = values;\nexports.fromList = fromList;\nexports.fromArray = fromArray;\nexports.map = map;\n/* No side effect */","map":null,"metadata":{},"sourceType":"module"}