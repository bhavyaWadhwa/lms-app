{"ast":null,"code":"// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n'use strict';\n\nvar Json = require(\"@glennsl/bs-json/src/Json.bs.js\");\n\nvar $$Array = require(\"bs-platform/lib/js/array.js\");\n\nvar React = require(\"react\");\n\nvar ReactDom = require(\"react-dom\");\n\nvar Json_decode = require(\"@glennsl/bs-json/src/Json_decode.bs.js\");\n\nvar MarkdownBlock = require(\"../shared/components/MarkdownBlock.bs.js\");\n\nvar Caml_exceptions = require(\"bs-platform/lib/js/caml_exceptions.js\");\n\nvar RootAttributeMissing = Caml_exceptions.create(\"ConvertMarkdownPack.RootAttributeMissing\");\nvar InvalidProfile = Caml_exceptions.create(\"ConvertMarkdownPack.InvalidProfile\");\n\nfunction decodeProps(json) {\n  return {\n    markdown: Json_decode.field(\"markdown\", Json_decode.string, json),\n    profile: Json_decode.field(\"profile\", Json_decode.string, json)\n  };\n}\n\nfunction parseElement(element, attribute) {\n  var match = element.getAttribute(attribute);\n  var tmp;\n\n  if (match == null) {\n    throw [RootAttributeMissing, attribute];\n  } else {\n    tmp = match;\n  }\n\n  return decodeProps(Json.parseOrRaise(tmp));\n}\n\nfunction profileType(profile) {\n  switch (profile) {\n    case \"areaOfText\":\n      return (\n        /* AreaOfText */\n        3\n      );\n\n    case \"comment\":\n      return (\n        /* Comment */\n        0\n      );\n\n    case \"permissive\":\n      return (\n        /* Permissive */\n        2\n      );\n\n    case \"questionAndAnswer\":\n      return (\n        /* QuestionAndAnswer */\n        1\n      );\n\n    default:\n      throw [InvalidProfile, profile];\n  }\n}\n\nfunction parseMarkdown(attributeNameOpt, attributeOpt, param) {\n  var attributeName = attributeNameOpt !== undefined ? attributeNameOpt : \"convert-markdown\";\n  var attribute = attributeOpt !== undefined ? attributeOpt : \"data-json-props\";\n  return $$Array.map(function (element) {\n    var props = parseElement(element, attribute);\n    ReactDom.render(React.createElement(MarkdownBlock.make, {\n      markdown: props.markdown,\n      className: \"leading-normal text-sm\",\n      profile: profileType(props.profile)\n    }), element);\n    return (\n      /* () */\n      0\n    );\n  }, Array.prototype.slice.call(document.getElementsByClassName(attributeName)));\n}\n\nparseMarkdown(undefined, undefined,\n/* () */\n0);\nexports.RootAttributeMissing = RootAttributeMissing;\nexports.InvalidProfile = InvalidProfile;\nexports.decodeProps = decodeProps;\nexports.parseElement = parseElement;\nexports.profileType = profileType;\nexports.parseMarkdown = parseMarkdown;\n/*  Not a pure module */","map":{"version":3,"sources":["/home/kochar/Documents/pupilfirst-master/app/javascript/packs/ConvertMarkdownPack.bs.js"],"names":["Json","require","$$Array","React","ReactDom","Json_decode","MarkdownBlock","Caml_exceptions","RootAttributeMissing","create","InvalidProfile","decodeProps","json","markdown","field","string","profile","parseElement","element","attribute","match","getAttribute","tmp","parseOrRaise","profileType","parseMarkdown","attributeNameOpt","attributeOpt","param","attributeName","undefined","map","props","render","createElement","make","className","Array","prototype","slice","call","document","getElementsByClassName","exports"],"mappings":"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","sourcesContent":["// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n'use strict';\n\nvar Json = require(\"@glennsl/bs-json/src/Json.bs.js\");\nvar $$Array = require(\"bs-platform/lib/js/array.js\");\nvar React = require(\"react\");\nvar ReactDom = require(\"react-dom\");\nvar Json_decode = require(\"@glennsl/bs-json/src/Json_decode.bs.js\");\nvar MarkdownBlock = require(\"../shared/components/MarkdownBlock.bs.js\");\nvar Caml_exceptions = require(\"bs-platform/lib/js/caml_exceptions.js\");\n\nvar RootAttributeMissing = Caml_exceptions.create(\"ConvertMarkdownPack.RootAttributeMissing\");\n\nvar InvalidProfile = Caml_exceptions.create(\"ConvertMarkdownPack.InvalidProfile\");\n\nfunction decodeProps(json) {\n  return {\n          markdown: Json_decode.field(\"markdown\", Json_decode.string, json),\n          profile: Json_decode.field(\"profile\", Json_decode.string, json)\n        };\n}\n\nfunction parseElement(element, attribute) {\n  var match = element.getAttribute(attribute);\n  var tmp;\n  if (match == null) {\n    throw [\n          RootAttributeMissing,\n          attribute\n        ];\n  } else {\n    tmp = match;\n  }\n  return decodeProps(Json.parseOrRaise(tmp));\n}\n\nfunction profileType(profile) {\n  switch (profile) {\n    case \"areaOfText\" :\n        return /* AreaOfText */3;\n    case \"comment\" :\n        return /* Comment */0;\n    case \"permissive\" :\n        return /* Permissive */2;\n    case \"questionAndAnswer\" :\n        return /* QuestionAndAnswer */1;\n    default:\n      throw [\n            InvalidProfile,\n            profile\n          ];\n  }\n}\n\nfunction parseMarkdown(attributeNameOpt, attributeOpt, param) {\n  var attributeName = attributeNameOpt !== undefined ? attributeNameOpt : \"convert-markdown\";\n  var attribute = attributeOpt !== undefined ? attributeOpt : \"data-json-props\";\n  return $$Array.map((function (element) {\n                var props = parseElement(element, attribute);\n                ReactDom.render(React.createElement(MarkdownBlock.make, {\n                          markdown: props.markdown,\n                          className: \"leading-normal text-sm\",\n                          profile: profileType(props.profile)\n                        }), element);\n                return /* () */0;\n              }), Array.prototype.slice.call(document.getElementsByClassName(attributeName)));\n}\n\nparseMarkdown(undefined, undefined, /* () */0);\n\nexports.RootAttributeMissing = RootAttributeMissing;\nexports.InvalidProfile = InvalidProfile;\nexports.decodeProps = decodeProps;\nexports.parseElement = parseElement;\nexports.profileType = profileType;\nexports.parseMarkdown = parseMarkdown;\n/*  Not a pure module */\n"]},"metadata":{},"sourceType":"module"}