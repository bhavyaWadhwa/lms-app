{"ast":null,"code":"'use strict';\n\nvar Curry = require(\"./curry.js\");\n\nvar Caml_io = require(\"./caml_io.js\");\n\nvar Caml_sys = require(\"./caml_sys.js\");\n\nvar Caml_bytes = require(\"./caml_bytes.js\");\n\nvar Caml_format = require(\"./caml_format.js\");\n\nvar Caml_string = require(\"./caml_string.js\");\n\nvar Caml_exceptions = require(\"./caml_exceptions.js\");\n\nvar Caml_js_exceptions = require(\"./caml_js_exceptions.js\");\n\nvar Caml_external_polyfill = require(\"./caml_external_polyfill.js\");\n\nvar Caml_builtin_exceptions = require(\"./caml_builtin_exceptions.js\");\n\nvar CamlinternalFormatBasics = require(\"./camlinternalFormatBasics.js\");\n\nfunction failwith(s) {\n  throw [Caml_builtin_exceptions.failure, s];\n}\n\nfunction invalid_arg(s) {\n  throw [Caml_builtin_exceptions.invalid_argument, s];\n}\n\nvar Exit = Caml_exceptions.create(\"Pervasives.Exit\");\n\nfunction abs(x) {\n  if (x >= 0) {\n    return x;\n  } else {\n    return -x | 0;\n  }\n}\n\nfunction lnot(x) {\n  return x ^ -1;\n}\n\nvar min_int = -2147483648;\n\nfunction classify_float(x) {\n  if (isFinite(x)) {\n    if (Math.abs(x) >= 2.22507385850720138e-308) {\n      return (\n        /* FP_normal */\n        0\n      );\n    } else if (x !== 0) {\n      return (\n        /* FP_subnormal */\n        1\n      );\n    } else {\n      return (\n        /* FP_zero */\n        2\n      );\n    }\n  } else if (isNaN(x)) {\n    return (\n      /* FP_nan */\n      4\n    );\n  } else {\n    return (\n      /* FP_infinite */\n      3\n    );\n  }\n}\n\nfunction char_of_int(n) {\n  if (n < 0 || n > 255) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"char_of_int\"];\n  }\n\n  return n;\n}\n\nfunction string_of_bool(b) {\n  if (b) {\n    return \"true\";\n  } else {\n    return \"false\";\n  }\n}\n\nfunction bool_of_string(param) {\n  switch (param) {\n    case \"false\":\n      return false;\n\n    case \"true\":\n      return true;\n\n    default:\n      throw [Caml_builtin_exceptions.invalid_argument, \"bool_of_string\"];\n  }\n}\n\nfunction bool_of_string_opt(param) {\n  switch (param) {\n    case \"false\":\n      return false;\n\n    case \"true\":\n      return true;\n\n    default:\n      return;\n  }\n}\n\nfunction int_of_string_opt(s) {\n  try {\n    return Caml_format.caml_int_of_string(s);\n  } catch (raw_exn) {\n    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n\n    if (exn[0] === Caml_builtin_exceptions.failure) {\n      return;\n    } else {\n      throw exn;\n    }\n  }\n}\n\nfunction valid_float_lexem(s) {\n  var l = s.length;\n  var _i = 0;\n\n  while (true) {\n    var i = _i;\n\n    if (i >= l) {\n      return s + \".\";\n    } else {\n      var match = Caml_string.get(s, i);\n\n      if (match >= 48) {\n        if (match >= 58) {\n          return s;\n        } else {\n          _i = i + 1 | 0;\n          continue;\n        }\n      } else if (match !== 45) {\n        return s;\n      } else {\n        _i = i + 1 | 0;\n        continue;\n      }\n    }\n  }\n\n  ;\n}\n\nfunction string_of_float(f) {\n  return valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f));\n}\n\nfunction float_of_string_opt(s) {\n  try {\n    return Caml_format.caml_float_of_string(s);\n  } catch (raw_exn) {\n    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n\n    if (exn[0] === Caml_builtin_exceptions.failure) {\n      return;\n    } else {\n      throw exn;\n    }\n  }\n}\n\nfunction $at(l1, l2) {\n  if (l1) {\n    return (\n      /* :: */\n      [l1[0], $at(l1[1], l2)]\n    );\n  } else {\n    return l2;\n  }\n}\n\nvar stdin = Caml_io.stdin;\nvar stdout = Caml_io.stdout;\nvar stderr = Caml_io.stderr;\n\nfunction open_out_gen(mode, perm, name) {\n  var c = Caml_external_polyfill.resolve(\"caml_ml_open_descriptor_out\")(Caml_external_polyfill.resolve(\"caml_sys_open\")(name, mode, perm));\n  Caml_external_polyfill.resolve(\"caml_ml_set_channel_name\")(c, name);\n  return c;\n}\n\nfunction open_out(name) {\n  return open_out_gen(\n  /* :: */\n  [\n  /* Open_wronly */\n  1,\n  /* :: */\n  [\n  /* Open_creat */\n  3,\n  /* :: */\n  [\n  /* Open_trunc */\n  4,\n  /* :: */\n  [\n  /* Open_text */\n  7,\n  /* [] */\n  0]]]], 438, name);\n}\n\nfunction open_out_bin(name) {\n  return open_out_gen(\n  /* :: */\n  [\n  /* Open_wronly */\n  1,\n  /* :: */\n  [\n  /* Open_creat */\n  3,\n  /* :: */\n  [\n  /* Open_trunc */\n  4,\n  /* :: */\n  [\n  /* Open_binary */\n  6,\n  /* [] */\n  0]]]], 438, name);\n}\n\nfunction flush_all(param) {\n  var _param = Caml_io.caml_ml_out_channels_list(\n  /* () */\n  0);\n\n  while (true) {\n    var param$1 = _param;\n\n    if (param$1) {\n      try {\n        Caml_io.caml_ml_flush(param$1[0]);\n      } catch (raw_exn) {\n        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n\n        if (exn[0] !== Caml_builtin_exceptions.sys_error) {\n          throw exn;\n        }\n      }\n\n      _param = param$1[1];\n      continue;\n    } else {\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction output_bytes(oc, s) {\n  return Caml_external_polyfill.resolve(\"caml_ml_output_bytes\")(oc, s, 0, s.length);\n}\n\nfunction output_string(oc, s) {\n  return Caml_io.caml_ml_output(oc, s, 0, s.length);\n}\n\nfunction output(oc, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"output\"];\n  }\n\n  return Caml_external_polyfill.resolve(\"caml_ml_output_bytes\")(oc, s, ofs, len);\n}\n\nfunction output_substring(oc, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"output_substring\"];\n  }\n\n  return Caml_io.caml_ml_output(oc, s, ofs, len);\n}\n\nfunction output_value(chan, v) {\n  return Caml_external_polyfill.resolve(\"caml_output_value\")(chan, v,\n  /* [] */\n  0);\n}\n\nfunction close_out(oc) {\n  Caml_io.caml_ml_flush(oc);\n  return Caml_external_polyfill.resolve(\"caml_ml_close_channel\")(oc);\n}\n\nfunction close_out_noerr(oc) {\n  try {\n    Caml_io.caml_ml_flush(oc);\n  } catch (exn) {}\n\n  try {\n    return Caml_external_polyfill.resolve(\"caml_ml_close_channel\")(oc);\n  } catch (exn$1) {\n    return (\n      /* () */\n      0\n    );\n  }\n}\n\nfunction open_in_gen(mode, perm, name) {\n  var c = Caml_external_polyfill.resolve(\"caml_ml_open_descriptor_in\")(Caml_external_polyfill.resolve(\"caml_sys_open\")(name, mode, perm));\n  Caml_external_polyfill.resolve(\"caml_ml_set_channel_name\")(c, name);\n  return c;\n}\n\nfunction open_in(name) {\n  return open_in_gen(\n  /* :: */\n  [\n  /* Open_rdonly */\n  0,\n  /* :: */\n  [\n  /* Open_text */\n  7,\n  /* [] */\n  0]], 0, name);\n}\n\nfunction open_in_bin(name) {\n  return open_in_gen(\n  /* :: */\n  [\n  /* Open_rdonly */\n  0,\n  /* :: */\n  [\n  /* Open_binary */\n  6,\n  /* [] */\n  0]], 0, name);\n}\n\nfunction input(ic, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"input\"];\n  }\n\n  return Caml_external_polyfill.resolve(\"caml_ml_input\")(ic, s, ofs, len);\n}\n\nfunction unsafe_really_input(ic, s, _ofs, _len) {\n  while (true) {\n    var len = _len;\n    var ofs = _ofs;\n\n    if (len <= 0) {\n      return (\n        /* () */\n        0\n      );\n    } else {\n      var r = Caml_external_polyfill.resolve(\"caml_ml_input\")(ic, s, ofs, len);\n\n      if (r === 0) {\n        throw Caml_builtin_exceptions.end_of_file;\n      }\n\n      _len = len - r | 0;\n      _ofs = ofs + r | 0;\n      continue;\n    }\n  }\n\n  ;\n}\n\nfunction really_input(ic, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"really_input\"];\n  }\n\n  return unsafe_really_input(ic, s, ofs, len);\n}\n\nfunction really_input_string(ic, len) {\n  var s = Caml_bytes.caml_create_bytes(len);\n  really_input(ic, s, 0, len);\n  return Caml_bytes.bytes_to_string(s);\n}\n\nfunction input_line(chan) {\n  var build_result = function build_result(buf, _pos, _param) {\n    while (true) {\n      var param = _param;\n      var pos = _pos;\n\n      if (param) {\n        var hd = param[0];\n        var len = hd.length;\n        Caml_bytes.caml_blit_bytes(hd, 0, buf, pos - len | 0, len);\n        _param = param[1];\n        _pos = pos - len | 0;\n        continue;\n      } else {\n        return buf;\n      }\n    }\n\n    ;\n  };\n\n  var scan = function scan(_accu, _len) {\n    while (true) {\n      var len = _len;\n      var accu = _accu;\n      var n = Caml_external_polyfill.resolve(\"caml_ml_input_scan_line\")(chan);\n\n      if (n === 0) {\n        if (accu) {\n          return build_result(Caml_bytes.caml_create_bytes(len), len, accu);\n        } else {\n          throw Caml_builtin_exceptions.end_of_file;\n        }\n      } else if (n > 0) {\n        var res = Caml_bytes.caml_create_bytes(n - 1 | 0);\n        Caml_external_polyfill.resolve(\"caml_ml_input\")(chan, res, 0, n - 1 | 0);\n        Caml_external_polyfill.resolve(\"caml_ml_input_char\")(chan);\n\n        if (accu) {\n          var len$1 = (len + n | 0) - 1 | 0;\n          return build_result(Caml_bytes.caml_create_bytes(len$1), len$1,\n          /* :: */\n          [res, accu]);\n        } else {\n          return res;\n        }\n      } else {\n        var beg = Caml_bytes.caml_create_bytes(-n | 0);\n        Caml_external_polyfill.resolve(\"caml_ml_input\")(chan, beg, 0, -n | 0);\n        _len = len - n | 0;\n        _accu =\n        /* :: */\n        [beg, accu];\n        continue;\n      }\n    }\n\n    ;\n  };\n\n  return Caml_bytes.bytes_to_string(scan(\n  /* [] */\n  0, 0));\n}\n\nfunction close_in_noerr(ic) {\n  try {\n    return Caml_external_polyfill.resolve(\"caml_ml_close_channel\")(ic);\n  } catch (exn) {\n    return (\n      /* () */\n      0\n    );\n  }\n}\n\nfunction print_char(c) {\n  return Caml_io.caml_ml_output_char(stdout, c);\n}\n\nfunction print_string(s) {\n  return output_string(stdout, s);\n}\n\nfunction print_bytes(s) {\n  return output_bytes(stdout, s);\n}\n\nfunction print_int(i) {\n  return output_string(stdout, String(i));\n}\n\nfunction print_float(f) {\n  return output_string(stdout, valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f)));\n}\n\nfunction print_newline(param) {\n  Caml_io.caml_ml_output_char(stdout,\n  /* \"\\n\" */\n  10);\n  return Caml_io.caml_ml_flush(stdout);\n}\n\nfunction prerr_char(c) {\n  return Caml_io.caml_ml_output_char(stderr, c);\n}\n\nfunction prerr_string(s) {\n  return output_string(stderr, s);\n}\n\nfunction prerr_bytes(s) {\n  return output_bytes(stderr, s);\n}\n\nfunction prerr_int(i) {\n  return output_string(stderr, String(i));\n}\n\nfunction prerr_float(f) {\n  return output_string(stderr, valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f)));\n}\n\nfunction prerr_newline(param) {\n  Caml_io.caml_ml_output_char(stderr,\n  /* \"\\n\" */\n  10);\n  return Caml_io.caml_ml_flush(stderr);\n}\n\nfunction read_line(param) {\n  Caml_io.caml_ml_flush(stdout);\n  return input_line(stdin);\n}\n\nfunction read_int(param) {\n  return Caml_format.caml_int_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));\n}\n\nfunction read_int_opt(param) {\n  return int_of_string_opt((Caml_io.caml_ml_flush(stdout), input_line(stdin)));\n}\n\nfunction read_float(param) {\n  return Caml_format.caml_float_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));\n}\n\nfunction read_float_opt(param) {\n  return float_of_string_opt((Caml_io.caml_ml_flush(stdout), input_line(stdin)));\n}\n\nfunction string_of_format(param) {\n  return param[1];\n}\n\nfunction $caret$caret(param, param$1) {\n  return (\n    /* Format */\n    [CamlinternalFormatBasics.concat_fmt(param[0], param$1[0]), param[1] + (\"%,\" + param$1[1])]\n  );\n}\n\nvar exit_function = {\n  contents: flush_all\n};\n\nfunction at_exit(f) {\n  var g = exit_function.contents;\n\n  exit_function.contents = function (param) {\n    Curry._1(f,\n    /* () */\n    0);\n\n    return Curry._1(g,\n    /* () */\n    0);\n  };\n\n  return (\n    /* () */\n    0\n  );\n}\n\nfunction do_at_exit(param) {\n  return Curry._1(exit_function.contents,\n  /* () */\n  0);\n}\n\nfunction exit(retcode) {\n  do_at_exit(\n  /* () */\n  0);\n  return Caml_sys.caml_sys_exit(retcode);\n}\n\nvar max_int = 2147483647;\nvar infinity = Infinity;\nvar neg_infinity = -Infinity;\nvar max_float = 1.79769313486231571e+308;\nvar min_float = 2.22507385850720138e-308;\nvar epsilon_float = 2.22044604925031308e-16;\nvar flush = Caml_io.caml_ml_flush;\nvar output_char = Caml_io.caml_ml_output_char;\nvar output_byte = Caml_io.caml_ml_output_char;\n\nfunction output_binary_int(prim, prim$1) {\n  return Caml_external_polyfill.resolve(\"caml_ml_output_int\")(prim, prim$1);\n}\n\nfunction seek_out(prim, prim$1) {\n  return Caml_external_polyfill.resolve(\"caml_ml_seek_out\")(prim, prim$1);\n}\n\nfunction pos_out(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_pos_out\")(prim);\n}\n\nfunction out_channel_length(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_channel_size\")(prim);\n}\n\nfunction set_binary_mode_out(prim, prim$1) {\n  return Caml_external_polyfill.resolve(\"caml_ml_set_binary_mode\")(prim, prim$1);\n}\n\nfunction input_char(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_input_char\")(prim);\n}\n\nfunction input_byte(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_input_char\")(prim);\n}\n\nfunction input_binary_int(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_input_int\")(prim);\n}\n\nfunction input_value(prim) {\n  return Caml_external_polyfill.resolve(\"caml_input_value\")(prim);\n}\n\nfunction seek_in(prim, prim$1) {\n  return Caml_external_polyfill.resolve(\"caml_ml_seek_in\")(prim, prim$1);\n}\n\nfunction pos_in(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_pos_in\")(prim);\n}\n\nfunction in_channel_length(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_channel_size\")(prim);\n}\n\nfunction close_in(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_close_channel\")(prim);\n}\n\nfunction set_binary_mode_in(prim, prim$1) {\n  return Caml_external_polyfill.resolve(\"caml_ml_set_binary_mode\")(prim, prim$1);\n}\n\nfunction LargeFile_seek_out(prim, prim$1) {\n  return Caml_external_polyfill.resolve(\"caml_ml_seek_out_64\")(prim, prim$1);\n}\n\nfunction LargeFile_pos_out(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_pos_out_64\")(prim);\n}\n\nfunction LargeFile_out_channel_length(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_channel_size_64\")(prim);\n}\n\nfunction LargeFile_seek_in(prim, prim$1) {\n  return Caml_external_polyfill.resolve(\"caml_ml_seek_in_64\")(prim, prim$1);\n}\n\nfunction LargeFile_pos_in(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_pos_in_64\")(prim);\n}\n\nfunction LargeFile_in_channel_length(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_channel_size_64\")(prim);\n}\n\nvar LargeFile = {\n  seek_out: LargeFile_seek_out,\n  pos_out: LargeFile_pos_out,\n  out_channel_length: LargeFile_out_channel_length,\n  seek_in: LargeFile_seek_in,\n  pos_in: LargeFile_pos_in,\n  in_channel_length: LargeFile_in_channel_length\n};\nexports.invalid_arg = invalid_arg;\nexports.failwith = failwith;\nexports.Exit = Exit;\nexports.abs = abs;\nexports.max_int = max_int;\nexports.min_int = min_int;\nexports.lnot = lnot;\nexports.infinity = infinity;\nexports.neg_infinity = neg_infinity;\nexports.max_float = max_float;\nexports.min_float = min_float;\nexports.epsilon_float = epsilon_float;\nexports.classify_float = classify_float;\nexports.char_of_int = char_of_int;\nexports.string_of_bool = string_of_bool;\nexports.bool_of_string = bool_of_string;\nexports.bool_of_string_opt = bool_of_string_opt;\nexports.int_of_string_opt = int_of_string_opt;\nexports.string_of_float = string_of_float;\nexports.float_of_string_opt = float_of_string_opt;\nexports.$at = $at;\nexports.stdin = stdin;\nexports.stdout = stdout;\nexports.stderr = stderr;\nexports.print_char = print_char;\nexports.print_string = print_string;\nexports.print_bytes = print_bytes;\nexports.print_int = print_int;\nexports.print_float = print_float;\nexports.print_newline = print_newline;\nexports.prerr_char = prerr_char;\nexports.prerr_string = prerr_string;\nexports.prerr_bytes = prerr_bytes;\nexports.prerr_int = prerr_int;\nexports.prerr_float = prerr_float;\nexports.prerr_newline = prerr_newline;\nexports.read_line = read_line;\nexports.read_int = read_int;\nexports.read_int_opt = read_int_opt;\nexports.read_float = read_float;\nexports.read_float_opt = read_float_opt;\nexports.open_out = open_out;\nexports.open_out_bin = open_out_bin;\nexports.open_out_gen = open_out_gen;\nexports.flush = flush;\nexports.flush_all = flush_all;\nexports.output_char = output_char;\nexports.output_string = output_string;\nexports.output_bytes = output_bytes;\nexports.output = output;\nexports.output_substring = output_substring;\nexports.output_byte = output_byte;\nexports.output_binary_int = output_binary_int;\nexports.output_value = output_value;\nexports.seek_out = seek_out;\nexports.pos_out = pos_out;\nexports.out_channel_length = out_channel_length;\nexports.close_out = close_out;\nexports.close_out_noerr = close_out_noerr;\nexports.set_binary_mode_out = set_binary_mode_out;\nexports.open_in = open_in;\nexports.open_in_bin = open_in_bin;\nexports.open_in_gen = open_in_gen;\nexports.input_char = input_char;\nexports.input_line = input_line;\nexports.input = input;\nexports.really_input = really_input;\nexports.really_input_string = really_input_string;\nexports.input_byte = input_byte;\nexports.input_binary_int = input_binary_int;\nexports.input_value = input_value;\nexports.seek_in = seek_in;\nexports.pos_in = pos_in;\nexports.in_channel_length = in_channel_length;\nexports.close_in = close_in;\nexports.close_in_noerr = close_in_noerr;\nexports.set_binary_mode_in = set_binary_mode_in;\nexports.LargeFile = LargeFile;\nexports.string_of_format = string_of_format;\nexports.$caret$caret = $caret$caret;\nexports.exit = exit;\nexports.at_exit = at_exit;\nexports.valid_float_lexem = valid_float_lexem;\nexports.unsafe_really_input = unsafe_really_input;\nexports.do_at_exit = do_at_exit;\n/* No side effect */","map":null,"metadata":{},"sourceType":"module"}