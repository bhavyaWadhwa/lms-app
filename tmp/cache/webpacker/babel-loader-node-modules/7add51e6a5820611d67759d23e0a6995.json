{"ast":null,"code":"'use strict';\n\nvar Belt_internalAVLset = require(\"./belt_internalAVLset.js\");\n\nvar Belt_internalSetString = require(\"./belt_internalSetString.js\");\n\nfunction add(t, x) {\n  if (t !== null) {\n    var v = t.value;\n\n    if (x === v) {\n      return t;\n    } else {\n      var l = t.left;\n      var r = t.right;\n\n      if (x < v) {\n        var ll = add(l, x);\n\n        if (ll === l) {\n          return t;\n        } else {\n          return Belt_internalAVLset.bal(ll, v, r);\n        }\n      } else {\n        var rr = add(r, x);\n\n        if (rr === r) {\n          return t;\n        } else {\n          return Belt_internalAVLset.bal(l, v, rr);\n        }\n      }\n    }\n  } else {\n    return Belt_internalAVLset.singleton(x);\n  }\n}\n\nfunction mergeMany(h, arr) {\n  var len = arr.length;\n  var v = h;\n\n  for (var i = 0, i_finish = len - 1 | 0; i <= i_finish; ++i) {\n    var key = arr[i];\n    v = add(v, key);\n  }\n\n  return v;\n}\n\nfunction remove(t, x) {\n  if (t !== null) {\n    var l = t.left;\n    var v = t.value;\n    var r = t.right;\n\n    if (x === v) {\n      if (l !== null) {\n        if (r !== null) {\n          var v$1 = {\n            contents: r.value\n          };\n          var r$1 = Belt_internalAVLset.removeMinAuxWithRef(r, v$1);\n          return Belt_internalAVLset.bal(l, v$1.contents, r$1);\n        } else {\n          return l;\n        }\n      } else {\n        return r;\n      }\n    } else if (x < v) {\n      var ll = remove(l, x);\n\n      if (ll === l) {\n        return t;\n      } else {\n        return Belt_internalAVLset.bal(ll, v, r);\n      }\n    } else {\n      var rr = remove(r, x);\n\n      if (rr === r) {\n        return t;\n      } else {\n        return Belt_internalAVLset.bal(l, v, rr);\n      }\n    }\n  } else {\n    return t;\n  }\n}\n\nfunction removeMany(h, arr) {\n  var len = arr.length;\n  var v = h;\n\n  for (var i = 0, i_finish = len - 1 | 0; i <= i_finish; ++i) {\n    var key = arr[i];\n    v = remove(v, key);\n  }\n\n  return v;\n}\n\nfunction splitAuxNoPivot(n, x) {\n  var l = n.left;\n  var v = n.value;\n  var r = n.right;\n\n  if (x === v) {\n    return (\n      /* tuple */\n      [l, r]\n    );\n  } else if (x < v) {\n    if (l !== null) {\n      var match = splitAuxNoPivot(l, x);\n      return (\n        /* tuple */\n        [match[0], Belt_internalAVLset.joinShared(match[1], v, r)]\n      );\n    } else {\n      return (\n        /* tuple */\n        [null, n]\n      );\n    }\n  } else if (r !== null) {\n    var match$1 = splitAuxNoPivot(r, x);\n    return (\n      /* tuple */\n      [Belt_internalAVLset.joinShared(l, v, match$1[0]), match$1[1]]\n    );\n  } else {\n    return (\n      /* tuple */\n      [n, null]\n    );\n  }\n}\n\nfunction splitAuxPivot(n, x, pres) {\n  var l = n.left;\n  var v = n.value;\n  var r = n.right;\n\n  if (x === v) {\n    pres.contents = true;\n    return (\n      /* tuple */\n      [l, r]\n    );\n  } else if (x < v) {\n    if (l !== null) {\n      var match = splitAuxPivot(l, x, pres);\n      return (\n        /* tuple */\n        [match[0], Belt_internalAVLset.joinShared(match[1], v, r)]\n      );\n    } else {\n      return (\n        /* tuple */\n        [null, n]\n      );\n    }\n  } else if (r !== null) {\n    var match$1 = splitAuxPivot(r, x, pres);\n    return (\n      /* tuple */\n      [Belt_internalAVLset.joinShared(l, v, match$1[0]), match$1[1]]\n    );\n  } else {\n    return (\n      /* tuple */\n      [n, null]\n    );\n  }\n}\n\nfunction split(t, x) {\n  if (t !== null) {\n    var pres = {\n      contents: false\n    };\n    var v = splitAuxPivot(t, x, pres);\n    return (\n      /* tuple */\n      [v, pres.contents]\n    );\n  } else {\n    return (\n      /* tuple */\n      [\n      /* tuple */\n      [null, null], false]\n    );\n  }\n}\n\nfunction union(s1, s2) {\n  if (s1 !== null) {\n    if (s2 !== null) {\n      var h1 = s1.height;\n      var h2 = s2.height;\n\n      if (h1 >= h2) {\n        if (h2 === 1) {\n          return add(s1, s2.value);\n        } else {\n          var l1 = s1.left;\n          var v1 = s1.value;\n          var r1 = s1.right;\n          var match = splitAuxNoPivot(s2, v1);\n          return Belt_internalAVLset.joinShared(union(l1, match[0]), v1, union(r1, match[1]));\n        }\n      } else if (h1 === 1) {\n        return add(s2, s1.value);\n      } else {\n        var l2 = s2.left;\n        var v2 = s2.value;\n        var r2 = s2.right;\n        var match$1 = splitAuxNoPivot(s1, v2);\n        return Belt_internalAVLset.joinShared(union(match$1[0], l2), v2, union(match$1[1], r2));\n      }\n    } else {\n      return s1;\n    }\n  } else {\n    return s2;\n  }\n}\n\nfunction intersect(s1, s2) {\n  if (s1 !== null && s2 !== null) {\n    var l1 = s1.left;\n    var v1 = s1.value;\n    var r1 = s1.right;\n    var pres = {\n      contents: false\n    };\n    var match = splitAuxPivot(s2, v1, pres);\n    var ll = intersect(l1, match[0]);\n    var rr = intersect(r1, match[1]);\n\n    if (pres.contents) {\n      return Belt_internalAVLset.joinShared(ll, v1, rr);\n    } else {\n      return Belt_internalAVLset.concatShared(ll, rr);\n    }\n  } else {\n    return null;\n  }\n}\n\nfunction diff(s1, s2) {\n  if (s1 !== null && s2 !== null) {\n    var l1 = s1.left;\n    var v1 = s1.value;\n    var r1 = s1.right;\n    var pres = {\n      contents: false\n    };\n    var match = splitAuxPivot(s2, v1, pres);\n    var ll = diff(l1, match[0]);\n    var rr = diff(r1, match[1]);\n\n    if (pres.contents) {\n      return Belt_internalAVLset.concatShared(ll, rr);\n    } else {\n      return Belt_internalAVLset.joinShared(ll, v1, rr);\n    }\n  } else {\n    return s1;\n  }\n}\n\nvar empty = null;\nvar fromArray = Belt_internalSetString.fromArray;\nvar fromSortedArrayUnsafe = Belt_internalAVLset.fromSortedArrayUnsafe;\nvar isEmpty = Belt_internalAVLset.isEmpty;\nvar has = Belt_internalSetString.has;\nvar subset = Belt_internalSetString.subset;\nvar cmp = Belt_internalSetString.cmp;\nvar eq = Belt_internalSetString.eq;\nvar forEachU = Belt_internalAVLset.forEachU;\nvar forEach = Belt_internalAVLset.forEach;\nvar reduceU = Belt_internalAVLset.reduceU;\nvar reduce = Belt_internalAVLset.reduce;\nvar everyU = Belt_internalAVLset.everyU;\nvar every = Belt_internalAVLset.every;\nvar someU = Belt_internalAVLset.someU;\nvar some = Belt_internalAVLset.some;\nvar keepU = Belt_internalAVLset.keepSharedU;\nvar keep = Belt_internalAVLset.keepShared;\nvar partitionU = Belt_internalAVLset.partitionSharedU;\nvar partition = Belt_internalAVLset.partitionShared;\nvar size = Belt_internalAVLset.size;\nvar toList = Belt_internalAVLset.toList;\nvar toArray = Belt_internalAVLset.toArray;\nvar minimum = Belt_internalAVLset.minimum;\nvar minUndefined = Belt_internalAVLset.minUndefined;\nvar maximum = Belt_internalAVLset.maximum;\nvar maxUndefined = Belt_internalAVLset.maxUndefined;\nvar get = Belt_internalSetString.get;\nvar getUndefined = Belt_internalSetString.getUndefined;\nvar getExn = Belt_internalSetString.getExn;\nvar checkInvariantInternal = Belt_internalAVLset.checkInvariantInternal;\nexports.empty = empty;\nexports.fromArray = fromArray;\nexports.fromSortedArrayUnsafe = fromSortedArrayUnsafe;\nexports.isEmpty = isEmpty;\nexports.has = has;\nexports.add = add;\nexports.mergeMany = mergeMany;\nexports.remove = remove;\nexports.removeMany = removeMany;\nexports.union = union;\nexports.intersect = intersect;\nexports.diff = diff;\nexports.subset = subset;\nexports.cmp = cmp;\nexports.eq = eq;\nexports.forEachU = forEachU;\nexports.forEach = forEach;\nexports.reduceU = reduceU;\nexports.reduce = reduce;\nexports.everyU = everyU;\nexports.every = every;\nexports.someU = someU;\nexports.some = some;\nexports.keepU = keepU;\nexports.keep = keep;\nexports.partitionU = partitionU;\nexports.partition = partition;\nexports.size = size;\nexports.toList = toList;\nexports.toArray = toArray;\nexports.minimum = minimum;\nexports.minUndefined = minUndefined;\nexports.maximum = maximum;\nexports.maxUndefined = maxUndefined;\nexports.get = get;\nexports.getUndefined = getUndefined;\nexports.getExn = getExn;\nexports.split = split;\nexports.checkInvariantInternal = checkInvariantInternal;\n/* No side effect */","map":null,"metadata":{},"sourceType":"module"}