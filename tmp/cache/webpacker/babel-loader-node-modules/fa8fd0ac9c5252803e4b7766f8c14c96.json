{"ast":null,"code":"// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n'use strict';\n\nvar List = require(\"bs-platform/lib/js/list.js\");\n\nvar $$Array = require(\"bs-platform/lib/js/array.js\");\n\nvar Block = require(\"bs-platform/lib/js/block.js\");\n\nvar Curry = require(\"bs-platform/lib/js/curry.js\");\n\nvar Js_exn = require(\"bs-platform/lib/js/js_exn.js\");\n\nvar Js_dict = require(\"bs-platform/lib/js/js_dict.js\");\n\nvar Js_json = require(\"bs-platform/lib/js/js_json.js\");\n\nvar Js_option = require(\"bs-platform/lib/js/js_option.js\");\n\nvar ListUtils = require(\"../utils/ListUtils.bs.js\");\n\nvar ArrayUtils = require(\"../utils/ArrayUtils.bs.js\");\n\nvar Caml_option = require(\"bs-platform/lib/js/caml_option.js\");\n\nvar Json_decode = require(\"@glennsl/bs-json/src/Json_decode.bs.js\");\n\nvar Caml_exceptions = require(\"bs-platform/lib/js/caml_exceptions.js\");\n\nvar UnexpectedBlockType = Caml_exceptions.create(\"ContentBlock.UnexpectedBlockType\");\n\nfunction decodeMarkdownContent(json) {\n  return Json_decode.field(\"markdown\", Json_decode.string, json);\n}\n\nfunction decodeFileContent(json) {\n  return Json_decode.field(\"title\", Json_decode.string, json);\n}\n\nfunction decodeImageContent(json) {\n  return Json_decode.field(\"caption\", Json_decode.string, json);\n}\n\nfunction decodeEmbedContent(json) {\n  return (\n    /* tuple */\n    [Json_decode.field(\"url\", Json_decode.string, json), Json_decode.field(\"embedCode\", Json_decode.string, json)]\n  );\n}\n\nfunction decode(json) {\n  var unknownBlockType = Json_decode.field(\"blockType\", Json_decode.string, json);\n  var blockType;\n\n  switch (unknownBlockType) {\n    case \"embed\":\n      var match = Json_decode.field(\"content\", decodeEmbedContent, json);\n      blockType =\n      /* Embed */\n      Block.__(3, [match[0], match[1]]);\n      break;\n\n    case \"file\":\n      var title = Json_decode.field(\"content\", decodeFileContent, json);\n      var url = Json_decode.field(\"fileUrl\", Json_decode.string, json);\n      var filename = Json_decode.field(\"filename\", Json_decode.string, json);\n      blockType =\n      /* File */\n      Block.__(1, [url, title, filename]);\n      break;\n\n    case \"image\":\n      var caption = Json_decode.field(\"content\", decodeImageContent, json);\n      var url$1 = Json_decode.field(\"fileUrl\", Json_decode.string, json);\n      blockType =\n      /* Image */\n      Block.__(2, [url$1, caption]);\n      break;\n\n    case \"markdown\":\n      blockType =\n      /* Markdown */\n      Block.__(0, [Json_decode.field(\"content\", decodeMarkdownContent, json)]);\n      break;\n\n    default:\n      throw [UnexpectedBlockType, unknownBlockType];\n  }\n\n  return {\n    id: Json_decode.field(\"id\", Json_decode.string, json),\n    blockType: blockType,\n    sortIndex: Json_decode.field(\"sortIndex\", Json_decode.$$int, json)\n  };\n}\n\nfunction sort(blocks) {\n  return ArrayUtils.copyAndSort(function (x, y) {\n    return x.sortIndex - y.sortIndex | 0;\n  }, blocks);\n}\n\nfunction id(t) {\n  return t.id;\n}\n\nfunction blockType(t) {\n  return t.blockType;\n}\n\nfunction sortIndex(t) {\n  return t.sortIndex;\n}\n\nfunction makeMarkdownBlock(markdown) {\n  return (\n    /* Markdown */\n    Block.__(0, [markdown])\n  );\n}\n\nfunction makeImageBlock(fileUrl, caption) {\n  return (\n    /* Image */\n    Block.__(2, [fileUrl, caption])\n  );\n}\n\nfunction makeFileBlock(fileUrl, title, fileName) {\n  return (\n    /* File */\n    Block.__(1, [fileUrl, title, fileName])\n  );\n}\n\nfunction makeEmbedBlock(url, embedCode) {\n  return (\n    /* Embed */\n    Block.__(3, [url, embedCode])\n  );\n}\n\nfunction make(id, blockType, sortIndex) {\n  return {\n    id: id,\n    blockType: blockType,\n    sortIndex: sortIndex\n  };\n}\n\nfunction makeFromJs(js) {\n  var id = js.id;\n  var sortIndex = js.sortIndex;\n  var match = js.content;\n  var variant = match[0];\n  var blockType;\n\n  if (variant >= 905808084) {\n    if (variant >= 930824210) {\n      var content = match[1];\n      blockType =\n      /* Image */\n      Block.__(2, [content.url, content.caption]);\n    } else {\n      var content$1 = match[1];\n      blockType =\n      /* Embed */\n      Block.__(3, [content$1.url, content$1.embedCode]);\n    }\n  } else if (variant >= -240357442) {\n    blockType =\n    /* Markdown */\n    Block.__(0, [match[1].markdown]);\n  } else {\n    var content$2 = match[1];\n    blockType =\n    /* File */\n    Block.__(1, [content$2.url, content$2.title, content$2.filename]);\n  }\n\n  return {\n    id: id,\n    blockType: blockType,\n    sortIndex: sortIndex\n  };\n}\n\nfunction blockTypeAsString(blockType) {\n  switch (blockType.tag | 0) {\n    case\n    /* Markdown */\n    0:\n      return \"markdown\";\n\n    case\n    /* File */\n    1:\n      return \"file\";\n\n    case\n    /* Image */\n    2:\n      return \"image\";\n\n    case\n    /* Embed */\n    3:\n      return \"embed\";\n  }\n}\n\nfunction incrementSortIndex(t) {\n  return {\n    id: t.id,\n    blockType: t.blockType,\n    sortIndex: t.sortIndex + 1 | 0\n  };\n}\n\nfunction reindex(ts) {\n  return List.mapi(function (sortIndex, t) {\n    return {\n      id: t.id,\n      blockType: t.blockType,\n      sortIndex: sortIndex\n    };\n  }, ts);\n}\n\nfunction moveUp(t, ts) {\n  return $$Array.of_list(reindex(ListUtils.swapUp(t, $$Array.to_list(sort(ts)))));\n}\n\nfunction moveDown(t, ts) {\n  return $$Array.of_list(reindex(ListUtils.swapDown(t, $$Array.to_list(sort(ts)))));\n}\n\nfunction updateFile(title, t) {\n  var match = t.blockType;\n\n  if (match.tag ===\n  /* File */\n  1) {\n    return {\n      id: t.id,\n      blockType:\n      /* File */\n      Block.__(1, [match[0], title, match[2]]),\n      sortIndex: t.sortIndex\n    };\n  } else {\n    return t;\n  }\n}\n\nfunction updateImage(caption, t) {\n  var match = t.blockType;\n\n  if (match.tag ===\n  /* Image */\n  2) {\n    return {\n      id: t.id,\n      blockType:\n      /* Image */\n      Block.__(2, [match[0], caption]),\n      sortIndex: t.sortIndex\n    };\n  } else {\n    return t;\n  }\n}\n\nfunction updateMarkdown(markdown, t) {\n  var match = t.blockType;\n\n  if (match.tag) {\n    return t;\n  } else {\n    return {\n      id: t.id,\n      blockType:\n      /* Markdown */\n      Block.__(0, [markdown]),\n      sortIndex: t.sortIndex\n    };\n  }\n}\n\nvar ppx_printed_query = \"fragment allFields on ContentBlock   {\\nid  \\nblockType  \\nsortIndex  \\ncontent  {\\n__typename\\n...on ImageBlock   {\\ncaption  \\nurl  \\nfilename  \\n}\\n\\n...on FileBlock   {\\ntitle  \\nurl  \\nfilename  \\n}\\n\\n...on MarkdownBlock   {\\nmarkdown  \\n}\\n\\n...on EmbedBlock   {\\nurl  \\nembedCode  \\n}\\n\\n}\\n\\n}\\n\";\n\nfunction parse(value) {\n  var value$1 = Js_option.getExn(Js_json.decodeObject(value));\n  var match = Js_dict.get(value$1, \"id\");\n  var tmp;\n\n  if (match !== undefined) {\n    var value$2 = Caml_option.valFromOption(match);\n    var match$1 = Js_json.decodeString(value$2);\n    tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$2));\n  } else {\n    tmp = Js_exn.raiseError(\"graphql_ppx: Field id on type ContentBlock is missing\");\n  }\n\n  var match$2 = Js_dict.get(value$1, \"blockType\");\n  var tmp$1;\n\n  if (match$2 !== undefined) {\n    var value$3 = Caml_option.valFromOption(match$2);\n    var match$3 = Js_json.decodeString(value$3);\n    tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$3));\n  } else {\n    tmp$1 = Js_exn.raiseError(\"graphql_ppx: Field blockType on type ContentBlock is missing\");\n  }\n\n  var match$4 = Js_dict.get(value$1, \"sortIndex\");\n  var tmp$2;\n\n  if (match$4 !== undefined) {\n    var value$4 = Caml_option.valFromOption(match$4);\n    var match$5 = Js_json.decodeNumber(value$4);\n    tmp$2 = match$5 !== undefined ? match$5 | 0 : Js_exn.raiseError(\"graphql_ppx: Expected int, got \" + JSON.stringify(value$4));\n  } else {\n    tmp$2 = Js_exn.raiseError(\"graphql_ppx: Field sortIndex on type ContentBlock is missing\");\n  }\n\n  var match$6 = Js_dict.get(value$1, \"content\");\n  var tmp$3;\n\n  if (match$6 !== undefined) {\n    var value$5 = Caml_option.valFromOption(match$6);\n    var match$7 = Js_json.decodeObject(value$5);\n\n    if (match$7 !== undefined) {\n      var match$8 = Js_dict.get(Caml_option.valFromOption(match$7), \"__typename\");\n\n      if (match$8 !== undefined) {\n        var match$9 = Js_json.decodeString(Caml_option.valFromOption(match$8));\n\n        if (match$9 !== undefined) {\n          var typename = match$9;\n\n          switch (typename) {\n            case \"EmbedBlock\":\n              var value$6 = Js_option.getExn(Js_json.decodeObject(value$5));\n              var match$10 = Js_dict.get(value$6, \"url\");\n              var tmp$4;\n\n              if (match$10 !== undefined) {\n                var value$7 = Caml_option.valFromOption(match$10);\n                var match$11 = Js_json.decodeString(value$7);\n                tmp$4 = match$11 !== undefined ? match$11 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$7));\n              } else {\n                tmp$4 = Js_exn.raiseError(\"graphql_ppx: Field url on type EmbedBlock is missing\");\n              }\n\n              var match$12 = Js_dict.get(value$6, \"embedCode\");\n              var tmp$5;\n\n              if (match$12 !== undefined) {\n                var value$8 = Caml_option.valFromOption(match$12);\n                var match$13 = Js_json.decodeString(value$8);\n                tmp$5 = match$13 !== undefined ? match$13 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$8));\n              } else {\n                tmp$5 = Js_exn.raiseError(\"graphql_ppx: Field embedCode on type EmbedBlock is missing\");\n              }\n\n              tmp$3 =\n              /* `EmbedBlock */\n              [905808084, {\n                url: tmp$4,\n                embedCode: tmp$5\n              }];\n              break;\n\n            case \"FileBlock\":\n              var value$9 = Js_option.getExn(Js_json.decodeObject(value$5));\n              var match$14 = Js_dict.get(value$9, \"title\");\n              var tmp$6;\n\n              if (match$14 !== undefined) {\n                var value$10 = Caml_option.valFromOption(match$14);\n                var match$15 = Js_json.decodeString(value$10);\n                tmp$6 = match$15 !== undefined ? match$15 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$10));\n              } else {\n                tmp$6 = Js_exn.raiseError(\"graphql_ppx: Field title on type FileBlock is missing\");\n              }\n\n              var match$16 = Js_dict.get(value$9, \"url\");\n              var tmp$7;\n\n              if (match$16 !== undefined) {\n                var value$11 = Caml_option.valFromOption(match$16);\n                var match$17 = Js_json.decodeString(value$11);\n                tmp$7 = match$17 !== undefined ? match$17 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$11));\n              } else {\n                tmp$7 = Js_exn.raiseError(\"graphql_ppx: Field url on type FileBlock is missing\");\n              }\n\n              var match$18 = Js_dict.get(value$9, \"filename\");\n              var tmp$8;\n\n              if (match$18 !== undefined) {\n                var value$12 = Caml_option.valFromOption(match$18);\n                var match$19 = Js_json.decodeString(value$12);\n                tmp$8 = match$19 !== undefined ? match$19 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$12));\n              } else {\n                tmp$8 = Js_exn.raiseError(\"graphql_ppx: Field filename on type FileBlock is missing\");\n              }\n\n              tmp$3 =\n              /* `FileBlock */\n              [-654904047, {\n                title: tmp$6,\n                url: tmp$7,\n                filename: tmp$8\n              }];\n              break;\n\n            case \"ImageBlock\":\n              var value$13 = Js_option.getExn(Js_json.decodeObject(value$5));\n              var match$20 = Js_dict.get(value$13, \"caption\");\n              var tmp$9;\n\n              if (match$20 !== undefined) {\n                var value$14 = Caml_option.valFromOption(match$20);\n                var match$21 = Js_json.decodeString(value$14);\n                tmp$9 = match$21 !== undefined ? match$21 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$14));\n              } else {\n                tmp$9 = Js_exn.raiseError(\"graphql_ppx: Field caption on type ImageBlock is missing\");\n              }\n\n              var match$22 = Js_dict.get(value$13, \"url\");\n              var tmp$10;\n\n              if (match$22 !== undefined) {\n                var value$15 = Caml_option.valFromOption(match$22);\n                var match$23 = Js_json.decodeString(value$15);\n                tmp$10 = match$23 !== undefined ? match$23 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$15));\n              } else {\n                tmp$10 = Js_exn.raiseError(\"graphql_ppx: Field url on type ImageBlock is missing\");\n              }\n\n              var match$24 = Js_dict.get(value$13, \"filename\");\n              var tmp$11;\n\n              if (match$24 !== undefined) {\n                var value$16 = Caml_option.valFromOption(match$24);\n                var match$25 = Js_json.decodeString(value$16);\n                tmp$11 = match$25 !== undefined ? match$25 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$16));\n              } else {\n                tmp$11 = Js_exn.raiseError(\"graphql_ppx: Field filename on type ImageBlock is missing\");\n              }\n\n              tmp$3 =\n              /* `ImageBlock */\n              [930824210, {\n                caption: tmp$9,\n                url: tmp$10,\n                filename: tmp$11\n              }];\n              break;\n\n            case \"MarkdownBlock\":\n              var value$17 = Js_option.getExn(Js_json.decodeObject(value$5));\n              var match$26 = Js_dict.get(value$17, \"markdown\");\n              var tmp$12;\n\n              if (match$26 !== undefined) {\n                var value$18 = Caml_option.valFromOption(match$26);\n                var match$27 = Js_json.decodeString(value$18);\n                tmp$12 = match$27 !== undefined ? match$27 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$18));\n              } else {\n                tmp$12 = Js_exn.raiseError(\"graphql_ppx: Field markdown on type MarkdownBlock is missing\");\n              }\n\n              tmp$3 =\n              /* `MarkdownBlock */\n              [-240357442, {\n                markdown: tmp$12\n              }];\n              break;\n\n            default:\n              tmp$3 = Js_exn.raiseError(\"graphql_ppx: Union Content returned unknown type \" + typename);\n          }\n        } else {\n          tmp$3 = Js_exn.raiseError(\"graphql_ppx: Union Content has a __typename field that is not a string\");\n        }\n      } else {\n        tmp$3 = Js_exn.raiseError(\"graphql_ppx: Union Content is missing the __typename field\");\n      }\n    } else {\n      tmp$3 = Js_exn.raiseError(\"graphql_ppx: Expected union Content to be an object, got \" + JSON.stringify(value$5));\n    }\n  } else {\n    tmp$3 = Js_exn.raiseError(\"graphql_ppx: Field content on type ContentBlock is missing\");\n  }\n\n  return {\n    id: tmp,\n    blockType: tmp$1,\n    sortIndex: tmp$2,\n    content: tmp$3\n  };\n}\n\nfunction ret_type(f) {\n  return {};\n}\n\nvar MT_Ret = {};\nvar AllFields = {\n  ppx_printed_query: ppx_printed_query,\n  query: ppx_printed_query,\n  parse: parse,\n  name: \"allFields\",\n  ret_type: ret_type,\n  MT_Ret: MT_Ret\n};\nvar Fragments = {\n  AllFields: AllFields\n};\nvar ppx_printed_query$1 = \"query ContentBlocksWithVersionsQuery($targetId: ID!, $targetVersionId: ID)  {\\ncontentBlocks(targetId: $targetId, targetVersionId: $targetVersionId)  {\\nid  \\nblockType  \\nsortIndex  \\ncontent  {\\n__typename\\n...on ImageBlock   {\\ncaption  \\nurl  \\nfilename  \\n}\\n\\n...on FileBlock   {\\ntitle  \\nurl  \\nfilename  \\n}\\n\\n...on MarkdownBlock   {\\nmarkdown  \\n}\\n\\n...on EmbedBlock   {\\nurl  \\nembedCode  \\n}\\n\\n}\\n\\n}\\n\\ntargetVersions(targetId: $targetId)  {\\nid  \\ncreatedAt  \\nupdatedAt  \\n}\\n\\n}\\n\";\n\nfunction parse$1(value) {\n  var value$1 = Js_option.getExn(Js_json.decodeObject(value));\n  var match = Js_dict.get(value$1, \"contentBlocks\");\n  var match$1 = Js_dict.get(value$1, \"targetVersions\");\n  return {\n    contentBlocks: match !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match))).map(function (value) {\n      var value$1 = Js_option.getExn(Js_json.decodeObject(value));\n      var match = Js_dict.get(value$1, \"id\");\n      var tmp;\n\n      if (match !== undefined) {\n        var value$2 = Caml_option.valFromOption(match);\n        var match$1 = Js_json.decodeString(value$2);\n        tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$2));\n      } else {\n        tmp = Js_exn.raiseError(\"graphql_ppx: Field id on type ContentBlock is missing\");\n      }\n\n      var match$2 = Js_dict.get(value$1, \"blockType\");\n      var tmp$1;\n\n      if (match$2 !== undefined) {\n        var value$3 = Caml_option.valFromOption(match$2);\n        var match$3 = Js_json.decodeString(value$3);\n        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$3));\n      } else {\n        tmp$1 = Js_exn.raiseError(\"graphql_ppx: Field blockType on type ContentBlock is missing\");\n      }\n\n      var match$4 = Js_dict.get(value$1, \"sortIndex\");\n      var tmp$2;\n\n      if (match$4 !== undefined) {\n        var value$4 = Caml_option.valFromOption(match$4);\n        var match$5 = Js_json.decodeNumber(value$4);\n        tmp$2 = match$5 !== undefined ? match$5 | 0 : Js_exn.raiseError(\"graphql_ppx: Expected int, got \" + JSON.stringify(value$4));\n      } else {\n        tmp$2 = Js_exn.raiseError(\"graphql_ppx: Field sortIndex on type ContentBlock is missing\");\n      }\n\n      var match$6 = Js_dict.get(value$1, \"content\");\n      var tmp$3;\n\n      if (match$6 !== undefined) {\n        var value$5 = Caml_option.valFromOption(match$6);\n        var match$7 = Js_json.decodeObject(value$5);\n\n        if (match$7 !== undefined) {\n          var match$8 = Js_dict.get(Caml_option.valFromOption(match$7), \"__typename\");\n\n          if (match$8 !== undefined) {\n            var match$9 = Js_json.decodeString(Caml_option.valFromOption(match$8));\n\n            if (match$9 !== undefined) {\n              var typename = match$9;\n\n              switch (typename) {\n                case \"EmbedBlock\":\n                  var value$6 = Js_option.getExn(Js_json.decodeObject(value$5));\n                  var match$10 = Js_dict.get(value$6, \"url\");\n                  var tmp$4;\n\n                  if (match$10 !== undefined) {\n                    var value$7 = Caml_option.valFromOption(match$10);\n                    var match$11 = Js_json.decodeString(value$7);\n                    tmp$4 = match$11 !== undefined ? match$11 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$7));\n                  } else {\n                    tmp$4 = Js_exn.raiseError(\"graphql_ppx: Field url on type EmbedBlock is missing\");\n                  }\n\n                  var match$12 = Js_dict.get(value$6, \"embedCode\");\n                  var tmp$5;\n\n                  if (match$12 !== undefined) {\n                    var value$8 = Caml_option.valFromOption(match$12);\n                    var match$13 = Js_json.decodeString(value$8);\n                    tmp$5 = match$13 !== undefined ? match$13 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$8));\n                  } else {\n                    tmp$5 = Js_exn.raiseError(\"graphql_ppx: Field embedCode on type EmbedBlock is missing\");\n                  }\n\n                  tmp$3 =\n                  /* `EmbedBlock */\n                  [905808084, {\n                    url: tmp$4,\n                    embedCode: tmp$5\n                  }];\n                  break;\n\n                case \"FileBlock\":\n                  var value$9 = Js_option.getExn(Js_json.decodeObject(value$5));\n                  var match$14 = Js_dict.get(value$9, \"title\");\n                  var tmp$6;\n\n                  if (match$14 !== undefined) {\n                    var value$10 = Caml_option.valFromOption(match$14);\n                    var match$15 = Js_json.decodeString(value$10);\n                    tmp$6 = match$15 !== undefined ? match$15 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$10));\n                  } else {\n                    tmp$6 = Js_exn.raiseError(\"graphql_ppx: Field title on type FileBlock is missing\");\n                  }\n\n                  var match$16 = Js_dict.get(value$9, \"url\");\n                  var tmp$7;\n\n                  if (match$16 !== undefined) {\n                    var value$11 = Caml_option.valFromOption(match$16);\n                    var match$17 = Js_json.decodeString(value$11);\n                    tmp$7 = match$17 !== undefined ? match$17 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$11));\n                  } else {\n                    tmp$7 = Js_exn.raiseError(\"graphql_ppx: Field url on type FileBlock is missing\");\n                  }\n\n                  var match$18 = Js_dict.get(value$9, \"filename\");\n                  var tmp$8;\n\n                  if (match$18 !== undefined) {\n                    var value$12 = Caml_option.valFromOption(match$18);\n                    var match$19 = Js_json.decodeString(value$12);\n                    tmp$8 = match$19 !== undefined ? match$19 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$12));\n                  } else {\n                    tmp$8 = Js_exn.raiseError(\"graphql_ppx: Field filename on type FileBlock is missing\");\n                  }\n\n                  tmp$3 =\n                  /* `FileBlock */\n                  [-654904047, {\n                    title: tmp$6,\n                    url: tmp$7,\n                    filename: tmp$8\n                  }];\n                  break;\n\n                case \"ImageBlock\":\n                  var value$13 = Js_option.getExn(Js_json.decodeObject(value$5));\n                  var match$20 = Js_dict.get(value$13, \"caption\");\n                  var tmp$9;\n\n                  if (match$20 !== undefined) {\n                    var value$14 = Caml_option.valFromOption(match$20);\n                    var match$21 = Js_json.decodeString(value$14);\n                    tmp$9 = match$21 !== undefined ? match$21 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$14));\n                  } else {\n                    tmp$9 = Js_exn.raiseError(\"graphql_ppx: Field caption on type ImageBlock is missing\");\n                  }\n\n                  var match$22 = Js_dict.get(value$13, \"url\");\n                  var tmp$10;\n\n                  if (match$22 !== undefined) {\n                    var value$15 = Caml_option.valFromOption(match$22);\n                    var match$23 = Js_json.decodeString(value$15);\n                    tmp$10 = match$23 !== undefined ? match$23 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$15));\n                  } else {\n                    tmp$10 = Js_exn.raiseError(\"graphql_ppx: Field url on type ImageBlock is missing\");\n                  }\n\n                  var match$24 = Js_dict.get(value$13, \"filename\");\n                  var tmp$11;\n\n                  if (match$24 !== undefined) {\n                    var value$16 = Caml_option.valFromOption(match$24);\n                    var match$25 = Js_json.decodeString(value$16);\n                    tmp$11 = match$25 !== undefined ? match$25 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$16));\n                  } else {\n                    tmp$11 = Js_exn.raiseError(\"graphql_ppx: Field filename on type ImageBlock is missing\");\n                  }\n\n                  tmp$3 =\n                  /* `ImageBlock */\n                  [930824210, {\n                    caption: tmp$9,\n                    url: tmp$10,\n                    filename: tmp$11\n                  }];\n                  break;\n\n                case \"MarkdownBlock\":\n                  var value$17 = Js_option.getExn(Js_json.decodeObject(value$5));\n                  var match$26 = Js_dict.get(value$17, \"markdown\");\n                  var tmp$12;\n\n                  if (match$26 !== undefined) {\n                    var value$18 = Caml_option.valFromOption(match$26);\n                    var match$27 = Js_json.decodeString(value$18);\n                    tmp$12 = match$27 !== undefined ? match$27 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$18));\n                  } else {\n                    tmp$12 = Js_exn.raiseError(\"graphql_ppx: Field markdown on type MarkdownBlock is missing\");\n                  }\n\n                  tmp$3 =\n                  /* `MarkdownBlock */\n                  [-240357442, {\n                    markdown: tmp$12\n                  }];\n                  break;\n\n                default:\n                  tmp$3 = Js_exn.raiseError(\"graphql_ppx: Union Content returned unknown type \" + typename);\n              }\n            } else {\n              tmp$3 = Js_exn.raiseError(\"graphql_ppx: Union Content has a __typename field that is not a string\");\n            }\n          } else {\n            tmp$3 = Js_exn.raiseError(\"graphql_ppx: Union Content is missing the __typename field\");\n          }\n        } else {\n          tmp$3 = Js_exn.raiseError(\"graphql_ppx: Expected union Content to be an object, got \" + JSON.stringify(value$5));\n        }\n      } else {\n        tmp$3 = Js_exn.raiseError(\"graphql_ppx: Field content on type ContentBlock is missing\");\n      }\n\n      return {\n        id: tmp,\n        blockType: tmp$1,\n        sortIndex: tmp$2,\n        content: tmp$3\n      };\n    }) : Js_exn.raiseError(\"graphql_ppx: Field contentBlocks on type Query is missing\"),\n    targetVersions: match$1 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$1))).map(function (value) {\n      var value$1 = Js_option.getExn(Js_json.decodeObject(value));\n      var match = Js_dict.get(value$1, \"id\");\n      var tmp;\n\n      if (match !== undefined) {\n        var value$2 = Caml_option.valFromOption(match);\n        var match$1 = Js_json.decodeString(value$2);\n        tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$2));\n      } else {\n        tmp = Js_exn.raiseError(\"graphql_ppx: Field id on type TargetVersion is missing\");\n      }\n\n      var match$2 = Js_dict.get(value$1, \"createdAt\");\n      var match$3 = Js_dict.get(value$1, \"updatedAt\");\n      return {\n        id: tmp,\n        createdAt: match$2 !== undefined ? Caml_option.valFromOption(match$2) : Js_exn.raiseError(\"graphql_ppx: Field createdAt on type TargetVersion is missing\"),\n        updatedAt: match$3 !== undefined ? Caml_option.valFromOption(match$3) : Js_exn.raiseError(\"graphql_ppx: Field updatedAt on type TargetVersion is missing\")\n      };\n    }) : Js_exn.raiseError(\"graphql_ppx: Field targetVersions on type Query is missing\")\n  };\n}\n\nfunction make$1(targetId, targetVersionId, param) {\n  return {\n    query: ppx_printed_query$1,\n    variables: Js_dict.fromArray([\n    /* tuple */\n    [\"targetId\", targetId],\n    /* tuple */\n    [\"targetVersionId\", targetVersionId !== undefined ? targetVersionId : null]].filter(function (param) {\n      return !Js_json.test(param[1],\n      /* Null */\n      5);\n    })),\n    parse: parse$1\n  };\n}\n\nfunction makeWithVariables(variables) {\n  var targetId = variables.targetId;\n  var targetVersionId = variables.targetVersionId;\n  return {\n    query: ppx_printed_query$1,\n    variables: Js_dict.fromArray([\n    /* tuple */\n    [\"targetId\", targetId],\n    /* tuple */\n    [\"targetVersionId\", targetVersionId !== undefined ? targetVersionId : null]].filter(function (param) {\n      return !Js_json.test(param[1],\n      /* Null */\n      5);\n    })),\n    parse: parse$1\n  };\n}\n\nfunction makeVariables(targetId, targetVersionId, param) {\n  return Js_dict.fromArray([\n  /* tuple */\n  [\"targetId\", targetId],\n  /* tuple */\n  [\"targetVersionId\", targetVersionId !== undefined ? targetVersionId : null]].filter(function (param) {\n    return !Js_json.test(param[1],\n    /* Null */\n    5);\n  }));\n}\n\nfunction definition_002(graphql_ppx_use_json_variables_fn, targetId, targetVersionId, param) {\n  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([\n  /* tuple */\n  [\"targetId\", targetId],\n  /* tuple */\n  [\"targetVersionId\", targetVersionId !== undefined ? targetVersionId : null]].filter(function (param) {\n    return !Js_json.test(param[1],\n    /* Null */\n    5);\n  })));\n}\n\nvar definition =\n/* tuple */\n[parse$1, ppx_printed_query$1, definition_002];\n\nfunction ret_type$1(f) {\n  return {};\n}\n\nvar MT_Ret$1 = {};\nvar Query = {\n  ppx_printed_query: ppx_printed_query$1,\n  query: ppx_printed_query$1,\n  parse: parse$1,\n  make: make$1,\n  makeWithVariables: makeWithVariables,\n  makeVariables: makeVariables,\n  definition: definition,\n  ret_type: ret_type$1,\n  MT_Ret: MT_Ret$1\n};\nexports.UnexpectedBlockType = UnexpectedBlockType;\nexports.decodeMarkdownContent = decodeMarkdownContent;\nexports.decodeFileContent = decodeFileContent;\nexports.decodeImageContent = decodeImageContent;\nexports.decodeEmbedContent = decodeEmbedContent;\nexports.decode = decode;\nexports.sort = sort;\nexports.id = id;\nexports.blockType = blockType;\nexports.sortIndex = sortIndex;\nexports.makeMarkdownBlock = makeMarkdownBlock;\nexports.makeImageBlock = makeImageBlock;\nexports.makeFileBlock = makeFileBlock;\nexports.makeEmbedBlock = makeEmbedBlock;\nexports.make = make;\nexports.makeFromJs = makeFromJs;\nexports.blockTypeAsString = blockTypeAsString;\nexports.incrementSortIndex = incrementSortIndex;\nexports.reindex = reindex;\nexports.moveUp = moveUp;\nexports.moveDown = moveDown;\nexports.updateFile = updateFile;\nexports.updateImage = updateImage;\nexports.updateMarkdown = updateMarkdown;\nexports.Fragments = Fragments;\nexports.Query = Query;\n/* ArrayUtils Not a pure module */","map":{"version":3,"sources":["/home/kochar/Documents/pupilfirst-master/app/javascript/shared/types/ContentBlock.bs.js"],"names":["List","require","$$Array","Block","Curry","Js_exn","Js_dict","Js_json","Js_option","ListUtils","ArrayUtils","Caml_option","Json_decode","Caml_exceptions","UnexpectedBlockType","create","decodeMarkdownContent","json","field","string","decodeFileContent","decodeImageContent","decodeEmbedContent","decode","unknownBlockType","blockType","match","__","title","url","filename","caption","url$1","id","sortIndex","$$int","sort","blocks","copyAndSort","x","y","t","makeMarkdownBlock","markdown","makeImageBlock","fileUrl","makeFileBlock","fileName","makeEmbedBlock","embedCode","make","makeFromJs","js","content","variant","content$1","content$2","blockTypeAsString","tag","incrementSortIndex","reindex","ts","mapi","moveUp","of_list","swapUp","to_list","moveDown","swapDown","updateFile","updateImage","updateMarkdown","ppx_printed_query","parse","value","value$1","getExn","decodeObject","get","tmp","undefined","value$2","valFromOption","match$1","decodeString","raiseError","JSON","stringify","match$2","tmp$1","value$3","match$3","match$4","tmp$2","value$4","match$5","decodeNumber","match$6","tmp$3","value$5","match$7","match$8","match$9","typename","value$6","match$10","tmp$4","value$7","match$11","match$12","tmp$5","value$8","match$13","value$9","match$14","tmp$6","value$10","match$15","match$16","tmp$7","value$11","match$17","match$18","tmp$8","value$12","match$19","value$13","match$20","tmp$9","value$14","match$21","match$22","tmp$10","value$15","match$23","match$24","tmp$11","value$16","match$25","value$17","match$26","tmp$12","value$18","match$27","ret_type","f","MT_Ret","AllFields","query","name","Fragments","ppx_printed_query$1","parse$1","contentBlocks","decodeArray","map","targetVersions","createdAt","updatedAt","make$1","targetId","targetVersionId","param","variables","fromArray","filter","test","makeWithVariables","makeVariables","definition_002","graphql_ppx_use_json_variables_fn","_1","definition","ret_type$1","MT_Ret$1","Query","exports"],"mappings":"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","sourcesContent":["// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n'use strict';\n\nvar List = require(\"bs-platform/lib/js/list.js\");\nvar $$Array = require(\"bs-platform/lib/js/array.js\");\nvar Block = require(\"bs-platform/lib/js/block.js\");\nvar Curry = require(\"bs-platform/lib/js/curry.js\");\nvar Js_exn = require(\"bs-platform/lib/js/js_exn.js\");\nvar Js_dict = require(\"bs-platform/lib/js/js_dict.js\");\nvar Js_json = require(\"bs-platform/lib/js/js_json.js\");\nvar Js_option = require(\"bs-platform/lib/js/js_option.js\");\nvar ListUtils = require(\"../utils/ListUtils.bs.js\");\nvar ArrayUtils = require(\"../utils/ArrayUtils.bs.js\");\nvar Caml_option = require(\"bs-platform/lib/js/caml_option.js\");\nvar Json_decode = require(\"@glennsl/bs-json/src/Json_decode.bs.js\");\nvar Caml_exceptions = require(\"bs-platform/lib/js/caml_exceptions.js\");\n\nvar UnexpectedBlockType = Caml_exceptions.create(\"ContentBlock.UnexpectedBlockType\");\n\nfunction decodeMarkdownContent(json) {\n  return Json_decode.field(\"markdown\", Json_decode.string, json);\n}\n\nfunction decodeFileContent(json) {\n  return Json_decode.field(\"title\", Json_decode.string, json);\n}\n\nfunction decodeImageContent(json) {\n  return Json_decode.field(\"caption\", Json_decode.string, json);\n}\n\nfunction decodeEmbedContent(json) {\n  return /* tuple */[\n          Json_decode.field(\"url\", Json_decode.string, json),\n          Json_decode.field(\"embedCode\", Json_decode.string, json)\n        ];\n}\n\nfunction decode(json) {\n  var unknownBlockType = Json_decode.field(\"blockType\", Json_decode.string, json);\n  var blockType;\n  switch (unknownBlockType) {\n    case \"embed\" :\n        var match = Json_decode.field(\"content\", decodeEmbedContent, json);\n        blockType = /* Embed */Block.__(3, [\n            match[0],\n            match[1]\n          ]);\n        break;\n    case \"file\" :\n        var title = Json_decode.field(\"content\", decodeFileContent, json);\n        var url = Json_decode.field(\"fileUrl\", Json_decode.string, json);\n        var filename = Json_decode.field(\"filename\", Json_decode.string, json);\n        blockType = /* File */Block.__(1, [\n            url,\n            title,\n            filename\n          ]);\n        break;\n    case \"image\" :\n        var caption = Json_decode.field(\"content\", decodeImageContent, json);\n        var url$1 = Json_decode.field(\"fileUrl\", Json_decode.string, json);\n        blockType = /* Image */Block.__(2, [\n            url$1,\n            caption\n          ]);\n        break;\n    case \"markdown\" :\n        blockType = /* Markdown */Block.__(0, [Json_decode.field(\"content\", decodeMarkdownContent, json)]);\n        break;\n    default:\n      throw [\n            UnexpectedBlockType,\n            unknownBlockType\n          ];\n  }\n  return {\n          id: Json_decode.field(\"id\", Json_decode.string, json),\n          blockType: blockType,\n          sortIndex: Json_decode.field(\"sortIndex\", Json_decode.$$int, json)\n        };\n}\n\nfunction sort(blocks) {\n  return ArrayUtils.copyAndSort((function (x, y) {\n                return x.sortIndex - y.sortIndex | 0;\n              }), blocks);\n}\n\nfunction id(t) {\n  return t.id;\n}\n\nfunction blockType(t) {\n  return t.blockType;\n}\n\nfunction sortIndex(t) {\n  return t.sortIndex;\n}\n\nfunction makeMarkdownBlock(markdown) {\n  return /* Markdown */Block.__(0, [markdown]);\n}\n\nfunction makeImageBlock(fileUrl, caption) {\n  return /* Image */Block.__(2, [\n            fileUrl,\n            caption\n          ]);\n}\n\nfunction makeFileBlock(fileUrl, title, fileName) {\n  return /* File */Block.__(1, [\n            fileUrl,\n            title,\n            fileName\n          ]);\n}\n\nfunction makeEmbedBlock(url, embedCode) {\n  return /* Embed */Block.__(3, [\n            url,\n            embedCode\n          ]);\n}\n\nfunction make(id, blockType, sortIndex) {\n  return {\n          id: id,\n          blockType: blockType,\n          sortIndex: sortIndex\n        };\n}\n\nfunction makeFromJs(js) {\n  var id = js.id;\n  var sortIndex = js.sortIndex;\n  var match = js.content;\n  var variant = match[0];\n  var blockType;\n  if (variant >= 905808084) {\n    if (variant >= 930824210) {\n      var content = match[1];\n      blockType = /* Image */Block.__(2, [\n          content.url,\n          content.caption\n        ]);\n    } else {\n      var content$1 = match[1];\n      blockType = /* Embed */Block.__(3, [\n          content$1.url,\n          content$1.embedCode\n        ]);\n    }\n  } else if (variant >= -240357442) {\n    blockType = /* Markdown */Block.__(0, [match[1].markdown]);\n  } else {\n    var content$2 = match[1];\n    blockType = /* File */Block.__(1, [\n        content$2.url,\n        content$2.title,\n        content$2.filename\n      ]);\n  }\n  return {\n          id: id,\n          blockType: blockType,\n          sortIndex: sortIndex\n        };\n}\n\nfunction blockTypeAsString(blockType) {\n  switch (blockType.tag | 0) {\n    case /* Markdown */0 :\n        return \"markdown\";\n    case /* File */1 :\n        return \"file\";\n    case /* Image */2 :\n        return \"image\";\n    case /* Embed */3 :\n        return \"embed\";\n    \n  }\n}\n\nfunction incrementSortIndex(t) {\n  return {\n          id: t.id,\n          blockType: t.blockType,\n          sortIndex: t.sortIndex + 1 | 0\n        };\n}\n\nfunction reindex(ts) {\n  return List.mapi((function (sortIndex, t) {\n                return {\n                        id: t.id,\n                        blockType: t.blockType,\n                        sortIndex: sortIndex\n                      };\n              }), ts);\n}\n\nfunction moveUp(t, ts) {\n  return $$Array.of_list(reindex(ListUtils.swapUp(t, $$Array.to_list(sort(ts)))));\n}\n\nfunction moveDown(t, ts) {\n  return $$Array.of_list(reindex(ListUtils.swapDown(t, $$Array.to_list(sort(ts)))));\n}\n\nfunction updateFile(title, t) {\n  var match = t.blockType;\n  if (match.tag === /* File */1) {\n    return {\n            id: t.id,\n            blockType: /* File */Block.__(1, [\n                match[0],\n                title,\n                match[2]\n              ]),\n            sortIndex: t.sortIndex\n          };\n  } else {\n    return t;\n  }\n}\n\nfunction updateImage(caption, t) {\n  var match = t.blockType;\n  if (match.tag === /* Image */2) {\n    return {\n            id: t.id,\n            blockType: /* Image */Block.__(2, [\n                match[0],\n                caption\n              ]),\n            sortIndex: t.sortIndex\n          };\n  } else {\n    return t;\n  }\n}\n\nfunction updateMarkdown(markdown, t) {\n  var match = t.blockType;\n  if (match.tag) {\n    return t;\n  } else {\n    return {\n            id: t.id,\n            blockType: /* Markdown */Block.__(0, [markdown]),\n            sortIndex: t.sortIndex\n          };\n  }\n}\n\nvar ppx_printed_query = \"fragment allFields on ContentBlock   {\\nid  \\nblockType  \\nsortIndex  \\ncontent  {\\n__typename\\n...on ImageBlock   {\\ncaption  \\nurl  \\nfilename  \\n}\\n\\n...on FileBlock   {\\ntitle  \\nurl  \\nfilename  \\n}\\n\\n...on MarkdownBlock   {\\nmarkdown  \\n}\\n\\n...on EmbedBlock   {\\nurl  \\nembedCode  \\n}\\n\\n}\\n\\n}\\n\";\n\nfunction parse(value) {\n  var value$1 = Js_option.getExn(Js_json.decodeObject(value));\n  var match = Js_dict.get(value$1, \"id\");\n  var tmp;\n  if (match !== undefined) {\n    var value$2 = Caml_option.valFromOption(match);\n    var match$1 = Js_json.decodeString(value$2);\n    tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$2));\n  } else {\n    tmp = Js_exn.raiseError(\"graphql_ppx: Field id on type ContentBlock is missing\");\n  }\n  var match$2 = Js_dict.get(value$1, \"blockType\");\n  var tmp$1;\n  if (match$2 !== undefined) {\n    var value$3 = Caml_option.valFromOption(match$2);\n    var match$3 = Js_json.decodeString(value$3);\n    tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$3));\n  } else {\n    tmp$1 = Js_exn.raiseError(\"graphql_ppx: Field blockType on type ContentBlock is missing\");\n  }\n  var match$4 = Js_dict.get(value$1, \"sortIndex\");\n  var tmp$2;\n  if (match$4 !== undefined) {\n    var value$4 = Caml_option.valFromOption(match$4);\n    var match$5 = Js_json.decodeNumber(value$4);\n    tmp$2 = match$5 !== undefined ? match$5 | 0 : Js_exn.raiseError(\"graphql_ppx: Expected int, got \" + JSON.stringify(value$4));\n  } else {\n    tmp$2 = Js_exn.raiseError(\"graphql_ppx: Field sortIndex on type ContentBlock is missing\");\n  }\n  var match$6 = Js_dict.get(value$1, \"content\");\n  var tmp$3;\n  if (match$6 !== undefined) {\n    var value$5 = Caml_option.valFromOption(match$6);\n    var match$7 = Js_json.decodeObject(value$5);\n    if (match$7 !== undefined) {\n      var match$8 = Js_dict.get(Caml_option.valFromOption(match$7), \"__typename\");\n      if (match$8 !== undefined) {\n        var match$9 = Js_json.decodeString(Caml_option.valFromOption(match$8));\n        if (match$9 !== undefined) {\n          var typename = match$9;\n          switch (typename) {\n            case \"EmbedBlock\" :\n                var value$6 = Js_option.getExn(Js_json.decodeObject(value$5));\n                var match$10 = Js_dict.get(value$6, \"url\");\n                var tmp$4;\n                if (match$10 !== undefined) {\n                  var value$7 = Caml_option.valFromOption(match$10);\n                  var match$11 = Js_json.decodeString(value$7);\n                  tmp$4 = match$11 !== undefined ? match$11 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$7));\n                } else {\n                  tmp$4 = Js_exn.raiseError(\"graphql_ppx: Field url on type EmbedBlock is missing\");\n                }\n                var match$12 = Js_dict.get(value$6, \"embedCode\");\n                var tmp$5;\n                if (match$12 !== undefined) {\n                  var value$8 = Caml_option.valFromOption(match$12);\n                  var match$13 = Js_json.decodeString(value$8);\n                  tmp$5 = match$13 !== undefined ? match$13 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$8));\n                } else {\n                  tmp$5 = Js_exn.raiseError(\"graphql_ppx: Field embedCode on type EmbedBlock is missing\");\n                }\n                tmp$3 = /* `EmbedBlock */[\n                  905808084,\n                  {\n                    url: tmp$4,\n                    embedCode: tmp$5\n                  }\n                ];\n                break;\n            case \"FileBlock\" :\n                var value$9 = Js_option.getExn(Js_json.decodeObject(value$5));\n                var match$14 = Js_dict.get(value$9, \"title\");\n                var tmp$6;\n                if (match$14 !== undefined) {\n                  var value$10 = Caml_option.valFromOption(match$14);\n                  var match$15 = Js_json.decodeString(value$10);\n                  tmp$6 = match$15 !== undefined ? match$15 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$10));\n                } else {\n                  tmp$6 = Js_exn.raiseError(\"graphql_ppx: Field title on type FileBlock is missing\");\n                }\n                var match$16 = Js_dict.get(value$9, \"url\");\n                var tmp$7;\n                if (match$16 !== undefined) {\n                  var value$11 = Caml_option.valFromOption(match$16);\n                  var match$17 = Js_json.decodeString(value$11);\n                  tmp$7 = match$17 !== undefined ? match$17 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$11));\n                } else {\n                  tmp$7 = Js_exn.raiseError(\"graphql_ppx: Field url on type FileBlock is missing\");\n                }\n                var match$18 = Js_dict.get(value$9, \"filename\");\n                var tmp$8;\n                if (match$18 !== undefined) {\n                  var value$12 = Caml_option.valFromOption(match$18);\n                  var match$19 = Js_json.decodeString(value$12);\n                  tmp$8 = match$19 !== undefined ? match$19 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$12));\n                } else {\n                  tmp$8 = Js_exn.raiseError(\"graphql_ppx: Field filename on type FileBlock is missing\");\n                }\n                tmp$3 = /* `FileBlock */[\n                  -654904047,\n                  {\n                    title: tmp$6,\n                    url: tmp$7,\n                    filename: tmp$8\n                  }\n                ];\n                break;\n            case \"ImageBlock\" :\n                var value$13 = Js_option.getExn(Js_json.decodeObject(value$5));\n                var match$20 = Js_dict.get(value$13, \"caption\");\n                var tmp$9;\n                if (match$20 !== undefined) {\n                  var value$14 = Caml_option.valFromOption(match$20);\n                  var match$21 = Js_json.decodeString(value$14);\n                  tmp$9 = match$21 !== undefined ? match$21 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$14));\n                } else {\n                  tmp$9 = Js_exn.raiseError(\"graphql_ppx: Field caption on type ImageBlock is missing\");\n                }\n                var match$22 = Js_dict.get(value$13, \"url\");\n                var tmp$10;\n                if (match$22 !== undefined) {\n                  var value$15 = Caml_option.valFromOption(match$22);\n                  var match$23 = Js_json.decodeString(value$15);\n                  tmp$10 = match$23 !== undefined ? match$23 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$15));\n                } else {\n                  tmp$10 = Js_exn.raiseError(\"graphql_ppx: Field url on type ImageBlock is missing\");\n                }\n                var match$24 = Js_dict.get(value$13, \"filename\");\n                var tmp$11;\n                if (match$24 !== undefined) {\n                  var value$16 = Caml_option.valFromOption(match$24);\n                  var match$25 = Js_json.decodeString(value$16);\n                  tmp$11 = match$25 !== undefined ? match$25 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$16));\n                } else {\n                  tmp$11 = Js_exn.raiseError(\"graphql_ppx: Field filename on type ImageBlock is missing\");\n                }\n                tmp$3 = /* `ImageBlock */[\n                  930824210,\n                  {\n                    caption: tmp$9,\n                    url: tmp$10,\n                    filename: tmp$11\n                  }\n                ];\n                break;\n            case \"MarkdownBlock\" :\n                var value$17 = Js_option.getExn(Js_json.decodeObject(value$5));\n                var match$26 = Js_dict.get(value$17, \"markdown\");\n                var tmp$12;\n                if (match$26 !== undefined) {\n                  var value$18 = Caml_option.valFromOption(match$26);\n                  var match$27 = Js_json.decodeString(value$18);\n                  tmp$12 = match$27 !== undefined ? match$27 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$18));\n                } else {\n                  tmp$12 = Js_exn.raiseError(\"graphql_ppx: Field markdown on type MarkdownBlock is missing\");\n                }\n                tmp$3 = /* `MarkdownBlock */[\n                  -240357442,\n                  {\n                    markdown: tmp$12\n                  }\n                ];\n                break;\n            default:\n              tmp$3 = Js_exn.raiseError(\"graphql_ppx: Union Content returned unknown type \" + typename);\n          }\n        } else {\n          tmp$3 = Js_exn.raiseError(\"graphql_ppx: Union Content has a __typename field that is not a string\");\n        }\n      } else {\n        tmp$3 = Js_exn.raiseError(\"graphql_ppx: Union Content is missing the __typename field\");\n      }\n    } else {\n      tmp$3 = Js_exn.raiseError(\"graphql_ppx: Expected union Content to be an object, got \" + JSON.stringify(value$5));\n    }\n  } else {\n    tmp$3 = Js_exn.raiseError(\"graphql_ppx: Field content on type ContentBlock is missing\");\n  }\n  return {\n          id: tmp,\n          blockType: tmp$1,\n          sortIndex: tmp$2,\n          content: tmp$3\n        };\n}\n\nfunction ret_type(f) {\n  return { };\n}\n\nvar MT_Ret = { };\n\nvar AllFields = {\n  ppx_printed_query: ppx_printed_query,\n  query: ppx_printed_query,\n  parse: parse,\n  name: \"allFields\",\n  ret_type: ret_type,\n  MT_Ret: MT_Ret\n};\n\nvar Fragments = {\n  AllFields: AllFields\n};\n\nvar ppx_printed_query$1 = \"query ContentBlocksWithVersionsQuery($targetId: ID!, $targetVersionId: ID)  {\\ncontentBlocks(targetId: $targetId, targetVersionId: $targetVersionId)  {\\nid  \\nblockType  \\nsortIndex  \\ncontent  {\\n__typename\\n...on ImageBlock   {\\ncaption  \\nurl  \\nfilename  \\n}\\n\\n...on FileBlock   {\\ntitle  \\nurl  \\nfilename  \\n}\\n\\n...on MarkdownBlock   {\\nmarkdown  \\n}\\n\\n...on EmbedBlock   {\\nurl  \\nembedCode  \\n}\\n\\n}\\n\\n}\\n\\ntargetVersions(targetId: $targetId)  {\\nid  \\ncreatedAt  \\nupdatedAt  \\n}\\n\\n}\\n\";\n\nfunction parse$1(value) {\n  var value$1 = Js_option.getExn(Js_json.decodeObject(value));\n  var match = Js_dict.get(value$1, \"contentBlocks\");\n  var match$1 = Js_dict.get(value$1, \"targetVersions\");\n  return {\n          contentBlocks: match !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match))).map((function (value) {\n                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));\n                    var match = Js_dict.get(value$1, \"id\");\n                    var tmp;\n                    if (match !== undefined) {\n                      var value$2 = Caml_option.valFromOption(match);\n                      var match$1 = Js_json.decodeString(value$2);\n                      tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$2));\n                    } else {\n                      tmp = Js_exn.raiseError(\"graphql_ppx: Field id on type ContentBlock is missing\");\n                    }\n                    var match$2 = Js_dict.get(value$1, \"blockType\");\n                    var tmp$1;\n                    if (match$2 !== undefined) {\n                      var value$3 = Caml_option.valFromOption(match$2);\n                      var match$3 = Js_json.decodeString(value$3);\n                      tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$3));\n                    } else {\n                      tmp$1 = Js_exn.raiseError(\"graphql_ppx: Field blockType on type ContentBlock is missing\");\n                    }\n                    var match$4 = Js_dict.get(value$1, \"sortIndex\");\n                    var tmp$2;\n                    if (match$4 !== undefined) {\n                      var value$4 = Caml_option.valFromOption(match$4);\n                      var match$5 = Js_json.decodeNumber(value$4);\n                      tmp$2 = match$5 !== undefined ? match$5 | 0 : Js_exn.raiseError(\"graphql_ppx: Expected int, got \" + JSON.stringify(value$4));\n                    } else {\n                      tmp$2 = Js_exn.raiseError(\"graphql_ppx: Field sortIndex on type ContentBlock is missing\");\n                    }\n                    var match$6 = Js_dict.get(value$1, \"content\");\n                    var tmp$3;\n                    if (match$6 !== undefined) {\n                      var value$5 = Caml_option.valFromOption(match$6);\n                      var match$7 = Js_json.decodeObject(value$5);\n                      if (match$7 !== undefined) {\n                        var match$8 = Js_dict.get(Caml_option.valFromOption(match$7), \"__typename\");\n                        if (match$8 !== undefined) {\n                          var match$9 = Js_json.decodeString(Caml_option.valFromOption(match$8));\n                          if (match$9 !== undefined) {\n                            var typename = match$9;\n                            switch (typename) {\n                              case \"EmbedBlock\" :\n                                  var value$6 = Js_option.getExn(Js_json.decodeObject(value$5));\n                                  var match$10 = Js_dict.get(value$6, \"url\");\n                                  var tmp$4;\n                                  if (match$10 !== undefined) {\n                                    var value$7 = Caml_option.valFromOption(match$10);\n                                    var match$11 = Js_json.decodeString(value$7);\n                                    tmp$4 = match$11 !== undefined ? match$11 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$7));\n                                  } else {\n                                    tmp$4 = Js_exn.raiseError(\"graphql_ppx: Field url on type EmbedBlock is missing\");\n                                  }\n                                  var match$12 = Js_dict.get(value$6, \"embedCode\");\n                                  var tmp$5;\n                                  if (match$12 !== undefined) {\n                                    var value$8 = Caml_option.valFromOption(match$12);\n                                    var match$13 = Js_json.decodeString(value$8);\n                                    tmp$5 = match$13 !== undefined ? match$13 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$8));\n                                  } else {\n                                    tmp$5 = Js_exn.raiseError(\"graphql_ppx: Field embedCode on type EmbedBlock is missing\");\n                                  }\n                                  tmp$3 = /* `EmbedBlock */[\n                                    905808084,\n                                    {\n                                      url: tmp$4,\n                                      embedCode: tmp$5\n                                    }\n                                  ];\n                                  break;\n                              case \"FileBlock\" :\n                                  var value$9 = Js_option.getExn(Js_json.decodeObject(value$5));\n                                  var match$14 = Js_dict.get(value$9, \"title\");\n                                  var tmp$6;\n                                  if (match$14 !== undefined) {\n                                    var value$10 = Caml_option.valFromOption(match$14);\n                                    var match$15 = Js_json.decodeString(value$10);\n                                    tmp$6 = match$15 !== undefined ? match$15 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$10));\n                                  } else {\n                                    tmp$6 = Js_exn.raiseError(\"graphql_ppx: Field title on type FileBlock is missing\");\n                                  }\n                                  var match$16 = Js_dict.get(value$9, \"url\");\n                                  var tmp$7;\n                                  if (match$16 !== undefined) {\n                                    var value$11 = Caml_option.valFromOption(match$16);\n                                    var match$17 = Js_json.decodeString(value$11);\n                                    tmp$7 = match$17 !== undefined ? match$17 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$11));\n                                  } else {\n                                    tmp$7 = Js_exn.raiseError(\"graphql_ppx: Field url on type FileBlock is missing\");\n                                  }\n                                  var match$18 = Js_dict.get(value$9, \"filename\");\n                                  var tmp$8;\n                                  if (match$18 !== undefined) {\n                                    var value$12 = Caml_option.valFromOption(match$18);\n                                    var match$19 = Js_json.decodeString(value$12);\n                                    tmp$8 = match$19 !== undefined ? match$19 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$12));\n                                  } else {\n                                    tmp$8 = Js_exn.raiseError(\"graphql_ppx: Field filename on type FileBlock is missing\");\n                                  }\n                                  tmp$3 = /* `FileBlock */[\n                                    -654904047,\n                                    {\n                                      title: tmp$6,\n                                      url: tmp$7,\n                                      filename: tmp$8\n                                    }\n                                  ];\n                                  break;\n                              case \"ImageBlock\" :\n                                  var value$13 = Js_option.getExn(Js_json.decodeObject(value$5));\n                                  var match$20 = Js_dict.get(value$13, \"caption\");\n                                  var tmp$9;\n                                  if (match$20 !== undefined) {\n                                    var value$14 = Caml_option.valFromOption(match$20);\n                                    var match$21 = Js_json.decodeString(value$14);\n                                    tmp$9 = match$21 !== undefined ? match$21 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$14));\n                                  } else {\n                                    tmp$9 = Js_exn.raiseError(\"graphql_ppx: Field caption on type ImageBlock is missing\");\n                                  }\n                                  var match$22 = Js_dict.get(value$13, \"url\");\n                                  var tmp$10;\n                                  if (match$22 !== undefined) {\n                                    var value$15 = Caml_option.valFromOption(match$22);\n                                    var match$23 = Js_json.decodeString(value$15);\n                                    tmp$10 = match$23 !== undefined ? match$23 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$15));\n                                  } else {\n                                    tmp$10 = Js_exn.raiseError(\"graphql_ppx: Field url on type ImageBlock is missing\");\n                                  }\n                                  var match$24 = Js_dict.get(value$13, \"filename\");\n                                  var tmp$11;\n                                  if (match$24 !== undefined) {\n                                    var value$16 = Caml_option.valFromOption(match$24);\n                                    var match$25 = Js_json.decodeString(value$16);\n                                    tmp$11 = match$25 !== undefined ? match$25 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$16));\n                                  } else {\n                                    tmp$11 = Js_exn.raiseError(\"graphql_ppx: Field filename on type ImageBlock is missing\");\n                                  }\n                                  tmp$3 = /* `ImageBlock */[\n                                    930824210,\n                                    {\n                                      caption: tmp$9,\n                                      url: tmp$10,\n                                      filename: tmp$11\n                                    }\n                                  ];\n                                  break;\n                              case \"MarkdownBlock\" :\n                                  var value$17 = Js_option.getExn(Js_json.decodeObject(value$5));\n                                  var match$26 = Js_dict.get(value$17, \"markdown\");\n                                  var tmp$12;\n                                  if (match$26 !== undefined) {\n                                    var value$18 = Caml_option.valFromOption(match$26);\n                                    var match$27 = Js_json.decodeString(value$18);\n                                    tmp$12 = match$27 !== undefined ? match$27 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$18));\n                                  } else {\n                                    tmp$12 = Js_exn.raiseError(\"graphql_ppx: Field markdown on type MarkdownBlock is missing\");\n                                  }\n                                  tmp$3 = /* `MarkdownBlock */[\n                                    -240357442,\n                                    {\n                                      markdown: tmp$12\n                                    }\n                                  ];\n                                  break;\n                              default:\n                                tmp$3 = Js_exn.raiseError(\"graphql_ppx: Union Content returned unknown type \" + typename);\n                            }\n                          } else {\n                            tmp$3 = Js_exn.raiseError(\"graphql_ppx: Union Content has a __typename field that is not a string\");\n                          }\n                        } else {\n                          tmp$3 = Js_exn.raiseError(\"graphql_ppx: Union Content is missing the __typename field\");\n                        }\n                      } else {\n                        tmp$3 = Js_exn.raiseError(\"graphql_ppx: Expected union Content to be an object, got \" + JSON.stringify(value$5));\n                      }\n                    } else {\n                      tmp$3 = Js_exn.raiseError(\"graphql_ppx: Field content on type ContentBlock is missing\");\n                    }\n                    return {\n                            id: tmp,\n                            blockType: tmp$1,\n                            sortIndex: tmp$2,\n                            content: tmp$3\n                          };\n                  })) : Js_exn.raiseError(\"graphql_ppx: Field contentBlocks on type Query is missing\"),\n          targetVersions: match$1 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$1))).map((function (value) {\n                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));\n                    var match = Js_dict.get(value$1, \"id\");\n                    var tmp;\n                    if (match !== undefined) {\n                      var value$2 = Caml_option.valFromOption(match);\n                      var match$1 = Js_json.decodeString(value$2);\n                      tmp = match$1 !== undefined ? match$1 : Js_exn.raiseError(\"graphql_ppx: Expected string, got \" + JSON.stringify(value$2));\n                    } else {\n                      tmp = Js_exn.raiseError(\"graphql_ppx: Field id on type TargetVersion is missing\");\n                    }\n                    var match$2 = Js_dict.get(value$1, \"createdAt\");\n                    var match$3 = Js_dict.get(value$1, \"updatedAt\");\n                    return {\n                            id: tmp,\n                            createdAt: match$2 !== undefined ? Caml_option.valFromOption(match$2) : Js_exn.raiseError(\"graphql_ppx: Field createdAt on type TargetVersion is missing\"),\n                            updatedAt: match$3 !== undefined ? Caml_option.valFromOption(match$3) : Js_exn.raiseError(\"graphql_ppx: Field updatedAt on type TargetVersion is missing\")\n                          };\n                  })) : Js_exn.raiseError(\"graphql_ppx: Field targetVersions on type Query is missing\")\n        };\n}\n\nfunction make$1(targetId, targetVersionId, param) {\n  return {\n          query: ppx_printed_query$1,\n          variables: Js_dict.fromArray([\n                  /* tuple */[\n                    \"targetId\",\n                    targetId\n                  ],\n                  /* tuple */[\n                    \"targetVersionId\",\n                    targetVersionId !== undefined ? targetVersionId : null\n                  ]\n                ].filter((function (param) {\n                      return !Js_json.test(param[1], /* Null */5);\n                    }))),\n          parse: parse$1\n        };\n}\n\nfunction makeWithVariables(variables) {\n  var targetId = variables.targetId;\n  var targetVersionId = variables.targetVersionId;\n  return {\n          query: ppx_printed_query$1,\n          variables: Js_dict.fromArray([\n                  /* tuple */[\n                    \"targetId\",\n                    targetId\n                  ],\n                  /* tuple */[\n                    \"targetVersionId\",\n                    targetVersionId !== undefined ? targetVersionId : null\n                  ]\n                ].filter((function (param) {\n                      return !Js_json.test(param[1], /* Null */5);\n                    }))),\n          parse: parse$1\n        };\n}\n\nfunction makeVariables(targetId, targetVersionId, param) {\n  return Js_dict.fromArray([\n                /* tuple */[\n                  \"targetId\",\n                  targetId\n                ],\n                /* tuple */[\n                  \"targetVersionId\",\n                  targetVersionId !== undefined ? targetVersionId : null\n                ]\n              ].filter((function (param) {\n                    return !Js_json.test(param[1], /* Null */5);\n                  })));\n}\n\nfunction definition_002(graphql_ppx_use_json_variables_fn, targetId, targetVersionId, param) {\n  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([\n                    /* tuple */[\n                      \"targetId\",\n                      targetId\n                    ],\n                    /* tuple */[\n                      \"targetVersionId\",\n                      targetVersionId !== undefined ? targetVersionId : null\n                    ]\n                  ].filter((function (param) {\n                        return !Js_json.test(param[1], /* Null */5);\n                      }))));\n}\n\nvar definition = /* tuple */[\n  parse$1,\n  ppx_printed_query$1,\n  definition_002\n];\n\nfunction ret_type$1(f) {\n  return { };\n}\n\nvar MT_Ret$1 = { };\n\nvar Query = {\n  ppx_printed_query: ppx_printed_query$1,\n  query: ppx_printed_query$1,\n  parse: parse$1,\n  make: make$1,\n  makeWithVariables: makeWithVariables,\n  makeVariables: makeVariables,\n  definition: definition,\n  ret_type: ret_type$1,\n  MT_Ret: MT_Ret$1\n};\n\nexports.UnexpectedBlockType = UnexpectedBlockType;\nexports.decodeMarkdownContent = decodeMarkdownContent;\nexports.decodeFileContent = decodeFileContent;\nexports.decodeImageContent = decodeImageContent;\nexports.decodeEmbedContent = decodeEmbedContent;\nexports.decode = decode;\nexports.sort = sort;\nexports.id = id;\nexports.blockType = blockType;\nexports.sortIndex = sortIndex;\nexports.makeMarkdownBlock = makeMarkdownBlock;\nexports.makeImageBlock = makeImageBlock;\nexports.makeFileBlock = makeFileBlock;\nexports.makeEmbedBlock = makeEmbedBlock;\nexports.make = make;\nexports.makeFromJs = makeFromJs;\nexports.blockTypeAsString = blockTypeAsString;\nexports.incrementSortIndex = incrementSortIndex;\nexports.reindex = reindex;\nexports.moveUp = moveUp;\nexports.moveDown = moveDown;\nexports.updateFile = updateFile;\nexports.updateImage = updateImage;\nexports.updateMarkdown = updateMarkdown;\nexports.Fragments = Fragments;\nexports.Query = Query;\n/* ArrayUtils Not a pure module */\n"]},"metadata":{},"sourceType":"module"}