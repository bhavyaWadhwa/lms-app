{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar List = require(\"bs-platform/lib/js/list.js\");\n\nvar $$Array = require(\"bs-platform/lib/js/array.js\");\n\nvar Curry = require(\"bs-platform/lib/js/curry.js\");\n\nvar Js_dict = require(\"bs-platform/lib/js/js_dict.js\");\n\nvar Caml_option = require(\"bs-platform/lib/js/caml_option.js\");\n\nvar Caml_string = require(\"bs-platform/lib/js/caml_string.js\");\n\nvar Caml_exceptions = require(\"bs-platform/lib/js/caml_exceptions.js\");\n\nvar Caml_js_exceptions = require(\"bs-platform/lib/js/caml_js_exceptions.js\");\n\nvar Caml_builtin_exceptions = require(\"bs-platform/lib/js/caml_builtin_exceptions.js\");\n\nfunction _isInteger(value) {\n  if (isFinite(value)) {\n    return Math.floor(value) === value;\n  } else {\n    return false;\n  }\n}\n\nvar DecodeError = Caml_exceptions.create(\"Json_decode.DecodeError\");\n\nfunction id(json) {\n  return json;\n}\n\nfunction bool(json) {\n  if (typeof json === \"boolean\") {\n    return json;\n  } else {\n    throw [DecodeError, \"Expected boolean, got \" + JSON.stringify(json)];\n  }\n}\n\nfunction $$float(json) {\n  if (typeof json === \"number\") {\n    return json;\n  } else {\n    throw [DecodeError, \"Expected number, got \" + JSON.stringify(json)];\n  }\n}\n\nfunction $$int(json) {\n  var f = $$float(json);\n\n  if (_isInteger(f)) {\n    return f;\n  } else {\n    throw [DecodeError, \"Expected integer, got \" + JSON.stringify(json)];\n  }\n}\n\nfunction string(json) {\n  if (typeof json === \"string\") {\n    return json;\n  } else {\n    throw [DecodeError, \"Expected string, got \" + JSON.stringify(json)];\n  }\n}\n\nfunction $$char(json) {\n  var s = string(json);\n\n  if (s.length === 1) {\n    return Caml_string.get(s, 0);\n  } else {\n    throw [DecodeError, \"Expected single-character string, got \" + JSON.stringify(json)];\n  }\n}\n\nfunction date(json) {\n  return new Date(string(json));\n}\n\nfunction nullable(decode, json) {\n  if (json === null) {\n    return null;\n  } else {\n    return Curry._1(decode, json);\n  }\n}\n\nfunction nullAs(value, json) {\n  if (json === null) {\n    return value;\n  } else {\n    throw [DecodeError, \"Expected null, got \" + JSON.stringify(json)];\n  }\n}\n\nfunction array(decode, json) {\n  if (Array.isArray(json)) {\n    var length = json.length;\n    var target = new Array(length);\n\n    for (var i = 0, i_finish = length - 1 | 0; i <= i_finish; ++i) {\n      var value;\n\n      try {\n        value = Curry._1(decode, json[i]);\n      } catch (raw_exn) {\n        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n\n        if (exn[0] === DecodeError) {\n          throw [DecodeError, exn[1] + (\"\\n\\tin array at index \" + String(i))];\n        }\n\n        throw exn;\n      }\n\n      target[i] = value;\n    }\n\n    return target;\n  } else {\n    throw [DecodeError, \"Expected array, got \" + JSON.stringify(json)];\n  }\n}\n\nfunction list(decode, json) {\n  return $$Array.to_list(array(decode, json));\n}\n\nfunction pair(decodeA, decodeB, json) {\n  if (Array.isArray(json)) {\n    var length = json.length;\n\n    if (length === 2) {\n      try {\n        return (\n          /* tuple */\n          [Curry._1(decodeA, json[0]), Curry._1(decodeB, json[1])]\n        );\n      } catch (raw_exn) {\n        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n\n        if (exn[0] === DecodeError) {\n          throw [DecodeError, exn[1] + \"\\n\\tin pair/tuple2\"];\n        }\n\n        throw exn;\n      }\n    } else {\n      throw [DecodeError, \"Expected array of length 2, got array of length \" + (String(length) + \"\")];\n    }\n  } else {\n    throw [DecodeError, \"Expected array, got \" + JSON.stringify(json)];\n  }\n}\n\nfunction tuple3(decodeA, decodeB, decodeC, json) {\n  if (Array.isArray(json)) {\n    var length = json.length;\n\n    if (length === 3) {\n      try {\n        return (\n          /* tuple */\n          [Curry._1(decodeA, json[0]), Curry._1(decodeB, json[1]), Curry._1(decodeC, json[2])]\n        );\n      } catch (raw_exn) {\n        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n\n        if (exn[0] === DecodeError) {\n          throw [DecodeError, exn[1] + \"\\n\\tin tuple3\"];\n        }\n\n        throw exn;\n      }\n    } else {\n      throw [DecodeError, \"Expected array of length 3, got array of length \" + (String(length) + \"\")];\n    }\n  } else {\n    throw [DecodeError, \"Expected array, got \" + JSON.stringify(json)];\n  }\n}\n\nfunction tuple4(decodeA, decodeB, decodeC, decodeD, json) {\n  if (Array.isArray(json)) {\n    var length = json.length;\n\n    if (length === 4) {\n      try {\n        return (\n          /* tuple */\n          [Curry._1(decodeA, json[0]), Curry._1(decodeB, json[1]), Curry._1(decodeC, json[2]), Curry._1(decodeD, json[3])]\n        );\n      } catch (raw_exn) {\n        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n\n        if (exn[0] === DecodeError) {\n          throw [DecodeError, exn[1] + \"\\n\\tin tuple4\"];\n        }\n\n        throw exn;\n      }\n    } else {\n      throw [DecodeError, \"Expected array of length 4, got array of length \" + (String(length) + \"\")];\n    }\n  } else {\n    throw [DecodeError, \"Expected array, got \" + JSON.stringify(json)];\n  }\n}\n\nfunction dict(decode, json) {\n  if (_typeof(json) === \"object\" && !Array.isArray(json) && json !== null) {\n    var keys = Object.keys(json);\n    var l = keys.length;\n    var target = {};\n\n    for (var i = 0, i_finish = l - 1 | 0; i <= i_finish; ++i) {\n      var key = keys[i];\n      var value;\n\n      try {\n        value = Curry._1(decode, json[key]);\n      } catch (raw_exn) {\n        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n\n        if (exn[0] === DecodeError) {\n          throw [DecodeError, exn[1] + \"\\n\\tin dict\"];\n        }\n\n        throw exn;\n      }\n\n      target[key] = value;\n    }\n\n    return target;\n  } else {\n    throw [DecodeError, \"Expected object, got \" + JSON.stringify(json)];\n  }\n}\n\nfunction field(key, decode, json) {\n  if (_typeof(json) === \"object\" && !Array.isArray(json) && json !== null) {\n    var match = Js_dict.get(json, key);\n\n    if (match !== undefined) {\n      try {\n        return Curry._1(decode, Caml_option.valFromOption(match));\n      } catch (raw_exn) {\n        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n\n        if (exn[0] === DecodeError) {\n          throw [DecodeError, exn[1] + (\"\\n\\tat field '\" + (key + \"'\"))];\n        }\n\n        throw exn;\n      }\n    } else {\n      throw [DecodeError, \"Expected field \\'\" + (String(key) + \"\\'\")];\n    }\n  } else {\n    throw [DecodeError, \"Expected object, got \" + JSON.stringify(json)];\n  }\n}\n\nfunction at(key_path, decoder) {\n  if (key_path) {\n    var rest = key_path[1];\n    var key = key_path[0];\n\n    if (rest) {\n      var partial_arg = at(rest, decoder);\n      return function (param) {\n        return field(key, partial_arg, param);\n      };\n    } else {\n      return function (param) {\n        return field(key, decoder, param);\n      };\n    }\n  } else {\n    throw [Caml_builtin_exceptions.invalid_argument, \"Expected key_path to contain at least one element\"];\n  }\n}\n\nfunction optional(decode, json) {\n  try {\n    return Caml_option.some(Curry._1(decode, json));\n  } catch (raw_exn) {\n    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n\n    if (exn[0] === DecodeError) {\n      return;\n    } else {\n      throw exn;\n    }\n  }\n}\n\nfunction oneOf(decoders, json) {\n  var _decoders = decoders;\n  var _errors =\n  /* [] */\n  0;\n\n  while (true) {\n    var errors = _errors;\n    var decoders$1 = _decoders;\n\n    if (decoders$1) {\n      try {\n        return Curry._1(decoders$1[0], json);\n      } catch (raw_exn) {\n        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n\n        if (exn[0] === DecodeError) {\n          _errors =\n          /* :: */\n          [exn[1], errors];\n          _decoders = decoders$1[1];\n          continue;\n        } else {\n          throw exn;\n        }\n      }\n    } else {\n      var revErrors = List.rev(errors);\n      throw [DecodeError, \"All decoders given to oneOf failed. Here are all the errors: \" + (String(revErrors) + \". And the JSON being decoded: \") + JSON.stringify(json)];\n    }\n  }\n\n  ;\n}\n\nfunction either(a, b) {\n  var partial_arg_001 =\n  /* :: */\n  [b,\n  /* [] */\n  0];\n  var partial_arg =\n  /* :: */\n  [a, partial_arg_001];\n  return function (param) {\n    return oneOf(partial_arg, param);\n  };\n}\n\nfunction withDefault($$default, decode, json) {\n  try {\n    return Curry._1(decode, json);\n  } catch (raw_exn) {\n    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n\n    if (exn[0] === DecodeError) {\n      return $$default;\n    } else {\n      throw exn;\n    }\n  }\n}\n\nfunction map(f, decode, json) {\n  return Curry._1(f, Curry._1(decode, json));\n}\n\nfunction andThen(b, a, json) {\n  return Curry._2(b, Curry._1(a, json), json);\n}\n\nvar tuple2 = pair;\nexports.DecodeError = DecodeError;\nexports.id = id;\nexports.bool = bool;\nexports.$$float = $$float;\nexports.$$int = $$int;\nexports.string = string;\nexports.$$char = $$char;\nexports.date = date;\nexports.nullable = nullable;\nexports.nullAs = nullAs;\nexports.array = array;\nexports.list = list;\nexports.pair = pair;\nexports.tuple2 = tuple2;\nexports.tuple3 = tuple3;\nexports.tuple4 = tuple4;\nexports.dict = dict;\nexports.field = field;\nexports.at = at;\nexports.optional = optional;\nexports.oneOf = oneOf;\nexports.either = either;\nexports.withDefault = withDefault;\nexports.map = map;\nexports.andThen = andThen;\n/* No side effect */","map":null,"metadata":{},"sourceType":"module"}