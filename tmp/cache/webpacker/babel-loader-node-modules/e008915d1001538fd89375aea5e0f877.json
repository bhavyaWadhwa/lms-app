{"ast":null,"code":"'use strict';\n\nvar Caml_int32 = require(\"./caml_int32.js\");\n\nvar Caml_int64 = require(\"./caml_int64.js\");\n\nvar Caml_utils = require(\"./caml_utils.js\");\n\nvar Caml_builtin_exceptions = require(\"./caml_builtin_exceptions.js\");\n\nfunction parse_digit(c) {\n  if (c >= 65) {\n    if (c >= 97) {\n      if (c >= 123) {\n        return -1;\n      } else {\n        return c - 87 | 0;\n      }\n    } else if (c >= 91) {\n      return -1;\n    } else {\n      return c - 55 | 0;\n    }\n  } else if (c > 57 || c < 48) {\n    return -1;\n  } else {\n    return c -\n    /* \"0\" */\n    48 | 0;\n  }\n}\n\nfunction int_of_string_base(param) {\n  switch (param) {\n    case\n    /* Oct */\n    0:\n      return 8;\n\n    case\n    /* Hex */\n    1:\n      return 16;\n\n    case\n    /* Dec */\n    2:\n      return 10;\n\n    case\n    /* Bin */\n    3:\n      return 2;\n  }\n}\n\nfunction parse_sign_and_base(s) {\n  var sign = 1;\n  var base =\n  /* Dec */\n  2;\n  var i = 0;\n  var match = s.charCodeAt(i);\n\n  switch (match) {\n    case 43:\n      i = i + 1 | 0;\n      break;\n\n    case 44:\n      break;\n\n    case 45:\n      sign = -1;\n      i = i + 1 | 0;\n      break;\n\n    default:\n  }\n\n  if (s[i] === \"0\") {\n    var match$1 = s.charCodeAt(i + 1 | 0);\n\n    if (match$1 >= 89) {\n      if (match$1 >= 111) {\n        if (match$1 < 121) {\n          switch (match$1 - 111 | 0) {\n            case 0:\n              base =\n              /* Oct */\n              0;\n              i = i + 2 | 0;\n              break;\n\n            case 6:\n              i = i + 2 | 0;\n              break;\n\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 7:\n            case 8:\n              break;\n\n            case 9:\n              base =\n              /* Hex */\n              1;\n              i = i + 2 | 0;\n              break;\n          }\n        }\n      } else if (match$1 === 98) {\n        base =\n        /* Bin */\n        3;\n        i = i + 2 | 0;\n      }\n    } else if (match$1 !== 66) {\n      if (match$1 >= 79) {\n        switch (match$1 - 79 | 0) {\n          case 0:\n            base =\n            /* Oct */\n            0;\n            i = i + 2 | 0;\n            break;\n\n          case 6:\n            i = i + 2 | 0;\n            break;\n\n          case 1:\n          case 2:\n          case 3:\n          case 4:\n          case 5:\n          case 7:\n          case 8:\n            break;\n\n          case 9:\n            base =\n            /* Hex */\n            1;\n            i = i + 2 | 0;\n            break;\n        }\n      }\n    } else {\n      base =\n      /* Bin */\n      3;\n      i = i + 2 | 0;\n    }\n  }\n\n  return (\n    /* tuple */\n    [i, sign, base]\n  );\n}\n\nfunction caml_int_of_string(s) {\n  var match = parse_sign_and_base(s);\n  var i = match[0];\n  var base = int_of_string_base(match[2]);\n  var threshold = 4294967295;\n  var len = s.length;\n  var c = i < len ? s.charCodeAt(i) :\n  /* \"\\000\" */\n  0;\n  var d = parse_digit(c);\n\n  if (d < 0 || d >= base) {\n    throw [Caml_builtin_exceptions.failure, \"int_of_string\"];\n  }\n\n  var aux = function aux(_acc, _k) {\n    while (true) {\n      var k = _k;\n      var acc = _acc;\n\n      if (k === len) {\n        return acc;\n      } else {\n        var a = s.charCodeAt(k);\n\n        if (a ===\n        /* \"_\" */\n        95) {\n          _k = k + 1 | 0;\n          continue;\n        } else {\n          var v = parse_digit(a);\n\n          if (v < 0 || v >= base) {\n            throw [Caml_builtin_exceptions.failure, \"int_of_string\"];\n          }\n\n          var acc$1 = base * acc + v;\n\n          if (acc$1 > threshold) {\n            throw [Caml_builtin_exceptions.failure, \"int_of_string\"];\n          }\n\n          _k = k + 1 | 0;\n          _acc = acc$1;\n          continue;\n        }\n      }\n    }\n\n    ;\n  };\n\n  var res = match[1] * aux(d, i + 1 | 0);\n  var or_res = res | 0;\n\n  if (base === 10 && res !== or_res) {\n    throw [Caml_builtin_exceptions.failure, \"int_of_string\"];\n  }\n\n  return or_res;\n}\n\nfunction caml_int64_of_string(s) {\n  var match = parse_sign_and_base(s);\n  var hbase = match[2];\n  var i = match[0];\n  var base = Caml_int64.of_int32(int_of_string_base(hbase));\n  var sign = Caml_int64.of_int32(match[1]);\n  var threshold;\n\n  switch (hbase) {\n    case\n    /* Oct */\n    0:\n      threshold =\n      /* int64 */\n      [\n      /* hi */\n      536870911,\n      /* lo */\n      4294967295];\n      break;\n\n    case\n    /* Hex */\n    1:\n      threshold =\n      /* int64 */\n      [\n      /* hi */\n      268435455,\n      /* lo */\n      4294967295];\n      break;\n\n    case\n    /* Dec */\n    2:\n      threshold =\n      /* int64 */\n      [\n      /* hi */\n      429496729,\n      /* lo */\n      2576980377];\n      break;\n\n    case\n    /* Bin */\n    3:\n      threshold =\n      /* int64 */\n      [\n      /* hi */\n      2147483647,\n      /* lo */\n      4294967295];\n      break;\n  }\n\n  var len = s.length;\n  var c = i < len ? s.charCodeAt(i) :\n  /* \"\\000\" */\n  0;\n  var d = Caml_int64.of_int32(parse_digit(c));\n\n  if (Caml_int64.lt(d,\n  /* int64 */\n  [\n  /* hi */\n  0,\n  /* lo */\n  0]) || Caml_int64.ge(d, base)) {\n    throw [Caml_builtin_exceptions.failure, \"int64_of_string\"];\n  }\n\n  var aux = function aux(_acc, _k) {\n    while (true) {\n      var k = _k;\n      var acc = _acc;\n\n      if (k === len) {\n        return acc;\n      } else {\n        var a = s.charCodeAt(k);\n\n        if (a ===\n        /* \"_\" */\n        95) {\n          _k = k + 1 | 0;\n          continue;\n        } else {\n          var v = Caml_int64.of_int32(parse_digit(a));\n\n          if (Caml_int64.lt(v,\n          /* int64 */\n          [\n          /* hi */\n          0,\n          /* lo */\n          0]) || Caml_int64.ge(v, base) || Caml_int64.gt(acc, threshold)) {\n            throw [Caml_builtin_exceptions.failure, \"int64_of_string\"];\n          }\n\n          var acc$1 = Caml_int64.add(Caml_int64.mul(base, acc), v);\n          _k = k + 1 | 0;\n          _acc = acc$1;\n          continue;\n        }\n      }\n    }\n\n    ;\n  };\n\n  var res = Caml_int64.mul(sign, aux(d, i + 1 | 0));\n  var or_res = Caml_int64.or_(res,\n  /* int64 */\n  [\n  /* hi */\n  0,\n  /* lo */\n  0]);\n\n  if (Caml_int64.eq(base,\n  /* int64 */\n  [\n  /* hi */\n  0,\n  /* lo */\n  10]) && Caml_int64.neq(res, or_res)) {\n    throw [Caml_builtin_exceptions.failure, \"int64_of_string\"];\n  }\n\n  return or_res;\n}\n\nfunction int_of_base(param) {\n  switch (param) {\n    case\n    /* Oct */\n    0:\n      return 8;\n\n    case\n    /* Hex */\n    1:\n      return 16;\n\n    case\n    /* Dec */\n    2:\n      return 10;\n  }\n}\n\nfunction lowercase(c) {\n  if (c >=\n  /* \"A\" */\n  65 && c <=\n  /* \"Z\" */\n  90 || c >=\n  /* \"\\192\" */\n  192 && c <=\n  /* \"\\214\" */\n  214 || c >=\n  /* \"\\216\" */\n  216 && c <=\n  /* \"\\222\" */\n  222) {\n    return c + 32 | 0;\n  } else {\n    return c;\n  }\n}\n\nfunction parse_format(fmt) {\n  var len = fmt.length;\n\n  if (len > 31) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"format_int: format too long\"];\n  }\n\n  var f = {\n    justify: \"+\",\n    signstyle: \"-\",\n    filter: \" \",\n    alternate: false,\n    base:\n    /* Dec */\n    2,\n    signedconv: false,\n    width: 0,\n    uppercase: false,\n    sign: 1,\n    prec: -1,\n    conv: \"f\"\n  };\n  var _i = 0;\n\n  while (true) {\n    var i = _i;\n\n    if (i >= len) {\n      return f;\n    } else {\n      var c = fmt.charCodeAt(i);\n      var exit = 0;\n\n      if (c >= 69) {\n        if (c >= 88) {\n          if (c >= 121) {\n            exit = 1;\n          } else {\n            switch (c - 88 | 0) {\n              case 0:\n                f.base =\n                /* Hex */\n                1;\n                f.uppercase = true;\n                _i = i + 1 | 0;\n                continue;\n\n              case 13:\n              case 14:\n              case 15:\n                exit = 5;\n                break;\n\n              case 12:\n              case 17:\n                exit = 4;\n                break;\n\n              case 23:\n                f.base =\n                /* Oct */\n                0;\n                _i = i + 1 | 0;\n                continue;\n\n              case 29:\n                f.base =\n                /* Dec */\n                2;\n                _i = i + 1 | 0;\n                continue;\n\n              case 1:\n              case 2:\n              case 3:\n              case 4:\n              case 5:\n              case 6:\n              case 7:\n              case 8:\n              case 9:\n              case 10:\n              case 11:\n              case 16:\n              case 18:\n              case 19:\n              case 20:\n              case 21:\n              case 22:\n              case 24:\n              case 25:\n              case 26:\n              case 27:\n              case 28:\n              case 30:\n              case 31:\n                exit = 1;\n                break;\n\n              case 32:\n                f.base =\n                /* Hex */\n                1;\n                _i = i + 1 | 0;\n                continue;\n            }\n          }\n        } else if (c >= 72) {\n          exit = 1;\n        } else {\n          f.signedconv = true;\n          f.uppercase = true;\n          f.conv = String.fromCharCode(lowercase(c));\n          _i = i + 1 | 0;\n          continue;\n        }\n      } else {\n        switch (c) {\n          case 35:\n            f.alternate = true;\n            _i = i + 1 | 0;\n            continue;\n\n          case 32:\n          case 43:\n            exit = 2;\n            break;\n\n          case 45:\n            f.justify = \"-\";\n            _i = i + 1 | 0;\n            continue;\n\n          case 46:\n            f.prec = 0;\n            var j = i + 1 | 0;\n\n            while (function (j) {\n              return function () {\n                var w = fmt.charCodeAt(j) -\n                /* \"0\" */\n                48 | 0;\n                return w >= 0 && w <= 9;\n              };\n            }(j)()) {\n              f.prec = (Caml_int32.imul(f.prec, 10) + fmt.charCodeAt(j) | 0) -\n              /* \"0\" */\n              48 | 0;\n              j = j + 1 | 0;\n            }\n\n            ;\n            _i = j;\n            continue;\n\n          case 33:\n          case 34:\n          case 36:\n          case 37:\n          case 38:\n          case 39:\n          case 40:\n          case 41:\n          case 42:\n          case 44:\n          case 47:\n            exit = 1;\n            break;\n\n          case 48:\n            f.filter = \"0\";\n            _i = i + 1 | 0;\n            continue;\n\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n            exit = 3;\n            break;\n\n          default:\n            exit = 1;\n        }\n      }\n\n      switch (exit) {\n        case 1:\n          _i = i + 1 | 0;\n          continue;\n\n        case 2:\n          f.signstyle = String.fromCharCode(c);\n          _i = i + 1 | 0;\n          continue;\n\n        case 3:\n          f.width = 0;\n          var j$1 = i;\n\n          while (function (j$1) {\n            return function () {\n              var w = fmt.charCodeAt(j$1) -\n              /* \"0\" */\n              48 | 0;\n              return w >= 0 && w <= 9;\n            };\n          }(j$1)()) {\n            f.width = (Caml_int32.imul(f.width, 10) + fmt.charCodeAt(j$1) | 0) -\n            /* \"0\" */\n            48 | 0;\n            j$1 = j$1 + 1 | 0;\n          }\n\n          ;\n          _i = j$1;\n          continue;\n\n        case 4:\n          f.signedconv = true;\n          f.base =\n          /* Dec */\n          2;\n          _i = i + 1 | 0;\n          continue;\n\n        case 5:\n          f.signedconv = true;\n          f.conv = String.fromCharCode(c);\n          _i = i + 1 | 0;\n          continue;\n      }\n    }\n  }\n\n  ;\n}\n\nfunction finish_formatting(config, rawbuffer) {\n  var justify = config.justify;\n  var signstyle = config.signstyle;\n  var filter = config.filter;\n  var alternate = config.alternate;\n  var base = config.base;\n  var signedconv = config.signedconv;\n  var width = config.width;\n  var uppercase = config.uppercase;\n  var sign = config.sign;\n  var len = rawbuffer.length;\n\n  if (signedconv && (sign < 0 || signstyle !== \"-\")) {\n    len = len + 1 | 0;\n  }\n\n  if (alternate) {\n    if (base ===\n    /* Oct */\n    0) {\n      len = len + 1 | 0;\n    } else if (base ===\n    /* Hex */\n    1) {\n      len = len + 2 | 0;\n    }\n  }\n\n  var buffer = \"\";\n\n  if (justify === \"+\" && filter === \" \") {\n    for (var _for = len, _for_finish = width - 1 | 0; _for <= _for_finish; ++_for) {\n      buffer = buffer + filter;\n    }\n  }\n\n  if (signedconv) {\n    if (sign < 0) {\n      buffer = buffer + \"-\";\n    } else if (signstyle !== \"-\") {\n      buffer = buffer + signstyle;\n    }\n  }\n\n  if (alternate && base ===\n  /* Oct */\n  0) {\n    buffer = buffer + \"0\";\n  }\n\n  if (alternate && base ===\n  /* Hex */\n  1) {\n    buffer = buffer + \"0x\";\n  }\n\n  if (justify === \"+\" && filter === \"0\") {\n    for (var _for$1 = len, _for_finish$1 = width - 1 | 0; _for$1 <= _for_finish$1; ++_for$1) {\n      buffer = buffer + filter;\n    }\n  }\n\n  buffer = uppercase ? buffer + rawbuffer.toUpperCase() : buffer + rawbuffer;\n\n  if (justify === \"-\") {\n    for (var _for$2 = len, _for_finish$2 = width - 1 | 0; _for$2 <= _for_finish$2; ++_for$2) {\n      buffer = buffer + \" \";\n    }\n  }\n\n  return buffer;\n}\n\nfunction caml_format_int(fmt, i) {\n  if (fmt === \"%d\") {\n    return String(i);\n  } else {\n    var f = parse_format(fmt);\n    var f$1 = f;\n    var i$1 = i;\n    var i$2 = i$1 < 0 ? f$1.signedconv ? (f$1.sign = -1, -i$1) : i$1 >>> 0 : i$1;\n    var s = i$2.toString(int_of_base(f$1.base));\n\n    if (f$1.prec >= 0) {\n      f$1.filter = \" \";\n      var n = f$1.prec - s.length | 0;\n\n      if (n > 0) {\n        s = Caml_utils.repeat(n, \"0\") + s;\n      }\n    }\n\n    return finish_formatting(f$1, s);\n  }\n}\n\nfunction dec_of_pos_int64(x) {\n  if (Caml_int64.lt(x,\n  /* int64 */\n  [\n  /* hi */\n  0,\n  /* lo */\n  0])) {\n    var wbase =\n    /* int64 */\n    [\n    /* hi */\n    0,\n    /* lo */\n    10];\n    var y = Caml_int64.discard_sign(x);\n    var match = Caml_int64.div_mod(y, wbase);\n    var match$1 = Caml_int64.div_mod(Caml_int64.add(\n    /* int64 */\n    [\n    /* hi */\n    0,\n    /* lo */\n    8], match[1]), wbase);\n    var quotient = Caml_int64.add(Caml_int64.add(\n    /* int64 */\n    [\n    /* hi */\n    214748364,\n    /* lo */\n    3435973836], match[0]), match$1[0]);\n    return Caml_int64.to_string(quotient) + \"0123456789\"[Caml_int64.to_int32(match$1[1])];\n  } else {\n    return Caml_int64.to_string(x);\n  }\n}\n\nfunction oct_of_int64(x) {\n  var s = \"\";\n  var wbase =\n  /* int64 */\n  [\n  /* hi */\n  0,\n  /* lo */\n  8];\n  var cvtbl = \"01234567\";\n\n  if (Caml_int64.lt(x,\n  /* int64 */\n  [\n  /* hi */\n  0,\n  /* lo */\n  0])) {\n    var y = Caml_int64.discard_sign(x);\n    var match = Caml_int64.div_mod(y, wbase);\n    var quotient = Caml_int64.add(\n    /* int64 */\n    [\n    /* hi */\n    268435456,\n    /* lo */\n    0], match[0]);\n    var modulus = match[1];\n    s = cvtbl[Caml_int64.to_int32(modulus)] + s;\n\n    while (Caml_int64.neq(quotient,\n    /* int64 */\n    [\n    /* hi */\n    0,\n    /* lo */\n    0])) {\n      var match$1 = Caml_int64.div_mod(quotient, wbase);\n      quotient = match$1[0];\n      modulus = match$1[1];\n      s = cvtbl[Caml_int64.to_int32(modulus)] + s;\n    }\n\n    ;\n  } else {\n    var match$2 = Caml_int64.div_mod(x, wbase);\n    var quotient$1 = match$2[0];\n    var modulus$1 = match$2[1];\n    s = cvtbl[Caml_int64.to_int32(modulus$1)] + s;\n\n    while (Caml_int64.neq(quotient$1,\n    /* int64 */\n    [\n    /* hi */\n    0,\n    /* lo */\n    0])) {\n      var match$3 = Caml_int64.div_mod(quotient$1, wbase);\n      quotient$1 = match$3[0];\n      modulus$1 = match$3[1];\n      s = cvtbl[Caml_int64.to_int32(modulus$1)] + s;\n    }\n\n    ;\n  }\n\n  return s;\n}\n\nfunction caml_int64_format(fmt, x) {\n  if (fmt === \"%d\") {\n    return Caml_int64.to_string(x);\n  } else {\n    var f = parse_format(fmt);\n    var x$1 = f.signedconv && Caml_int64.lt(x,\n    /* int64 */\n    [\n    /* hi */\n    0,\n    /* lo */\n    0]) ? (f.sign = -1, Caml_int64.neg(x)) : x;\n    var match = f.base;\n    var s;\n\n    switch (match) {\n      case\n      /* Oct */\n      0:\n        s = oct_of_int64(x$1);\n        break;\n\n      case\n      /* Hex */\n      1:\n        s = Caml_int64.to_hex(x$1);\n        break;\n\n      case\n      /* Dec */\n      2:\n        s = dec_of_pos_int64(x$1);\n        break;\n    }\n\n    var fill_s;\n\n    if (f.prec >= 0) {\n      f.filter = \" \";\n      var n = f.prec - s.length | 0;\n      fill_s = n > 0 ? Caml_utils.repeat(n, \"0\") + s : s;\n    } else {\n      fill_s = s;\n    }\n\n    return finish_formatting(f, fill_s);\n  }\n}\n\nfunction caml_format_float(fmt, x) {\n  var f = parse_format(fmt);\n  var prec = f.prec < 0 ? 6 : f.prec;\n  var x$1 = x < 0 ? (f.sign = -1, -x) : x;\n  var s = \"\";\n\n  if (isNaN(x$1)) {\n    s = \"nan\";\n    f.filter = \" \";\n  } else if (isFinite(x$1)) {\n    var match = f.conv;\n\n    switch (match) {\n      case \"e\":\n        s = x$1.toExponential(prec);\n        var i = s.length;\n\n        if (s[i - 3 | 0] === \"e\") {\n          s = s.slice(0, i - 1 | 0) + (\"0\" + s.slice(i - 1 | 0));\n        }\n\n        break;\n\n      case \"f\":\n        s = x$1.toFixed(prec);\n        break;\n\n      case \"g\":\n        var prec$1 = prec !== 0 ? prec : 1;\n        s = x$1.toExponential(prec$1 - 1 | 0);\n        var j = s.indexOf(\"e\");\n        var exp = Number(s.slice(j + 1 | 0)) | 0;\n\n        if (exp < -4 || x$1 >= 1e21 || x$1.toFixed().length > prec$1) {\n          var i$1 = j - 1 | 0;\n\n          while (s[i$1] === \"0\") {\n            i$1 = i$1 - 1 | 0;\n          }\n\n          ;\n\n          if (s[i$1] === \".\") {\n            i$1 = i$1 - 1 | 0;\n          }\n\n          s = s.slice(0, i$1 + 1 | 0) + s.slice(j);\n          var i$2 = s.length;\n\n          if (s[i$2 - 3 | 0] === \"e\") {\n            s = s.slice(0, i$2 - 1 | 0) + (\"0\" + s.slice(i$2 - 1 | 0));\n          }\n        } else {\n          var p = prec$1;\n\n          if (exp < 0) {\n            p = p - (exp + 1 | 0) | 0;\n            s = x$1.toFixed(p);\n          } else {\n            while (function () {\n              s = x$1.toFixed(p);\n              return s.length > (prec$1 + 1 | 0);\n            }()) {\n              p = p - 1 | 0;\n            }\n\n            ;\n          }\n\n          if (p !== 0) {\n            var k = s.length - 1 | 0;\n\n            while (s[k] === \"0\") {\n              k = k - 1 | 0;\n            }\n\n            ;\n\n            if (s[k] === \".\") {\n              k = k - 1 | 0;\n            }\n\n            s = s.slice(0, k + 1 | 0);\n          }\n        }\n\n        break;\n\n      default:\n    }\n  } else {\n    s = \"inf\";\n    f.filter = \" \";\n  }\n\n  return finish_formatting(f, s);\n}\n\nvar caml_hexstring_of_float = function caml_hexstring_of_float(x, prec, style) {\n  if (!isFinite(x)) {\n    if (isNaN(x)) return \"nan\";\n    return x > 0 ? \"infinity\" : \"-infinity\";\n  }\n\n  var sign = x == 0 && 1 / x == -Infinity ? 1 : x >= 0 ? 0 : 1;\n  if (sign) x = -x;\n  var exp = 0;\n\n  if (x == 0) {} else if (x < 1) {\n    while (x < 1 && exp > -1022) {\n      x *= 2;\n      exp--;\n    }\n  } else {\n    while (x >= 2) {\n      x /= 2;\n      exp++;\n    }\n  }\n\n  var exp_sign = exp < 0 ? '' : '+';\n  var sign_str = '';\n  if (sign) sign_str = '-';else {\n    switch (style) {\n      case 43\n      /* '+' */\n      :\n        sign_str = '+';\n        break;\n\n      case 32\n      /* ' ' */\n      :\n        sign_str = ' ';\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  if (prec >= 0 && prec < 13) {\n    /* If a precision is given, and is small, round mantissa accordingly */\n    var cst = Math.pow(2, prec * 4);\n    x = Math.round(x * cst) / cst;\n  }\n\n  var x_str = x.toString(16);\n\n  if (prec >= 0) {\n    var idx = x_str.indexOf('.');\n\n    if (idx < 0) {\n      x_str += '.' + '0'.repeat(prec);\n    } else {\n      var size = idx + 1 + prec;\n      if (x_str.length < size) x_str += '0'.repeat(size - x_str.length);else x_str = x_str.substr(0, size);\n    }\n  }\n\n  return sign_str + '0x' + x_str + 'p' + exp_sign + exp.toString(10);\n};\n\nvar float_of_string = function float_of_string(s, exn) {\n  var res = +s;\n  if (s.length > 0 && res === res) return res;\n  s = s.replace(/_/g, \"\");\n  res = +s;\n\n  if (s.length > 0 && res === res || /^[+-]?nan$/i.test(s)) {\n    return res;\n  }\n\n  ;\n  var m = /^ *([+-]?)0x([0-9a-f]+)\\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s); //            1        2             3           4\n\n  if (m) {\n    var m3 = m[3].replace(/0+$/, '');\n    var mantissa = parseInt(m[1] + m[2] + m3, 16);\n    var exponent = (m[4] | 0) - 4 * m3.length;\n    res = mantissa * Math.pow(2, exponent);\n    return res;\n  }\n\n  if (/^\\+?inf(inity)?$/i.test(s)) return Infinity;\n  if (/^-inf(inity)?$/i.test(s)) return -Infinity;\n  throw exn;\n};\n\nfunction caml_float_of_string(s) {\n  return float_of_string(s, [Caml_builtin_exceptions.failure, \"float_of_string\"]);\n}\n\nvar caml_nativeint_format = caml_format_int;\nvar caml_int32_format = caml_format_int;\nvar caml_int32_of_string = caml_int_of_string;\nvar caml_nativeint_of_string = caml_int_of_string;\nexports.caml_format_float = caml_format_float;\nexports.caml_hexstring_of_float = caml_hexstring_of_float;\nexports.caml_format_int = caml_format_int;\nexports.caml_nativeint_format = caml_nativeint_format;\nexports.caml_int32_format = caml_int32_format;\nexports.caml_float_of_string = caml_float_of_string;\nexports.caml_int64_format = caml_int64_format;\nexports.caml_int_of_string = caml_int_of_string;\nexports.caml_int32_of_string = caml_int32_of_string;\nexports.caml_int64_of_string = caml_int64_of_string;\nexports.caml_nativeint_of_string = caml_nativeint_of_string;\n/* No side effect */","map":null,"metadata":{},"sourceType":"module"}